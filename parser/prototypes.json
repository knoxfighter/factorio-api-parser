{
  "tables": [
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": false
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_PlayerPort",
      "link": "/Prototype/PlayerPort",
      "description": "When a character dies, this entity will immediately respawn the character at the entities location, so there is no respawn time. If there are multiple player ports in the world, the character will respawn at the nearest player port to their death location."
    },
    {
      "properties": [
        {
          "name": "pictures",
          "type": "PT_SpriteVariations",
          "optional": false
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Fish",
      "link": "/Prototype/Fish",
      "description": "Entity that spawns in water tiles, which can be mined. Moves around unless deactived with entity.active = false."
    },
    {
      "properties": [],
      "parent": "PT_ItemWithLabel",
      "prototype": "Prototype",
      "name": "PT_ItemWithTags",
      "link": "/Prototype/ItemWithTags",
      "description": "null"
    },
    {
      "properties": [
        {
          "name": "animations",
          "description": "The animation for the pump.",
          "type": "PT_Animation4Way",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "The type of energy the pump uses.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "The amount of energy the pump uses.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "fluid_box",
          "description": "The area of the entity where fluid inputs and outputs.",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "pumping_speed",
          "description": "The amount of fluid this pump transfers per tick.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "fluid_animation",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "fluid_wagon_connector_alignment_tolerance",
          "type": "PT_double",
          "default": "0.0625",
          "optional": true
        },
        {
          "name": "fluid_wagon_connector_frame_count",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "fluid_wagon_connector_graphics",
          "description": "Needs <code>load_animations</code> and <code>unload_animations</code> keys, both with a <a href=\"/Types/PumpConnectorGraphics\" title=\"Types/PumpConnectorGraphics\">PumpConnectorGraphics</a> as the value.",
          "type": "PT_PumpConnectorGraphics[]",
          "optional": true
        },
        {
          "name": "fluid_wagon_connector_speed",
          "type": "PT_double",
          "default": "0.015625",
          "optional": true
        },
        {
          "name": "glass_pictures",
          "type": "PT_Sprite4Way",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Pump",
      "link": "/Prototype/Pump",
      "description": "The Pump is used to transfer liquids or gas between tanks, and pipes."
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Unique textual identification of the prototype.",
          "type": "string",
          "optional": false
        },
        {
          "name": "sound",
          "description": "The sound file and volume.",
          "type": "PT_SoundType",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_WindSound",
      "link": "/Prototype/WindSound",
      "description": "A wind sound."
    },
    {
      "properties": [
        {
          "name": "activation_buffer_ratio",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "fluid_buffer_input_flow",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "fluid_buffer_size",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "attacking_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "ending_attack_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "enough_fuel_indicator_picture",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "enough_fuel_indicator_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "folded_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "folding_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "muzzle_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "muzzle_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "not_enough_fuel_indicator_picture",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "not_enough_fuel_indicator_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "out_of_ammo_alert_icon",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "prepared_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "preparing_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        },
        {
          "name": "starting_attack_muzzle_animation_shift",
          "type": "PT_AnimatedVector",
          "optional": true
        }
      ],
      "parent": "PT_Turret",
      "prototype": "Prototype",
      "name": "PT_FluidTurret",
      "link": "/Prototype/FluidTurret",
      "description": "A turret that consumes fluid as ammo."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_ResourceCategory",
      "link": "/Prototype/ResourceCategory",
      "description": "A resource category. The built-in categories can be found <a href=\"/Data.raw#resource-category\" title=\"Data.raw\">here</a>. See <a href=\"/Prototype/ResourceEntity#category\" title=\"Prototype/ResourceEntity\">Prototype/ResourceEntity#category</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "picture_safe",
          "description": "The sprite of the landmine before it is armed (just after placing).",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "picture_set",
          "description": "The sprite of the landmine of a friendly force when it is armed.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "trigger_radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "ammo_category",
          "description": "Name of a <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">Prototype/AmmoCategory</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "force_die_on_attack",
          "description": "Force the landmine to kill itself when exploding.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "picture_set_enemy",
          "description": "The sprite of the landmine of an enemy force when it is armed.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "timeout",
          "description": "Time between placing and the landmine being armed, in ticks.",
          "type": "PT_uint32",
          "default": "120",
          "optional": true
        },
        {
          "name": "trigger_force",
          "type": "PT_ForceCondition",
          "default": "enemy",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_LandMine",
      "link": "/Prototype/LandMine",
      "description": "A <a href=\"/Land_mine\" title=\"Land mine\">land mine</a>."
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of the sound. Must be unique. Used as a <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/Concepts.html#SoundPath\">https://lua-api.factorio.com/latest/Concepts.html#SoundPath</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "aggregation",
          "type": "PT_SoundAggregation",
          "optional": true
        },
        {
          "name": "allow_random_repeat",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "audible_distance_modifier",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "category",
          "description": "This defines which slider in the sound settings affects the volume of this sound. Furthermore, some sound types are mixed differently than others, e.g. zoom level effects are applied.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=527778#p527778\">[1]</a>",
          "type": "PT_SoundCategory",
          "default": "game-effect",
          "optional": true
        },
        {
          "name": "filename",
          "description": "Mandatory if <code>variations</code> is not given.<br>Supported sound file formats are `.ogg`, `.wav` and `.voc`.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "max_speed",
          "description": "Only loaded if <code>variations</code> is not given. Mandatory if min_speed is present, otherwise not loaded. Must be >= min_speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "min_speed",
          "description": "Only loaded if <code>variations</code> is not given. Not loaded if speed is present. Speed must be >= 1 / 64.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "preload",
          "description": "Only loaded if <code>variations</code> is not given.",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "speed",
          "description": "Only loaded if <code>variations</code> is not given. Speed must be >= 1 / 64. This sets both min and max speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "variations",
          "type": "PT_SoundValue2[]",
          "optional": true
        },
        {
          "name": "volume",
          "description": "Mandatory if <code>variations</code> is not given.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_Sound",
      "link": "/Prototype/Sound",
      "description": "Specifies a sound that can be used with <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/Concepts.html#SoundPath\">https://lua-api.factorio.com/latest/Concepts.html#SoundPath</a> during runtime."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This will trigger the achievement, when the player receives enough items through logistic robots.",
          "type": "PT_MaterialAmountType",
          "optional": false
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_DeliverByRobotsAchievement",
      "link": "/Prototype/DeliverByRobotsAchievement",
      "description": "This prototype definition is used for receiving an achievement, when the player requests — and receives — enough items using logistic robots."
    },
    {
      "properties": [
        {
          "name": "excluded",
          "description": "This will <b>not</b> disable the achievement, if this entity is placed, and you have received any amount of power from it.",
          "type": "string|string[]",
          "optional": false
        },
        {
          "name": "included",
          "description": "This will disable the achievement, if this entity is placed, and you have received any amount of power from it. If you finish the game without receiving power from this entity, you receive the achievement.",
          "type": "string|string[]",
          "optional": false
        },
        {
          "name": "last_hour_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "minimum_energy_produced",
          "type": "PT_Energy",
          "default": "0W",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_DontUseEntityInEnergyProductionAchievement",
      "link": "/Prototype/DontUseEntityInEnergyProductionAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player finishes the game without receiving energy from a specific energy source."
    },
    {
      "properties": [],
      "parent": "PT_Tool",
      "prototype": "Prototype",
      "name": "PT_MiningTool",
      "link": "/Prototype/MiningTool",
      "description": "Exists only for migration, cannot be used by mods."
    },
    {
      "properties": [
        {
          "name": "base",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "base_animation",
          "description": "The animation played when the roboport is idle.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "base_patch",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "charge_approach_distance",
          "description": "The distance (in tiles) from the roboport at which robots will wait to charge. Notably, if the robot is already in range, then it will simply wait at its current position.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "charging_energy",
          "description": "The amount of energy that is given to a robot per tick.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "construction_radius",
          "description": "Can't be negative.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "door_animation_down",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "door_animation_up",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "The roboport's energy source. Must be an electric or void energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "The amount of energy the roboport uses when idle.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "logistics_radius",
          "description": "Can't be negative.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "material_slots_count",
          "description": "The number of repair pack slots in the roboport.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "recharge_minimum",
          "type": "PT_Energy",
          "description": "Minimum charge that the roboport has to have after a blackout (0 charge/buffered energy) to begin working again. Additionally, freshly placed roboports will have their energy buffer filled with <code>0.25 × recharge_minimum</code> energy.",
          "optional": false
        },
        {
          "name": "recharging_animation",
          "description": "The animation played at each charging point when a robot is charging there.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "request_to_open_door_timeout",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "robot_slots_count",
          "description": "The number of robot slots in the roboport.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "spawn_and_station_height",
          "description": "Presumably states the height of the charging stations and thus an additive offset for the charging_offsets.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "charging_distance",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "charging_offsets",
          "description": "The offsets from the centre of the roboport at which robots will charge. Only used if charging_station_count is equal to 0.",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "charging_station_count",
          "description": "The offsets from the center of the roboport at which robots will charge. Only used if charging_station_count is equal to 0.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "charging_station_shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "charging_threshold_distance",
          "description": "Unused.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "close_door_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "default_available_construction_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_available_logistic_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_total_construction_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_total_logistic_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_construction_radius_visualization",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_logistic_radius_visualization",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "logistics_connection_distance",
          "description": "Must be >= <code>logistics_radius</code>.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "open_door_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "recharging_light",
          "description": "The light emitted when charging a robot.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "robot_limit",
          "description": "Unused.",
          "type": "PT_ItemCountType",
          "optional": true
        },
        {
          "name": "robot_vertical_acceleration",
          "type": "PT_float",
          "default": "0.01",
          "optional": true
        },
        {
          "name": "robots_shrink_when_entering_and_exiting",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spawn_and_station_shadow_height_offset",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "stationing_offset",
          "description": "The offset from the centre of the roboport at which robots will enter and exit.",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Roboport",
      "link": "/Prototype/Roboport",
      "description": "A <a href=\"/Roboport\" title=\"Roboport\">roboport</a>."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Must be an electric or void energy source.",
          "type": "PT_EnergySource",
          "optional": false
        }
      ],
      "parent": "PT_Turret",
      "prototype": "Prototype",
      "name": "PT_ElectricTurret",
      "link": "/Prototype/ElectricTurret",
      "description": "A turret that consumes electricity as ammo."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_FuelCategory",
      "link": "/Prototype/FuelCategory",
      "description": "Each item which has a fuel_value must have a fuel category. The fuel categories are used to allow only certain fuels to be used in <a href=\"/Types/EnergySource\" title=\"Types/EnergySource\">Types/EnergySource</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This is how much the player has to craft in an hour, to receive the achievement.",
          "type": "PT_MaterialAmountType",
          "optional": false
        },
        {
          "name": "fluid_product",
          "description": "This will tell the achievement what fluid the player needs to craft, to get the achievement.",
          "type": "string",
          "optional": true
        },
        {
          "name": "item_product",
          "description": "This will tell the achievement what item the player needs to craft, to get the achievement.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_ProducePerHourAchievement",
      "link": "/Prototype/ProducePerHourAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player crafts a specified item a certain amount, in an hour."
    },
    {
      "properties": [
        {
          "name": "gui_mode",
          "type": "PT_GuiMode",
          "default": "all",
          "optional": true
        }
      ],
      "parent": "PT_Pipe",
      "prototype": "Prototype",
      "name": "PT_InfinityPipe",
      "link": "/Prototype/InfinityPipe",
      "description": "This entity produces or consumes fluids. Its fluid settings can be changed runtime."
    },
    {
      "properties": [
        {
          "name": "animations",
          "description": "Simple entity must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "count_as_rock_for_filtered_deconstruction",
          "description": "Whether this entity should be treated as a rock for the purpose of deconstruction and for <a href=\"/Prototype/Car#immune_to_rock_impacts\" title=\"Prototype/Car\">Prototype/Car#immune_to_rock_impacts</a>.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "picture",
          "description": "Simple entity must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Simple entity must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "random_variation_on_create",
          "description": "Whether a random graphics variation is chosen when placing the entity/creating it via script/creating it via map generation. If this is false, the entity will use the first variation instead of a random one.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Used to determine render order for entities with the same <code>render_layer</code> in the same position. Entities with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_SimpleEntity",
      "link": "/Prototype/SimpleEntity",
      "description": "An extremely basic entity with no special functionality. Used for minable rocks."
    },
    {
      "properties": [
        {
          "name": "energy_per_nearby_scan",
          "description": "The amount of energy the radar has to consume for nearby scan to be performed. Performance warning: nearby scan causes recharting of many chunks, which is expensive operation. If you want to make a radar that updates map more in real time, you should keep its range low. If you are making radar with high range, you should set this value such that nearby scan is performed once a second or so. For example if you set energy_usage to 100kW, setting energy_per_nearby_scan to 100kJ will cause nearby scan happen once per second. This value doesn't have any effect on sector scanning.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "energy_per_sector",
          "description": "The amount of energy it takes to scan a sector. This value doesn't have any effect on nearby scanning.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "The amount of energy this radar uses.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "The amount of energy this radar uses.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "max_distance_of_nearby_sector_revealed",
          "description": "The radius of the area constantly revealed by this radar, in chunks.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_distance_of_sector_revealed",
          "description": "The radius of the area this radar can chart, in chunks.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_RotatedSprite",
          "optional": false
        },
        {
          "name": "radius_minimap_visualisation_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "rotation_speed",
          "type": "PT_double",
          "default": "0.01",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Radar",
      "link": "/Prototype/Radar",
      "description": "A <a href=\"/Radar\" title=\"Radar\">radar</a>."
    },
    {
      "properties": [],
      "parent": "PT_RailSignalBase",
      "prototype": "Prototype",
      "name": "PT_RailSignal",
      "link": "/Prototype/RailSignal",
      "description": "A <a href=\"/Rail_signal\" title=\"Rail signal\">rail signal</a>."
    },
    {
      "properties": [
        {
          "name": "from",
          "description": "The name of the fonts .ttf descriptor. This descriptor must be defined in the locale info.json. Refer to data/core/locale/_language_/info.json for examples.",
          "type": "string",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the font.",
          "type": "string",
          "optional": false
        },
        {
          "name": "size",
          "description": "Size of the font.",
          "type": "PT_int32",
          "optional": false
        },
        {
          "name": "border",
          "description": "Whether the font has a border.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "border_color",
          "description": "The color of the border, if enabled.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "filtered",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spacing",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_Font",
      "link": "/Prototype/Font",
      "description": "Fonts are used in all gui in the game."
    },
    {
      "properties": [
        {
          "name": "research_all",
          "description": "This will only trigger if the player has learned every research in the game.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "technology",
          "description": "Researching this technology will trigger the achievement.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_ResearchAchievement",
      "link": "/Prototype/ResearchAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player completes a specific research."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ItemEntity",
      "link": "/Prototype/ItemEntity",
      "description": "The entity used for items on the ground."
    },
    {
      "properties": [
        {
          "name": "filter_count",
          "description": "How many item filters this loader has. Maximum count of filtered items in loader is 5.",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "structure",
          "type": "PT_LoaderStructure",
          "optional": false
        },
        {
          "name": "belt_length",
          "description": "How long this loader's belt is. Should be the same as belt_distance, which is hardcoded to 0 for this loader type. <a href=\"/Prototype/Loader1x2\" title=\"Prototype/Loader1x2\">Prototype/Loader1x2</a> can be used if a belt_distance of 0.5 is desired.",
          "type": "PT_double",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "container_distance",
          "description": "The distance between the position of this loader and the tile of the loader's container target.",
          "type": "PT_double",
          "default": "1.5",
          "optional": true
        },
        {
          "name": "structure_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_Loader1x1",
      "link": "/Prototype/Loader1x1",
      "description": "<p>Continuously loads and unloads machines, as an alternative to inserters.<br>This loader type is identical to <a href=\"/Prototype/Loader1x2\" title=\"Prototype/Loader1x2\">Prototype/Loader1x2</a> with the exception of its hardcoded belt_distance:</p><ul><li>The belt_distance of the loader determines the distance between the position of this loader and the tile of the loader's belt target.</li><li>This loader type always has a belt_distance of 0, meaning by default it is 1 tile long in total.</li><li>For a loader type with a belt_distance of 0.5, see <a href=\"/Prototype/Loader1x2\" title=\"Prototype/Loader1x2\">Prototype/Loader1x2</a>.</li></ul>"
    },
    {
      "properties": [
        {
          "name": "filter_count",
          "description": "How many item filters this loader has. Maximum count of filtered items in loader is 5.",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "structure",
          "type": "PT_LoaderStructure",
          "optional": false
        },
        {
          "name": "belt_length",
          "description": "How long this loader's belt is. Should be the same as belt_distance, which is hardcoded to 0.5 for this loader type. <a href=\"/Prototype/Loader1x1\" title=\"Prototype/Loader1x1\">Prototype/Loader1x1</a> can be used if a belt_distance of 0 is desired.",
          "type": "PT_double",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "container_distance",
          "description": "The distance between the position of this loader and the tile of the loader's container target.",
          "type": "PT_double",
          "default": "1.5",
          "optional": true
        },
        {
          "name": "structure_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_Loader1x2",
      "link": "/Prototype/Loader1x2",
      "description": "<p>Continuously loads and unloads machines, as an alternative to inserters.<br>This loader type is identical to <a href=\"/Prototype/Loader1x1\" title=\"Prototype/Loader1x1\">Prototype/Loader1x1</a> with the exception of its hardcoded belt_distance:</p><ul><li>The belt_distance of the loader determines the distance between the position of this loader and the tile of the loader's belt target.</li><li>This loader type always has a belt_distance of 0.5, meaning by default it is 2 tiles long in total.</li><li>For a loader type with a belt_distance of 0, see <a href=\"/Prototype/Loader1x1\" title=\"Prototype/Loader1x1\">Prototype/Loader1x1</a>.</li></ul>"
    },
    {
      "properties": [
        {
          "name": "order_in_recipe",
          "description": "Items in recipes are ordered by item group. The <code>order_in_recipe</code> property can be used to specify the ordering in recipes without affecting the inventory order.",
          "type": "PT_Order",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_ItemGroup",
      "link": "/Prototype/ItemGroup",
      "description": "An item group. Item groups are shown above the list of craftable items in the player's inventory. The built-in groups are \"logistics\", \"production\", \"intermediate-products\" and \"combat\" but mods can define their own. See also <a href=\"/Prototype/Item#group\" title=\"Prototype/Item\">Prototype/Item#group</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "structure",
          "type": "PT_Animation4Way",
          "optional": false
        },
        {
          "name": "structure_animation_movement_cooldown",
          "type": "PT_uint32",
          "default": "10",
          "optional": true
        },
        {
          "name": "structure_animation_speed_coefficient",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "structure_patch",
          "description": "Drawn 1 tile north of <code>structure</code> when the splitter is facing east or west.",
          "type": "PT_Animation4Way",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_Splitter",
      "link": "/Prototype/Splitter",
      "description": "A <a href=\"/Splitter\" title=\"Splitter\">splitter</a>."
    },
    {
      "properties": [
        {
          "name": "until_second",
          "description": "This lets the game know how long into a game, before you can no longer complete the achievement.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_FinishTheGameAchievement",
      "link": "/Prototype/FinishTheGameAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player finishes the game."
    },
    {
      "properties": [
        {
          "name": "ammo_stack_limit",
          "description": "Must be > 0.",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "gun",
          "description": "Name of a <a href=\"/Prototype/Gun\" title=\"Prototype/Gun\">Prototype/Gun</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "inventory_size",
          "description": "Must be > 0.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "manual_range_modifier",
          "description": "Must be > 0.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "turret_rotation_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "cannon_barrel_light_direction",
          "description": "Only loaded if <code>cannon_barrel_recoil_shiftings</code> is loaded.",
          "type": "PT_Vector3D",
          "optional": true
        },
        {
          "name": "cannon_barrel_pictures",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "cannon_barrel_recoil_shiftings",
          "type": "PT_Vector3D[]",
          "optional": true
        },
        {
          "name": "cannon_barrel_recoil_shiftings_load_correction_matrix",
          "description": "Only loaded if <code>cannon_barrel_recoil_shiftings</code> is loaded.",
          "type": "PT_Vector3D[]",
          "optional": true
        },
        {
          "name": "cannon_base_pictures",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "cannon_base_shiftings",
          "description": "Must match <code>cannon_base_pictures</code> frame count.",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "cannon_parking_frame_count",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "cannon_parking_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "disable_automatic_firing",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "rotating_sound",
          "type": "PT_InterruptibleSound",
          "optional": true
        },
        {
          "name": "rotating_stopped_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "turn_after_shooting_cooldown",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_RollingStock",
      "prototype": "Prototype",
      "name": "PT_ArtilleryWagon",
      "link": "/Prototype/ArtilleryWagon",
      "description": "An <a href=\"/Artillery_wagon\" title=\"Artillery wagon\">artillery wagon</a>."
    },
    {
      "properties": [
        {
          "name": "color_lookup",
          "type": "PT_DaytimeColorLookupTable",
          "optional": false
        },
        {
          "name": "energy_input",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "activate_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "darkness_to_turn_on",
          "description": "Must be >= 0 and <= 1.",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "deactivate_sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_NightVisionEquipment",
      "link": "/Prototype/NightVisionEquipment",
      "description": "Used by <a href=\"/Nightvision\" title=\"Nightvision\">nightvision</a>."
    },
    {
      "properties": [
        {
          "name": "arrow_picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "blinking",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "circle_picture",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Arrow",
      "link": "/Prototype/Arrow",
      "description": "The arrows used for example in the campaign, they are literally just arrows."
    },
    {
      "properties": [
        {
          "name": "consumption",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "May not be a heat energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "heat_buffer",
          "type": "PT_HeatBuffer",
          "optional": false
        },
        {
          "name": "working_light_picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "connection_patches_connected",
          "description": "If defined, number of variations must be at least equal to count of <a href=\"/Types/HeatBuffer#connections\" title=\"Types/HeatBuffer\">connections</a> defined in <code>heat_buffer</code>. Each variation represents connected heat buffer connection of corresponding index.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "connection_patches_disconnected",
          "description": "If defined, number of variations must be at least equal to count of <a href=\"/Types/HeatBuffer#connections\" title=\"Types/HeatBuffer\">connections</a> defined in <code>heat_buffer</code>. Each variation represents unconnected heat buffer connection of corresponding index.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "default_fuel_glow_color",
          "description": "When <code>use_fuel_glow_color</code> is true, this is the color used as <code>working_light_picture</code> tint for fuels that don't have glow color defined.",
          "type": "PT_Color",
          "default": "{1,1,1,1}",
          "optional": true
        },
        {
          "name": "heat_connection_patches_connected",
          "description": "If defined, number of variations must be at least equal to count of <a href=\"/Types/HeatBuffer#connections\" title=\"Types/HeatBuffer\">connections</a> defined in <code>heat_buffer</code>. When reactor is heated, corresponding variations are drawn over <code>connection_patches_connected</code>.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "heat_connection_patches_disconnected",
          "description": "If defined, number of variations must be at least equal to count of <a href=\"/Types/HeatBuffer#connections\" title=\"Types/HeatBuffer\">connections</a> defined in <code>heat_buffer</code>. When reactor is heated, corresponding variations are drawn over <code>connection_patches_disconnected</code>.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "heat_lower_layer_picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "lower_layer_picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "meltdown_action",
          "description": "The action is triggered when the reactor dies (is destroyed) at over 90% of max temperature.",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "neighbour_bonus",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "neighbour_collision_increase",
          "description": "The collision box of a reactor is increased by this on the sides where it connects to another reactor. Cannot be negative.",
          "type": "PT_double",
          "default": "0.25",
          "optional": true
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "scale_energy_usage",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "use_fuel_glow_color",
          "description": "Whether the reactor should use <a href=\"/Prototype/Item#fuel_glow_color\" title=\"Prototype/Item\">fuel_glow_color</a> from the fuel item prototype as light color and tint for <code>working_light_picture</code>.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/71121\">[1]</a>",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Reactor",
      "link": "/Prototype/Reactor",
      "description": "A <a href=\"/Nuclear_reactor\" title=\"Nuclear reactor\">reactor</a>."
    },
    {
      "properties": [
        {
          "name": "style",
          "description": "Needs a style of the type \"speech_bubble_style\", defined inside the gui styles.",
          "type": "string",
          "optional": false
        },
        {
          "name": "fade_in_out_ticks",
          "type": "PT_uint32",
          "default": "60",
          "optional": true
        },
        {
          "name": "wrapper_flow_style",
          "description": "Needs a style of the type \"flow_style\", defined inside the gui styles.",
          "type": "string",
          "default": "flow_style",
          "optional": true
        },
        {
          "name": "y_offset",
          "type": "PT_double",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_SpeechBubble",
      "link": "/Prototype/SpeechBubble",
      "description": "A speech bubble. It floats in the world and can display text."
    },
    {
      "properties": [
        {
          "name": "speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "repair_result",
          "type": "PT_Trigger",
          "description": "This does nothing, it is never triggered.",
          "optional": true
        }
      ],
      "parent": "PT_Tool",
      "prototype": "Prototype",
      "name": "PT_RepairTool",
      "link": "/Prototype/RepairTool",
      "description": "A <a href=\"/Repair_pack\" title=\"Repair pack\">repair pack</a>."
    },
    {
      "properties": [
        {
          "name": "air_resistance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "connection_distance",
          "description": "The distance between the joint of this rolling stock and its connected rolling stocks joint.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "joint_distance",
          "description": "<p>The length between this rolling stocks front and rear joints. Joints are the point where connection_distance is measured from when rolling stock are connected to one another. Wheels sprite are placed based on the joint position.</p><p>Maximum joint distance is 15.</p><p>Note: There needs to be border at least 0.2 between the bounding box edge and joint.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_speed",
          "description": "<p>Maximum speed of the rolling stock in tiles/tick.</p><p>In-game, the max speed of a train is <code>min(all_rolling_stock_max_speeds) × average(all_fuel_modifiers_in_all_locomotives)</code>. This calculated train speed is then silently capped to 7386.3km/h.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_RotatedSprite",
          "optional": false
        },
        {
          "name": "vertical_selection_shift",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "allow_manual_color",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_robot_dispatch_in_automatic_mode",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "back_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "drive_over_tie_trigger",
          "description": "Usually a sound to play when the rolling stock drives over a tie. The rolling stock is considered to be driving over a tie every <code>tie_distance</code> tiles.",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "horizontal_doors",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "stand_by_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "tie_distance",
          "description": "In tiles. Used to determine how often <code>drive_over_tie_trigger</code> is triggered.",
          "type": "PT_double",
          "default": "10.0",
          "optional": true
        },
        {
          "name": "vertical_doors",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "wheels",
          "type": "PT_RotatedSprite",
          "optional": true
        }
      ],
      "parent": "PT_Vehicle",
      "name": "PT_RollingStock",
      "link": "/Prototype/RollingStock",
      "description": "The abstract base of all rolling stock."
    },
    {
      "properties": [
        {
          "name": "difficulty_settings",
          "type": "PT_MapSettingsDifficultySettings",
          "optional": false
        },
        {
          "name": "enemy_evolution",
          "type": "PT_MapSettingsEnemyEvolution",
          "optional": false
        },
        {
          "name": "enemy_expansion",
          "type": "PT_MapSettingsEnemyExpansion",
          "optional": false
        },
        {
          "name": "max_failed_behavior_count",
          "description": "If a behavior fails this many times, the enemy (or enemy group) is destroyed. This solves biters stuck within their own base.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the map-settings. Must be \"map-settings\" since only one instances of this prototype can be defined.",
          "type": "string",
          "optional": false
        },
        {
          "name": "path_finder",
          "type": "PT_MapSettingsPathFinder",
          "optional": false
        },
        {
          "name": "pollution",
          "description": "The pollution settings, the values are for 60 ticks (1 second).",
          "type": "PT_MapSettingsPollution",
          "optional": false
        },
        {
          "name": "steering",
          "type": "PT_MapSettingsSteering",
          "optional": false
        },
        {
          "name": "unit_group",
          "type": "PT_MapSettingsSteeringUnitGroup",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_MapSettings",
      "link": "/Prototype/MapSettings",
      "description": "The default map settings. Only 1 instance of this prototype can exist."
    },
    {
      "properties": [
        {
          "name": "bending_type",
          "description": "Must be \"straight\".",
          "type": "string",
          "default": "straight",
          "optional": true
        }
      ],
      "parent": "PT_Rail",
      "prototype": "Prototype",
      "name": "PT_StraightRail",
      "link": "/Prototype/StraightRail",
      "description": "A straight rail."
    },
    {
      "properties": [
        {
          "name": "capacity",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "tank_count",
          "description": "Must be 1, 2 or 3.",
          "type": "PT_uint8",
          "default": "3",
          "optional": true
        }
      ],
      "parent": "PT_RollingStock",
      "prototype": "Prototype",
      "name": "PT_FluidWagon",
      "link": "/Prototype/FluidWagon",
      "description": "A <a href=\"/Fluid_wagon\" title=\"Fluid wagon\">fluid wagon</a>."
    },
    {
      "properties": [
        {
          "name": "height",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "horizontal_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "particle",
          "description": "Name of a <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a>. Either this or <code>smoke</code> must be defined.",
          "type": "string",
          "optional": false
        },
        {
          "name": "time_before_start",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "time_to_live",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "vertical_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "height_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "horizontal_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "time_before_start_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "time_to_live_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "vertical_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ParticleSource",
      "link": "/Prototype/ParticleSource",
      "description": "Creates particles."
    },
    {
      "properties": [
        {
          "name": "active_energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "activity_led_light_offsets",
          "description": "Array of 4 vectors.",
          "type": "PT_vector[]",
          "optional": false
        },
        {
          "name": "activity_led_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "Must be an electric or void energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "input_connection_bounding_box",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "input_connection_points",
          "description": "Array of 4 WireConnectionPoints.",
          "type": "PT_WireConnectionPoint[]",
          "optional": false
        },
        {
          "name": "output_connection_bounding_box",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "output_connection_points",
          "description": "Array of 4 WireConnectionPoints.",
          "type": "PT_WireConnectionPoint[]",
          "optional": false
        },
        {
          "name": "screen_light_offsets",
          "description": "Array of 4 vectors.",
          "type": "PT_vector[]",
          "optional": false
        },
        {
          "name": "sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "activity_led_hold_time",
          "type": "PT_uint8",
          "default": "5",
          "optional": true
        },
        {
          "name": "activity_led_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "screen_light",
          "type": "PT_LightDefinition",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_Combinator",
      "link": "/Prototype/Combinator",
      "description": "Abstract base type for decider and arithmetic combinators."
    },
    {
      "properties": [
        {
          "name": "active_energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "arm_01_back_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "arm_02_right_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "arm_03_front_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "base_day_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "base_front_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "door_back_open_offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "door_back_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "door_front_open_offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "door_front_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "door_opening_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "hole_clipping_box",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "hole_light_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hole_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "idle_energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "lamp_energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "light_blinking_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "red_lights_back_sprites",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "red_lights_front_sprites",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rocket_entity",
          "description": "Name of a <a href=\"/Prototype/RocketSiloRocket\" title=\"Prototype/RocketSiloRocket\">Prototype/RocketSiloRocket</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "rocket_glow_overlay_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rocket_parts_required",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "rocket_shadow_overlay_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "satellite_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "satellite_shadow_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "shadow_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "silo_fade_out_end_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "silo_fade_out_start_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "times_to_blink",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "alarm_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "alarm_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "base_engine_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "base_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "base_night_sprite",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "clamps_off_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "clamps_off_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "clamps_on_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "clamps_on_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "doors_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "doors_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "flying_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "raise_rocket_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "raise_rocket_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "rocket_result_inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": true
        }
      ],
      "parent": "PT_AssemblingMachine",
      "prototype": "Prototype",
      "name": "PT_RocketSilo",
      "link": "/Prototype/RocketSilo",
      "description": "A <a href=\"/Rocket_silo\" title=\"Rocket silo\">rocket silo</a>."
    },
    {
      "properties": [
        {
          "name": "to_build",
          "description": "This will trigger the achievement, if this entity is placed.",
          "type": "string",
          "optional": false
        },
        {
          "name": "amount",
          "description": "How many entities need to be built.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "limited_to_one_game",
          "description": "If this is false, the player carries over their statistics from this achievement through all their saves.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "until_second",
          "description": "This lets the game know how long into a game, before you can no longer complete the achievement.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_BuildEntityAchievement",
      "link": "/Prototype/BuildEntityAchievement",
      "description": "This Prototype definition is used for receiving an achievement when you build an entity."
    },
    {
      "properties": [
        {
          "name": "alt_selection_color",
          "description": "The color of the rectangle used when alt-selection is done in-game.",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "alt_selection_cursor_box_type",
          "description": "The type of cursor box used to render selection of entities/tiles when alt selecting. Possible values are identical to normal selection_cursor_box_type.",
          "type": "PT_CursorBoxType",
          "optional": false
        },
        {
          "name": "alt_selection_mode",
          "description": "A list of selection mode flags that define how the selection tool alt-selects things in-game. Possible values are identical to normal selection_mode.",
          "type": "PT_SelectionToolSelectionMode",
          "optional": false
        },
        {
          "name": "selection_color",
          "description": "The color of the rectangle used when standard selection is done in-game.",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "selection_cursor_box_type",
          "description": "The type of cursor box used to render selection of entities/tiles when standard selecting.",
          "type": "PT_CursorBoxType",
          "optional": false
        },
        {
          "name": "selection_mode",
          "description": "A list of selection mode flags that define how the selection tool selects things in-game.",
          "type": "PT_SelectionToolSelectionMode",
          "optional": false
        },
        {
          "name": "alt_entity_filter_mode",
          "description": "One of \"whitelist\" and \"blacklist\".",
          "type": "PT_WhitelistBlacklist",
          "default": "whitelist",
          "optional": true
        },
        {
          "name": "alt_entity_filters",
          "description": "Array of <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a> names.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "alt_entity_type_filters",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "alt_selection_count_button_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "alt_tile_filter_mode",
          "description": "One of \"whitelist\" and \"blacklist\".",
          "type": "PT_WhitelistBlacklist",
          "default": "whitelist",
          "optional": true
        },
        {
          "name": "alt_tile_filters",
          "description": "Array of <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a> names.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "always_include_tiles",
          "description": "If tiles should be included in the selection regardless of entities also being in the selection. This is a visual only setting.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "chart_alt_selection_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "chart_reverse_selection_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "chart_selection_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "entity_filter_mode",
          "description": "One of \"whitelist\" and \"blacklist\".",
          "type": "PT_WhitelistBlacklist",
          "default": "whitelist",
          "optional": true
        },
        {
          "name": "entity_filters",
          "description": "Array of <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a> names.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "entity_type_filters",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "mouse_cursor",
          "description": "Name of a <a href=\"/Prototype/MouseCursor\" title=\"Prototype/MouseCursor\">Prototype/MouseCursor</a>.",
          "type": "string",
          "default": "selection-tool-cursor",
          "optional": true
        },
        {
          "name": "reverse_selection_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "reverse_selection_count_button_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "reverse_selection_cursor_box_type",
          "description": "The type of cursor box used to render selection of entities/tiles when reverse-selecting.",
          "type": "PT_CursorBoxType",
          "optional": true
        },
        {
          "name": "reverse_selection_mode",
          "description": "A list of selection mode flags that define how the selection tool reverse-selects things in-game. Possible values are identical to normal selection_mode.",
          "type": "PT_SelectionToolSelectionMode",
          "optional": true
        },
        {
          "name": "selection_count_button_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "tile_filter_mode",
          "description": "One of \"whitelist\" and \"blacklist\".",
          "type": "PT_WhitelistBlacklist",
          "default": "whitelist",
          "optional": true
        },
        {
          "name": "tile_filters",
          "description": "Array of <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a> names.",
          "type": "string[]",
          "optional": true
        }
      ],
      "parent": "PT_ItemWithLabel",
      "prototype": "Prototype",
      "name": "PT_SelectionTool",
      "link": "/Prototype/SelectionTool",
      "description": "Used in the base game as a base for the blueprint item and the deconstruction item."
    },
    {
      "properties": [
        {
          "name": "animation_ticks_per_frame",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "animations",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "chart_name",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Array of 4 CircuitConnectorSpritess. Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Array of 4 WireConnectionPoints. Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "default_train_stopped_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_trains_count_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_trains_limit_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "drawing_boxes",
          "type": "PT_TrainStopDrawingBoxes",
          "optional": true
        },
        {
          "name": "light1",
          "type": "PT_TrainStopLight",
          "optional": true
        },
        {
          "name": "light2",
          "type": "PT_TrainStopLight",
          "optional": true
        },
        {
          "name": "rail_overlay_animations",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "top_animations",
          "type": "PT_Animation4Way",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_TrainStop",
      "link": "/Prototype/TrainStop",
      "description": "A <a href=\"/Train_stop\" title=\"Train stop\">train stop</a>."
    },
    {
      "properties": [
        {
          "name": "cursor_box",
          "type": "PT_UtilitySpritesCursorBox",
          "optional": false
        },
        {
          "name": "clouds",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "arrow_button",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "explosion_chart_visualization",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "refresh_white",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "center",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "check_mark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "check_mark_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "check_mark_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "check_mark_dark_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "not_played_yet_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "not_played_yet_dark_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "played_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "played_dark_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "close_fat",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "close_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "close_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "close_map_preview",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "color_picker",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "change_recipe",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "dropdown",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "downloading",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "downloading_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "downloaded",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "downloaded_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "equipment_grid",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "expand_dots",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "expand_dots_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "export",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "import",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "map",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "map_exchange_string",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "missing_mod_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "not_available",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "play",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "stop",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "preset",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "refresh",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "reset",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "reset_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "shuffle",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "station_name",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "search_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "search_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "sync_mods",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "trash",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "trash_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "copy",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "reassign",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "warning",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "warning_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "list_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "grid_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "reference_point",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "mouse_cursor",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "mod_dependency_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "add",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "clone",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "go_to_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "pause",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "speed_down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "speed_up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "editor_speed_down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "editor_pause",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "editor_play",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "editor_speed_up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tick_once",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tick_sixty",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tick_custom",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "search_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "too_far",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "shoot_cursor_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "shoot_cursor_red",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "electricity_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fuel_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ammo_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fluid_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "warning_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "danger_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "destroyed_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "recharge_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "too_far_from_roboport_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "pump_cannot_connect_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "not_enough_repair_packs_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "not_enough_construction_robots_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "no_building_material_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "no_storage_space_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "electricity_icon_unplugged",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "game_stopped_visualization",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "health_bar_green_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "health_bar_yellow_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "health_bar_red_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ghost_bar_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "bar_gray_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "shield_bar_pip",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "entity_info_dark_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "medium_gui_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "small_gui_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "light_medium",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "light_small",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "light_cone",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "color_effect",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "clock",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "default_ammo_damage_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "default_gun_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "default_turret_attack_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hint_arrow_up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hint_arrow_down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hint_arrow_right",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hint_arrow_left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fluid_indication_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fluid_indication_arrow_both_ways",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "heat_exchange_indication",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "indication_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rail_planner_indication_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rail_planner_indication_arrow_too_far",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rail_path_not_possible",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "indication_line",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "short_indication_line",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "short_indication_line_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_module",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_module_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_armor",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_armor_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_gun",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_gun_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_ammo",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_ammo_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_resource",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_resource_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_fuel",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_fuel_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_result",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_result_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_robot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_robot_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_robot_material",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_robot_material_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_inserter_hand",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot_icon_inserter_hand_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "upgrade_blueprint",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "equipment_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "equipment_collision",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "battery",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "green_circle",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "green_dot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "robot_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "set_bar_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "missing_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "deconstruction_mark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "upgrade_mark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "confirm_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "export_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "import_slot",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "none_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "cable_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tile_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "decorative_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "resource_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "entity_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "item_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "force_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "clone_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "scripting_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "paint_bucket_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "surface_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "time_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "cliff_editor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "brush_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "spray_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "cursor_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "area_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "line_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "variations_tool_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "lua_snippet_tool_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "editor_selection",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "brush_square_shape",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "brush_circle_shape",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "player_force_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "neutral_force_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "enemy_force_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "nature_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "no_nature_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "multiplayer_waiting_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "spawn_flag",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "questionmark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "copper_wire",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "green_wire",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "red_wire",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "green_wire_hightlight",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "red_wire_hightlight",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "wire_shadow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "and_or",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "left_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "right_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "down_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "enter",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_blueprint_library_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_production_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_bonus_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_tutorials_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_train_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_achievements_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_menu_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_map_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_blueprint_library_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_production_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_bonus_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_tutorials_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_train_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_achievements_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_menu_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "side_menu_map_hover_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "circuit_network_panel_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "circuit_network_panel_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "logistic_network_panel_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "logistic_network_panel_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rename_icon_small_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rename_icon_small_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rename_icon_normal",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "achievement_label_locked",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "achievement_label_unlocked_off",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "achievement_label_unlocked",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "achievement_label_failed",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rail_signal_placement_indicator",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "train_stop_placement_indicator",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "placement_indicator_leg",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "grey_rail_signal_placement_indicator",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "grey_placement_indicator_leg",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "logistic_radius_visualization",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "construction_radius_visualization",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "track_button",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_logistics_network_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_electric_network_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_turret_range_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_pollution_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_train_station_names_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_player_names_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_tags_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_worker_robots_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_rail_signal_states_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_recipe_icons_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_logistics_network_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_electric_network_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_turret_range_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_pollution_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_train_station_names_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_player_names_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_tags_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_worker_robots_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_rail_signal_states_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "show_recipe_icons_in_map_view_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "train_stop_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "train_stop_disabled_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "train_stop_full_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "custom_tag_in_map_view",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "covered_chunk",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "white_square",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "white_mask",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "favourite_server_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "crafting_machine_recipe_not_unlocked",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "gps_map_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "custom_tag_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "underground_remove_belts",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "underground_remove_pipes",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "underground_pipe_connection",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ghost_cursor",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tile_ghost_cursor",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "expand",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "expand_dark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "collapse",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "collapse_dark",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "status_working",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "status_not_working",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "status_yellow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "gradient",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "output_console_gradient",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "select_icon_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "select_icon_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "notification",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "alert_arrow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "technology_black",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "technology_white",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "inserter_stack_size_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "inserter_stack_size_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "stack_inserter_capacity_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "stack_inserter_capacity_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "laboratory_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "laboratory_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_logistic_slots_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_logistic_slots_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_logistic_trash_slots_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_logistic_trash_slots_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "maximum_following_robots_count_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "maximum_following_robots_count_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "worker_robot_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "worker_robot_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "worker_robot_storage_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "worker_robot_storage_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "ghost_time_to_live_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ghost_time_to_live_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "turret_attack_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "turret_attack_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "ammo_damage_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ammo_damage_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "give_item_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "give_item_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "gun_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "gun_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "unlock_recipe_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "unlock_recipe_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_crafting_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_crafting_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_mining_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_mining_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_running_speed_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_running_speed_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_build_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_build_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_item_drop_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_item_drop_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_reach_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_reach_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_resource_reach_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_resource_reach_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_item_pickup_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_item_pickup_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_loot_pickup_distance_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_loot_pickup_distance_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_inventory_slots_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_inventory_slots_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "deconstruction_time_to_live_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "deconstruction_time_to_live_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "max_failed_attempts_per_tick_per_construction_queue_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "max_failed_attempts_per_tick_per_construction_queue_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "max_successful_attempts_per_tick_per_construction_queue_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "max_successful_attempts_per_tick_per_construction_queue_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_health_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_health_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "mining_drill_productivity_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "mining_drill_productivity_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "train_braking_force_bonus_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "train_braking_force_bonus_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_ghost_building_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_ghost_building_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_blueprint_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_blueprint_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_deconstruction_planner_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_deconstruction_planner_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_upgrade_planner_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_upgrade_planner_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "zoom_to_world_selection_tool_enabled_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "zoom_to_world_selection_tool_enabled_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "worker_robot_battery_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "worker_robot_battery_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "laboratory_productivity_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "laboratory_productivity_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "follower_robot_lifetime_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "follower_robot_lifetime_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "artillery_range_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "artillery_range_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "nothing_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "nothing_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_additional_mining_categories_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_additional_mining_categories_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "character_logistic_requests_modifier_icon",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "character_logistic_requests_modifier_constant",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_UtilitySprites",
      "link": "/Prototype/UtilitySprites",
      "description": "Sprites used by the game that are not specific to certain prototypes. Only one instance of UtilityConstants can be defined, the base uses <code>\"default\"</code> as the name, so unless the base game definition is completely removed, <code>name</code> will have to be <code>\"default\"</code>."
    },
    {
      "properties": [
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "action_cooldown",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "particle_count",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_distance_scale_factor",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "particle_duration_variation",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "particle_scale_factor",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "particle_spread",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "spread_duration_variation",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "wave_distance",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "wave_speed",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_Smoke",
      "prototype": "Prototype",
      "name": "PT_SmokeWithTrigger",
      "link": "/Prototype/SmokeWithTrigger",
      "description": "An entity with animation and a trigger."
    },
    {
      "properties": [
        {
          "name": "logistic_mode",
          "description": "The way this chest interacts with the logistic network. Valid values are \"passive-provider\", \"active-provider\", \"storage\", \"buffer\" and \"requester\".",
          "type": "string",
          "optional": false
        },
        {
          "name": "animation",
          "description": "Drawn when a robot brings/takes items from this container.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "animation_sound",
          "description": "Played when a robot brings/takes items from this container. Ignored if <code>animation</code> is not defined.",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "landing_location_offset",
          "description": "The offset from the center of this container where a robot visually brings/takes items.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "max_logistic_slots",
          "description": "The number of request slots this logistics container has. Requester-type containers must have > 0 slots and can have a maximum of 1000 slots. Storage-type containers must have <= 1 slot.",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "opened_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "render_not_in_network_icon",
          "description": "Whether the Too-far-from-roboport-icon.png icon should be rendered on this entity if the entity is not within a logistics network.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Container",
      "prototype": "Prototype",
      "name": "PT_LogisticContainer",
      "link": "/Prototype/LogisticContainer",
      "description": "A generic container, such as a chest, that interacts with the logistics network."
    },
    {
      "properties": [
        {
          "name": "connection_sprites",
          "type": "PT_ConnectableEntityGraphics",
          "optional": false
        },
        {
          "name": "heat_buffer",
          "type": "PT_HeatBuffer",
          "optional": false
        },
        {
          "name": "heat_glow_sprites",
          "type": "PT_ConnectableEntityGraphics",
          "optional": false
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_HeatPipe",
      "link": "/Prototype/HeatPipe",
      "description": "A <a href=\"/Heat_pipe\" title=\"Heat pipe\">heat pipe</a>."
    },
    {
      "properties": [
        {
          "name": "animation",
          "description": "Plays when the generator is active. Idle animation must have the same frame count as animation.",
          "type": "PT_Animation4Way",
          "optional": false
        },
        {
          "name": "burner",
          "description": "The input energy source of the generator. Must be a burner energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "The output energy source of the generator. Any emissions specified on this energy source are ignored, they must be specified on <code>burner</code>. Must be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "max_power_output",
          "description": "How much energy this generator can produce.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "always_draw_idle_animation",
          "description": "Whether the <code>idle_animation</code> should also play when the generator is active.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "idle_animation",
          "description": "Plays when the generator is inactive. Idle animation must have the same frame count as animation.",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "min_perceived_performance",
          "description": "Animation runs at least this fast.",
          "type": "PT_double",
          "default": "0.25",
          "optional": true
        },
        {
          "name": "performance_to_sound_speedup",
          "type": "PT_double",
          "default": "0.5",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_BurnerGenerator",
      "link": "/Prototype/BurnerGenerator",
      "description": "An entity that produces power from a burner energy source."
    },
    {
      "properties": [
        {
          "name": "bending_type",
          "description": "Either \"straight\" or \"turn\".",
          "type": "PT_RailRemnantsBendingType",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_RailRemnantsPictures",
          "optional": false
        }
      ],
      "parent": "PT_Corpse",
      "prototype": "Prototype",
      "name": "PT_RailRemnants",
      "link": "/Prototype/RailRemnants",
      "description": "Used for rail corpses."
    },
    {
      "properties": [
        {
          "name": "crafting_categories",
          "description": "A list of recipe categories this crafting machine can use.",
          "type": "strings[]",
          "optional": false
        },
        {
          "name": "crafting_speed",
          "description": "<p>How fast this crafting machine can craft. 1 means that for example a 1 second long recipe take 1 second to craft. 0.5 means it takes 2 seconds, and 2 means it takes 0.5 seconds.</p><p>Crafting speed has to be positive.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "<p>Defines how the crafting machine is powered.</p><p>When using an electric energy source and <code>drain</code> is not specified, it will be set to <code>energy_usage ÷ 30</code> automatically.</p>",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "Sets how much energy this machine uses while crafting. Energy usage has to be positive.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "allowed_effects",
          "description": "Sets the module effects that are allowed to be used on this machine.",
          "type": "PT_EffectTypeLimitation",
          "optional": true
        },
        {
          "name": "always_draw_idle_animation",
          "description": "Only loaded if <code>idle_animation</code> is present.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "animation",
          "description": "<p>The animation played when crafting. When the crafting machine is idle, the animation will be paused.</p><p>When a crafting machine cannot be rotated, only the north rotation of the animation will be used.</p>",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "base_productivity",
          "description": "Productivity bonus that this machine always has.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "default_recipe_tint",
          "description": "Each key/value pair is optional and defaults to the above value.",
          "type": "PT_TintColors",
          "optional": true
        },
        {
          "name": "draw_entity_info_icon_background",
          "description": "Whether the \"alt-mode icon\" should have a black background.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "entity_info_icon_shift",
          "description": "Shift of the \"alt-mode icon\" relative to the machine's center.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "fluid_boxes",
          "description": "<p>Can have off_when_no_fluid_recipe key that has a <a href=\"/Types/bool\" title=\"Types/bool\">bool</a> value. off_when_no_fluid_recipe defaults to false. off_when_no_fluid_recipe is ignored by <a href=\"/Prototype/Furnace\" title=\"Prototype/Furnace\">Prototype/Furnaces</a> and considered to always be false.</p><p>If a crafting machine has fluid boxes and off_when_no_fluid_recipe is true, the crafting machine can only be rotated when a recipe consuming or producing fluid is set, or it has one of the other properties listed at the top of the page.</p>",
          "type": "PT_FluidBox[]",
          "optional": true
        },
        {
          "name": "idle_animation",
          "description": "<p>Idle animation must have the same frame count as animation. It is used for drawing the machine in idle state, but the is animation frozen on a single frame when the machine is idle.</p><p>This is an animation and not just sprite to make it possible for idle state and working state to match their visuals when the machine switches from one state to another.</p><p>When a crafting machine cannot be rotated, only the north rotation of the idle animation will be used.</p>",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "match_animation_speed_to_activity",
          "description": "Whether the speed of the animation and working visualization should be based on the machine's speed (boosted or slowed by modules).",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "module_specification",
          "description": "The number of module slots in this machine, and their icon positions.",
          "type": "PT_ModuleSpecification",
          "optional": true
        },
        {
          "name": "return_ingredients_on_change",
          "description": "Controls whether the ingredients of an in-progress recipe are destroyed when mining the machine/changing the recipe. If set to true, the ingredients do not get destroyed. This affects only the ingredients of the recipe that is currently in progress, so those that visually have already been consumed while their resulting product has not yet been produced.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "scale_entity_info_icon",
          "description": "Whether the \"alt-mode icon\" should be scaled to the size of the machine.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "shift_animation_transition_duration",
          "description": "Only loaded if <code>shift_animation_waypoints</code> is present.",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "shift_animation_waypoint_stop_duration",
          "description": "Only loaded if <code>shift_animation_waypoints</code> is present.",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "shift_animation_waypoints",
          "description": "Only loaded if one of <code>shift_animation_waypoint_stop_duration</code> or <code>shift_animation_transition_duration</code> is not 0.",
          "type": "PT_CraftingMachineShiftAnimationWaypoints",
          "optional": true
        },
        {
          "name": "show_recipe_icon",
          "description": "Whether the \"alt-mode icon\" should be drawn at all.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "show_recipe_icon_on_map",
          "description": " Whether the recipe icon should be shown on the map. ",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "status_colors",
          "type": "PT_CraftingMachineStatusColors",
          "optional": true
        },
        {
          "name": "working_visualisations",
          "type": "PT_WorkingVisualisation[]",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_CraftingMachine",
      "link": "/Prototype/CraftingMachine",
      "description": "<p>The abstract basis of the assembling machines and furnaces. Contains the properties that both of them have.</p><p>Note that a crafting machine cannot be rotated unless it has at least one of the following: a fluid box, a heat energy source, a fluid energy source, or a non-square collision box. Crafting machines with non-square collision boxes can only be rotated before placement, not after.</p>"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of the animation. Must be unique. Used in <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/LuaRendering.html#LuaRendering.draw_animation\">https://lua-api.factorio.com/latest/LuaRendering.html#LuaRendering.draw_animation</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "animation_speed",
          "description": "Modifier of the animation playing speed, the default is 1, which means one animation frame per tick (60 fps). The speed of playing can often vary depending on the usage (output of steam engine for example). Has to be greater than 0.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "filename",
          "description": "Mandatory if <code>stripes</code> is not specified.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "frame_count",
          "description": "Can't be 0.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "frame_sequence",
          "type": "PT_AnimationFrameSequence",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the Animation.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "layers",
          "description": "<p>If this property is present, all Animation definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (Animation definition) in the array may also have the layers property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_AnimationType[]",
          "optional": true
        },
        {
          "name": "line_length",
          "description": "Once the specified number of pictures is loaded, other pictures are loaded on other line. This is to allow having longer animations in matrix, to avoid pictures with too big width. The game engine limits the width of any input picture to 2048px, so it is compatible with most graphics cards.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "max_advance",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").<br>Note: mipmap_count doesn't make sense in animation, as it is not possible to layout mipmaps in a way, that would load correctly both the animation and the mipmaps (besides animations with just one frame).<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=549058#p549058\">[2]</a>",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "repeat_count",
          "description": "Can't be 0.",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "run_mode",
          "type": "PT_AnimationRunMode",
          "default": "forward",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the animation on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "shift",
          "type": "PT_vector",
          "default": "{0, 0}",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the one frame. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "stripes",
          "type": "PT_Stripe[]",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "prototype": "Prototype",
      "name": "PT_Animation",
      "link": "/Prototype/Animation",
      "description": "Specifies a animation that can be used by <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/LuaRendering.html#LuaRendering.draw_animation\">https://lua-api.factorio.com/latest/LuaRendering.html#LuaRendering.draw_animation</a> during runtime."
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "description": "Requires ammo_type in attack_parameters.",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "call_for_help_radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "folded_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": false
        },
        {
          "name": "alert_when_attacking",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_turning_when_starting_attack",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "attack_from_start_frame",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "attack_target_mask",
          "type": "PT_TriggerTargetMask",
          "optional": true
        },
        {
          "name": "attacking_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "attacking_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "base_picture",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "base_picture_render_layer",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": true
        },
        {
          "name": "base_picture_secondary_draw_order",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "corpse",
          "description": "The name of an entity. Note that this overrides how EntityWithHealth loads the corpse, forcing it to be a string instead of an array of strings.",
          "type": "string",
          "optional": true
        },
        {
          "name": "dying_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "ending_attack_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "ending_attack_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "energy_glow_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "folded_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "folded_speed_secondary",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "folding_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "folding_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "folding_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "glow_light_intensity",
          "description": "The intensity of light in the form of <code>energy_glow_animation</code> drawn on top of <code>energy_glow_animation</code>.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "gun_animation_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "gun_animation_secondary_draw_order",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "ignore_target_mask",
          "type": "PT_TriggerTargetMask",
          "optional": true
        },
        {
          "name": "integration",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "prepare_range",
          "description": "Default: The range defined in the <code>attack_parameters</code>",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "prepared_alternative_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "prepared_alternative_chance",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "prepared_alternative_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "prepared_alternative_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "prepared_alternative_speed_secondary",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "prepared_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "prepared_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "prepared_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "prepared_speed_secondary",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "preparing_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "preparing_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "preparing_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "rotation_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "secondary_animation",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "shoot_in_prepare_state",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "starting_attack_animation",
          "type": "PT_RotatedAnimation4Way",
          "optional": true
        },
        {
          "name": "starting_attack_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "starting_attack_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "turret_base_has_direction",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Turret",
      "link": "/Prototype/Turret",
      "description": "A turret that needs no extra ammunition. See the extensions for turrets that need some kind of ammunition."
    },
    {
      "properties": [
        {
          "name": "entity_filter_count",
          "description": " Can't be > 255.",
          "type": "PT_ItemStackIndex",
          "default": "0",
          "optional": true
        },
        {
          "name": "tile_filter_count",
          "description": " Can't be > 255.",
          "type": "PT_ItemStackIndex",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_SelectionTool",
      "prototype": "Prototype",
      "name": "PT_DeconstructionItem",
      "link": "/Prototype/DeconstructionItem",
      "description": "A <a href=\"/Deconstruction_planner\" title=\"Deconstruction planner\">deconstruction planner</a>."
    },
    {
      "properties": [
        {
          "name": "distribution_effectivity",
          "description": "The multiplier of the module's effects, when shared between neighbors.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "Must be an electric or void energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "module_specification",
          "description": "The number of module slots in this beacon, and their icon positions.",
          "type": "PT_ModuleSpecification",
          "optional": false
        },
        {
          "name": "supply_area_distance",
          "description": "The maximum distance that this Beacon can supply it's neighbors with it's module's effects. Max distance is 64.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "allowed_effects",
          "description": "The types of modules that a player can place inside of the Beacon.",
          "type": "PT_EffectTypeLimitation",
          "optional": true
        },
        {
          "name": "animation",
          "description": "The animation for the beacon, when in use. Loaded only if <code>graphics_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "base_picture",
          "description": "The picture of the beacon when it is not on. Loaded only if <code>graphics_set</code> is not present.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "graphics_set",
          "description": "The graphics for the beacon.",
          "type": "PT_BeaconGraphicsSet",
          "optional": true
        },
        {
          "name": "radius_visualisation_picture",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Beacon",
      "link": "/Prototype/Beacon",
      "description": "Entity with the ability to transfer module's effects to its neighboring entities."
    },
    {
      "properties": [
        {
          "name": "fluid",
          "description": "The name of the fluid that is produced by the pump.",
          "type": "string",
          "optional": false
        },
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "pumping_speed",
          "description": "How many units of fluid are produced per tick. Must be > 0.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "adjacent_tile_collision_box",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "adjacent_tile_collision_mask",
          "description": "Tiles colliding with adjacent_tile_collision_box must NOT collide with this collision mask.",
          "type": "PT_CollisionMask",
          "default": "none",
          "optional": true
        },
        {
          "name": "adjacent_tile_collision_test",
          "description": "Tiles colliding with adjacent_tile_collision_box must collide with this collision mask (unless it's empty).",
          "type": "PT_CollisionMask",
          "default": "water-tile",
          "optional": true
        },
        {
          "name": "always_draw_fluid",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "center_collision_mask",
          "description": "Tile at placement position must NOT collide with this collision mask.",
          "type": "PT_CollisionMask",
          "default": "none",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "fluid_box_tile_collision_test",
          "type": "PT_CollisionMask",
          "default": "ground-tile",
          "optional": true
        },
        {
          "name": "graphics_set",
          "description": "Mandatory if <code>picture</code> is not defined.",
          "type": "PT_OffshorePumpGraphicsSet",
          "optional": true
        },
        {
          "name": "min_perceived_performance",
          "description": "Animation runs at least this fast.",
          "type": "PT_float",
          "default": "0.25",
          "optional": true
        },
        {
          "name": "picture",
          "description": "Deprecated, use <code>graphics_set</code> instead. Ignored if <code>graphics_set</code> is defined.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "placeable_position_visualization",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "remove_on_tile_collision",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_OffshorePump",
      "link": "/Prototype/OffshorePump",
      "description": "An <a href=\"/Offshore_pump\" title=\"Offshore pump\">offshore pump</a>."
    },
    {
      "properties": [
        {
          "name": "charge_cooldown",
          "description": "Count of ticks to preserve the animation even when the charging ends. Used to prevent rapid blinking of the accumulator with unstable need to use it.",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "discharge_cooldown",
          "description": "How long (in ticks) the animation will last after discharge has been initialized.",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "The capacity of the energy source buffer specifies the capacity of the accumulator. Must be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "charge_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "charge_light",
          "description": "Note that some kind of charge_animation must also be defined for the light to appear.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "The pictures displayed for circuit connections to this accumulator.",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "description": "Defines how wires visually connect to this accumulator.",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "default_output_signal",
          "description": "The name of the signal that is the default for when an accumulator is connected to the circuit network.",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "discharge_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "discharge_light",
          "description": "Note that some kind of charge_animation must also be defined for the light to appear.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Accumulator",
      "link": "/Prototype/Accumulator",
      "description": "Entity with energy source with specialised animation for charging/decharging."
    },
    {
      "properties": [
        {
          "name": "category",
          "description": "Controls in what tab the autoplace is shown in the map generator GUI.",
          "type": "PT_AutoplaceControlCategory",
          "optional": false
        },
        {
          "name": "richness",
          "description": "<p>Sets whether this control's richness can be set by the player or not.</p><p>If your autoplace control is used to generate ores, you probably want this to be true.</p>",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_AutoplaceControl",
      "link": "/Prototype/AutoplaceControl",
      "description": "A setting in the map creation GUI. Used by the <a href=\"/Types/AutoplaceSpecification#control\" title=\"Types/AutoplaceSpecification\">autoplace system</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "cuts",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_SelectionTool",
      "prototype": "Prototype",
      "name": "PT_CopyPasteTool",
      "link": "/Prototype/CopyPasteTool",
      "description": "A copy-paste or cut-paste tool."
    },
    {
      "properties": [
        {
          "name": "energy_consumption",
          "description": "The continuous power consumption of the belt immunity equipment.",
          "type": "PT_Energy",
          "optional": false
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_BeltImmunityEquipment",
      "link": "/Prototype/BeltImmunityEquipment",
      "description": "Used by <a href=\"/Belt_immunity_equipment\" title=\"Belt immunity equipment\">belt immunity equipment</a>."
    },
    {
      "properties": [
        {
          "name": "animations",
          "type": "PT_CharacterArmorAnimation[]",
          "optional": false
        },
        {
          "name": "build_distance",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "damage_hit_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "distance_per_frame",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "drop_item_distance",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "eat",
          "description": "The sound file played when the character eats (fish for example).",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "heartbeat",
          "description": "The sound file played when the character's health is low.",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "item_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "loot_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "maximum_corner_sliding_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "mining_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "mining_with_tool_particles_animation_positions",
          "description": "List of positions in the mining with tool animation when the mining sound and mining particles are created.",
          "type": "PT_float[]",
          "optional": false
        },
        {
          "name": "reach_distance",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "reach_resource_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "running_sound_animation_positions",
          "description": "List of positions in the running animation when the walking sound is played.",
          "type": "PT_float[]",
          "optional": false
        },
        {
          "name": "running_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "ticks_to_keep_aiming_direction",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "ticks_to_keep_gun",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "ticks_to_stay_in_combat",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "character_corpse",
          "description": "Name of the character corpse that is spawned when this character dies.",
          "type": "string",
          "optional": true
        },
        {
          "name": "crafting_categories",
          "description": "Names of the crafting categories the character can craft recipes from. The built-in categories can be found <a href=\"/Data.raw#recipe-category\" title=\"Data.raw\">here</a>. See also <a href=\"/Prototype/RecipeCategory\" title=\"Prototype/RecipeCategory\">Prototype/RecipeCategory</a>.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "enter_vehicle_distance",
          "description": "Must be >= 0.",
          "type": "PT_double",
          "default": "3.0",
          "optional": true
        },
        {
          "name": "footprint_particles",
          "description": "Array of footprint particles. Triggered when the running animation (#animations) rolls over the frames defined in <code>right_footprint_frames</code> and <code>left_footprint_frames</code>.",
          "type": "PT_FootprintParticle[]",
          "optional": true
        },
        {
          "name": "footstep_particle_triggers",
          "description": "Triggered every tick of the running animation.",
          "type": "PT_FootstepTriggerEffectList",
          "optional": true
        },
        {
          "name": "has_belt_immunity",
          "description": "Whether this character is moved by belts when standing on them.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "left_footprint_frames",
          "description": "An array of float. The frames in the running animation (#animations) where the left foot touches the ground.",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "left_footprint_offset",
          "description": "Offset from the center of the entity for the left footprint. Used by <code>footprint_particles</code>.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "mining_categories",
          "description": "Names of the resource categories the character can mine resources from.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "respawn_time",
          "description": "Time in seconds. Must be positive",
          "type": "PT_uint32",
          "default": "10",
          "optional": true
        },
        {
          "name": "right_footprint_frames",
          "description": "An array of float. The frames in the running animation (#animations) where the right foot touches the ground.",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "right_footprint_offset",
          "description": "Offset from the center of the entity for the right footprint. Used by <code>footprint_particles</code>.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "synced_footstep_particle_triggers",
          "description": "Triggered when the running animation (#animations) rolls over the frames defined in <code>right_footprint_frames</code> and <code>left_footprint_frames</code>.",
          "type": "PT_FootstepTriggerEffectList",
          "optional": true
        },
        {
          "name": "tool_attack_distance",
          "type": "PT_double",
          "default": "1.5",
          "optional": true
        },
        {
          "name": "tool_attack_result",
          "type": "PT_Trigger",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Character",
      "link": "/Prototype/Character",
      "description": "Entity that you move around on the screen during the campaign and freeplay."
    },
    {
      "properties": [
        {
          "name": "erase_contents_when_mined",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "gui_mode",
          "description": "Controls which players can control what the chest spawns.",
          "type": "PT_GuiMode",
          "default": "all",
          "optional": true
        }
      ],
      "parent": "PT_LogisticContainer",
      "prototype": "Prototype",
      "name": "PT_InfinityContainer",
      "link": "/Prototype/InfinityContainer",
      "description": "A generic container, such as a chest, that can spawn or void items and interact with the logistics network."
    },
    {
      "properties": [
        {
          "name": "effects_fade_in_end_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "effects_fade_in_start_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "engine_starting_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "flying_acceleration",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "flying_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "full_render_layer_switch_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "rising_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "rocket_flame_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_flame_left_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_flame_left_rotation",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "rocket_flame_right_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_flame_right_rotation",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "rocket_glare_overlay_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rocket_launch_offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "rocket_render_layer_switch_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "rocket_rise_offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "rocket_shadow_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rocket_smoke_bottom1_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_smoke_bottom2_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_smoke_top1_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_smoke_top2_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_smoke_top3_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "rocket_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rocket_visible_distance_from_center",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "shadow_fade_out_end_ratio",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "shadow_fade_out_start_ratio",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "shadow_slave_entity",
          "description": "Name of an entity.",
          "type": "string",
          "optional": false
        },
        {
          "name": "dying_explosion",
          "description": "Name of an entity.",
          "type": "string",
          "optional": true
        },
        {
          "name": "flying_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "glow_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "rocket_initial_offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_RocketSiloRocket",
      "link": "/Prototype/RocketSiloRocket",
      "description": "The rocket inside the rocket silo."
    },
    {
      "properties": [
        {
          "name": "bending_type",
          "description": "Must be \"turn\".",
          "type": "string",
          "default": "turn",
          "optional": true
        }
      ],
      "parent": "PT_Rail",
      "prototype": "Prototype",
      "name": "PT_CurvedRail",
      "link": "/Prototype/CurvedRail",
      "description": "A curved rail."
    },
    {
      "properties": [
        {
          "name": "large_build_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "medium_build_sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_EntityGhost",
      "link": "/Prototype/EntityGhost",
      "description": "The entity used for ghosts of entities. In-game, the inner entity (the entity this is a ghost of) is rendered with a <a href=\"/Prototype/UtilityConstants#ghost_tint\" title=\"Prototype/UtilityConstants\">ghost_tint</a>."
    },
    {
      "properties": [
        {
          "name": "group",
          "description": "Name of a <a href=\"/Prototype/ItemGroup\" title=\"Prototype/ItemGroup\">Prototype/ItemGroup</a>. The item group this subgroup is located in.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_ItemSubGroup",
      "link": "/Prototype/ItemSubGroup",
      "description": "An item subgroup. The built-in subgroups can be found <a href=\"/Data.raw#item-subgroup\" title=\"Data.raw\">here</a>. See <a href=\"/Prototype/Item#subgroup\" title=\"Prototype/Item\">Prototype/Item#subgroup</a>."
    },
    {
      "properties": [
        {
          "name": "inventory_size",
          "description": "The inventory size of the item.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "extends_inventory_by_default",
          "description": "When true, this item-with-inventory will extend the inventory it sits in by default. This is a runtime property on the result item that can be changed through the Lua interface and only determines the initial value.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "filter_message_key",
          "description": "The locale key used when the player attempts to put an item that doesn't match the filter rules into the item-with-inventory.",
          "type": "string",
          "default": "item-limitation.item-not-allowed-in-this-container-item",
          "optional": true
        },
        {
          "name": "filter_mode",
          "description": "This determines how filters are applied. If no filters are defined this is automatically set to \"none\".",
          "type": "PT_WhitelistBlacklist",
          "default": "whitelist",
          "optional": true
        },
        {
          "name": "insertion_priority_mode",
          "description": "The insertion priority mode for this item. This determines if items are first attempted to be put into this items inventory if the item extends the inventory it sits in when items are put into the parent inventory.",
          "type": "PT_ItemWithInventoryInsertionPriorityMode",
          "default": "default",
          "optional": true
        },
        {
          "name": "item_filters",
          "description": "A list of explicit item names to be used as filters.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "item_group_filters",
          "description": "A list of explicit item group names to be used as filters.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "item_subgroup_filters",
          "description": "A list of explicit item subgroup names to be used as filters.",
          "type": "string[]",
          "optional": true
        }
      ],
      "parent": "PT_ItemWithLabel",
      "prototype": "Prototype",
      "name": "PT_ItemWithInventory",
      "link": "/Prototype/ItemWithInventory",
      "description": "The inventory allows setting player defined filters similar to the quickbar and cargo wagon inventories."
    },
    {
      "properties": [
        {
          "name": "and_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "divide_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "left_shift_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "minus_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "modulo_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "multiply_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "or_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "plus_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "power_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "right_shift_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "xor_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        }
      ],
      "parent": "PT_Combinator",
      "prototype": "Prototype",
      "name": "PT_ArithmeticCombinator",
      "link": "/Prototype/ArithmeticCombinator",
      "description": "An <a href=\"/Arithmetic_combinator\" title=\"Arithmetic combinator\">arithmetic combinator</a>."
    },
    {
      "properties": [
        {
          "name": "grid_offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "grid_size",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "orientations",
          "type": "PT_CliffOrientations",
          "optional": false
        },
        {
          "name": "cliff_explosive",
          "description": "Name of a capsule that has a robot_action to explode cliffs.",
          "type": "string",
          "optional": true
        },
        {
          "name": "cliff_height",
          "type": "PT_float",
          "default": "4",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Cliff",
      "link": "/Prototype/Cliff",
      "description": "A <a href=\"/Cliff\" title=\"Cliff\">cliff</a>."
    },
    {
      "properties": [
        {
          "name": "category",
          "description": "Optional. The category of this recipe. The built-in categories can be found <a href=\"/Data.raw#recipe-category\" title=\"Data.raw\">here</a>. See also <a href=\"/Prototype/RecipeCategory\" title=\"Prototype/RecipeCategory\">Prototype/RecipeCategory</a>.",
          "type": "string",
          "default": "crafting",
          "optional": true
        },
        {
          "name": "crafting_machine_tint",
          "description": "Used by crafting machine <code><a href=\"/Prototype/CraftingMachine#working_visualisations\" title=\"Prototype/CraftingMachine\">working_visualisations</a></code> to tint certain layers with the recipe color. <a href=\"/Types/WorkingVisualisation#apply_recipe_tint\" title=\"Types/WorkingVisualisation\">apply_recipe_tint</a> on the working visualisation determines which of the 4 colors is used for that layer (if any).",
          "type": "PT_TintColors",
          "optional": true
        },
        {
          "name": "expensive",
          "type": "PT_RecipeData|PT_bool",
          "optional": true
        },
        {
          "name": "normal",
          "type": "PT_RecipeData|PT_bool",
          "optional": true
        },
        {
          "name": "subgroup",
          "description": "The subgroup of this recipe. If not specified, defaults to the subgroup of the product if there is only 1, or main_product if multiple products exist. If multiple products exist and no main_product is specified, the subgroup is required.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification:PT_RecipeData",
      "prototype": "Prototype",
      "name": "PT_Recipe",
      "link": "/Prototype/Recipe",
      "description": "A recipe. It can be a crafting recipe, a smelting recipe, or a custom type of recipe (see Prototype/RecipeCategory)."
    },
    {
      "properties": [
        {
          "name": "scenario",
          "description": "Name of the folder for this tutorial in the tutorials folder.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_Tutorial",
      "link": "/Prototype/Tutorial",
      "description": "The definition of the tutorial to be used in the tips and tricks, see <a href=\"/Prototype/TipsAndTricksItem\" title=\"Prototype/TipsAndTricksItem\">Prototype/TipsAndTricksItem</a>. The actual tutorial code is defined in the tutorials folder, in the folder that has the name of the scenario property."
    },
    {
      "properties": [
        {
          "name": "mapper_count",
          "description": "Can't be > 255.",
          "type": "PT_ItemStackIndex",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_SelectionTool",
      "prototype": "Prototype",
      "name": "PT_UpgradeItem",
      "link": "/Prototype/UpgradeItem",
      "description": "A <a href=\"/Upgrade_planner\" title=\"Upgrade planner\">upgrade planner</a>."
    },
    {
      "properties": [
        {
          "name": "allowed_without_fight",
          "description": "If this is set to false, it is not possible to complete the achievement on the peaceful difficulty setting or when the enemy base generation settings have been changed.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "hidden",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "steam_stats_name",
          "description": "Unusable by mods, as this refers to unlocking the achievement through Steam.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_Achievement",
      "link": "/Prototype/Achievement",
      "description": "This prototype definition is used for the in-game achievements."
    },
    {
      "properties": [
        {
          "name": "activation_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "close_sound",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "horizontal_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "horizontal_rail_animation_left",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "horizontal_rail_animation_right",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "horizontal_rail_base",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "open_sound",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "opening_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "timeout_to_close",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "vertical_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "vertical_rail_animation_left",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "vertical_rail_animation_right",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "vertical_rail_base",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "wall_patch",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "fadeout_interval",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "opened_collision_mask",
          "description": "This collision mask is used when the gate is open.",
          "type": "PT_CollisionMask",
          "default": "{\"object-layer\", \"item-layer\", \"floor-layer\", \"water-tile\"}",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Gate",
      "link": "/Prototype/Gate",
      "description": "A <a href=\"/Gate\" title=\"Gate\">gate</a>."
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "idle",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "in_motion",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "shadow_idle",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "shadow_in_motion",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "time_to_live",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "destroy_action",
          "description": "Applied when the combat robot expires (runs out of time_to_live).",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "follows_player",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "friction",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "range_from_player",
          "type": "PT_double",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_FlyingRobot",
      "prototype": "Prototype",
      "name": "PT_CombatRobot",
      "link": "/Prototype/CombatRobot",
      "description": "A combat robot. Can attack enemies."
    },
    {
      "properties": [
        {
          "name": "default_label_color",
          "description": "The default label color the item will use.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "draw_label_for_cursor_render",
          "description": "If the item will draw its label when held in the cursor in place of the item count.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_ItemWithLabel",
      "link": "/Prototype/ItemWithLabel",
      "description": "Like a normal item but with the ability to have a colored label."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_EquipmentCategory",
      "link": "/Prototype/EquipmentCategory",
      "description": "Defines a category to be available to <a href=\"/Prototype/Equipment\" title=\"Prototype/Equipment\">Prototype/Equipment</a> and <a href=\"/Prototype/EquipmentGrid\" title=\"Prototype/EquipmentGrid\">Prototype/EquipmentGrid</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_TileGhost",
      "link": "/Prototype/TileGhost",
      "description": "The entity used for tile ghosts."
    },
    {
      "properties": [
        {
          "name": "adjust_speed_based_off_zoom",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "enable_flash_light",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "fill_built_entity_energy_buffers",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "generate_neighbor_chunks",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "gun_inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "instant_blueprint_building",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "instant_deconstruction",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "instant_rail_planner",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "instant_upgrading",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "item_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "loot_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "mining_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "movement_speed",
          "description": "Must be >= 0.34375.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the editor-controller. Must be \"default\" since only one instances of this prototype can be defined.",
          "type": "string",
          "default": "default",
          "optional": false
        },
        {
          "name": "placed_corpses_never_expire",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "render_as_day",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_additional_entity_info_gui",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_character_tab_in_controller_gui",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_entity_health_bars",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_entity_tags",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_hidden_entities",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_infinity_filters_in_controller_gui",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "show_status_icons",
          "type": "PT_bool",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_EditorController",
      "link": "/Prototype/EditorController",
      "description": "Properties of the editor controller."
    },
    {
      "properties": [
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "use_target_entity_alert_icon_shift",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ItemRequestProxy",
      "link": "/Prototype/ItemRequestProxy",
      "description": "Entity used to signify that an entity is requesting items, for example modules for an assembling machine after it was blueprinted with modules inside."
    },
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "duration",
          "description": "Can't be 0 - the smoke will never render.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "affected_by_wind",
          "description": "Smoke always moves randomly unless <code>movement_slow_down_factor</code> is 0. If <code>affected_by_wind</code> is true, the smoke will also be moved by wind.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "cyclic",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "end_scale",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fade_away_duration",
          "description": "<code>fade_in_duration</code> + <code>fade_away_duration</code> must be &lt;= <code>duration</code>.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "fade_in_duration",
          "description": "<code>fade_in_duration</code> + <code>fade_away_duration</code> must be &lt;= <code>duration</code>.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "glow_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "glow_fade_away_duration",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "movement_slow_down_factor",
          "description": "Value between 0 and 1, with 1 being no slowdown and 0 being no movement.",
          "type": "PT_double",
          "default": "0.995",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "smoke",
          "optional": true
        },
        {
          "name": "show_when_smoke_off",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spread_duration",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "start_scale",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_TrivialSmoke",
      "link": "/Prototype/TrivialSmoke",
      "description": "Smoke, but it's not an entity for optimization purposes. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "fixed_recipe",
          "description": "The preset recipe of this machine. This machine does not show a recipe selection if this is set. The base game uses this for the <a href=\"/Rocket_silo\" title=\"Rocket silo\">rocket silo</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "gui_title_key",
          "description": "The locale key of the title of the GUI that is shown when the player opens the assembling machine. May not be longer than 200 characters.",
          "type": "string",
          "optional": true
        },
        {
          "name": "ingredient_count",
          "description": "<p>Sets the maximum number of ingredients this machine can craft with. Any recipe with more ingredients than this will be unavailable in this machine.</p><p>This only counts item ingredients, not fluid ingredients! This means if ingredient count is 2, and the recipe has 2 item ingredients and 1 fluid ingredient, it can still be crafted in the machine.</p>",
          "type": "PT_uint8",
          "default": "255",
          "optional": true
        }
      ],
      "parent": "PT_CraftingMachine",
      "prototype": "Prototype",
      "name": "PT_AssemblingMachine",
      "link": "/Prototype/AssemblingMachine",
      "description": "An assembling machine - like the assembling machines 1/2/3 in the game, but you can use your own recipe categories."
    },
    {
      "properties": [
        {
          "name": "charge_approach_distance",
          "description": "Presumably, the distance from the roboport at which robots will wait to charge.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "charging_energy",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "construction_radius",
          "description": "Can't be negative.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "recharging_animation",
          "description": "The animation played at each charging point when a robot is charging there.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "spawn_and_station_height",
          "description": "Presumably states the height of the charging stations and thus an additive offset for the charging_offsets.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "burner",
          "description": "Must be a burner energy source. Add this is if the roboport should be fueled directly instead of using power from the equipment grid.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "charging_distance",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "charging_offsets",
          "description": "The offsets from the centre of the roboport at which robots will charge.",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "charging_station_count",
          "type": "PT_uint32",
          "description": "How many charging points this roboport has. If this is 0, the length of the charging_offsets table is used to calculate the charging station count.",
          "default": "0",
          "optional": true
        },
        {
          "name": "charging_station_shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "charging_threshold_distance",
          "description": "Distance in tiles. This defines how far away a robot can be from the charging spot and still be charged, however the bot is still required to reach a charging spot in the first place.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "draw_construction_radius_visualization",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_logistic_radius_visualization",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "power",
          "description": "Mandatory if <code>burner</code> is present. The size of the buffer of the burner energy source, so effectively the amount of power that the energy source can produce per tick.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "recharging_light",
          "description": "The light emitted when charging a robot.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "robot_limit",
          "description": "How many robots can exist in the network (cumulative).",
          "type": "PT_ItemCountType",
          "optional": true
        },
        {
          "name": "robot_vertical_acceleration",
          "type": "PT_float",
          "default": "0.01",
          "optional": true
        },
        {
          "name": "robots_shrink_when_entering_and_exiting",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spawn_and_station_shadow_height_offset",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "spawn_minimum",
          "description": "Minimum amount of energy that needs to available inside the roboport's buffer so that robots can be spawned.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "stationing_offset",
          "description": "The offset from the centre of the roboport at which robots will enter and exit.",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_RoboportEquipment",
      "link": "/Prototype/RoboportEquipment",
      "description": "Used by <a href=\"/Personal_roboport\" title=\"Personal roboport\">personal roboport</a>."
    },
    {
      "properties": [
        {
          "name": "acceleration",
          "description": "Must be != 0 if turning_speed_increases_exponentially_with_projectile_speed is true.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "action",
          "description": "Executed when the projectile hits something.",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "direction_only",
          "description": "Setting this to true can be used to disable projectile homing behaviour.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "enable_drawing_with_mask",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "final_action",
          "description": "Executed when the projectile hits something, after <code>action</code> and only if the entity that was hit was destroyed. The projectile is destroyed right after the final_action.",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "force_condition",
          "type": "PT_ForceCondition",
          "default": "all",
          "optional": true
        },
        {
          "name": "height",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "hit_at_collision_position",
          "description": "When true the entity is hit at the position on its collision box the projectile first collides with. When false the entity is hit at its own position.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "hit_collision_mask",
          "type": "PT_CollisionMask",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "max_speed",
          "description": "Must be greater than or equal to 0.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "piercing_damage",
          "description": "Whenever an entity is hit by the projectile, this number gets reduced by the health of the entity. If the number is then below 0, the <code>final_action</code> is applied and the projectile destroyed. Otherwise, the projectile simply continues to its destination.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "rotatable",
          "description": "Whether the animation of the projectile is rotated to match the direction of travel.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "shadow",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "smoke",
          "type": "PT_SmokeSource[]",
          "optional": true
        },
        {
          "name": "turn_speed",
          "type": "PT_float",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Projectile",
      "link": "/Prototype/Projectile",
      "description": "Entity with limited lifetime that can hit other entities and has triggers when this happens."
    },
    {
      "properties": [
        {
          "name": "key_sequence",
          "description": "<p>The default key sequence for this custom input.</p><ul>\"\" (empty string) for unassigned<li>\"mouse-button-2\" etc for mouse buttons, mouse-button-3 for middle mouse button</li><li>\"mouse-wheel-up\", \"mouse-wheel-down\", \"mouse-wheel-left\", \"mouse-wheel-right\" for mouse wheel</li><li>\" + \" is used to separate modifier keys from normal keys: <code>\"ALT + G\"</code></li><li>For modifier keys, the following names are used: \"CONTROL\", \"SHIFT\", \"ALT\", \"COMMAND\"</li><li>A keybinding can contain an unlimited amount of modifier keys (listed above) but only one normal key (listed below).</li></ul>",
          "type": "string",
          "optional": false
        },
        {
          "name": "action",
          "description": "A lua event is only raised if the action is \"lua\".",
          "type": "PT_CustomInputAction",
          "default": "lua",
          "optional": true
        },
        {
          "name": "alternative_key_sequence",
          "description": "The alternative keybinding for this control. See #key_sequence.",
          "type": "string",
          "optional": true
        },
        {
          "name": "consuming",
          "type": "PT_ConsumingType",
          "default": "none",
          "optional": true
        },
        {
          "name": "enabled",
          "description": "If this custom input is enabled. Disabled custom inputs exist but are not used by the game. If disabled, no event is raised when the input is used.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "enabled_while_in_cutscene",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "enabled_while_spectating",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "include_selected_prototype",
          "description": "If true, the type and name of the currently selected prototype will be provided as \"selected_prototype\" in the raised <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#Custom%20Input%20Events\">lua event</a>. This also works in GUI's, not just the game world.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/96125\">[2]</a>",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "item_to_spawn",
          "description": "Name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>. It will be created when this input is pressed and action is set to \"spawn-item\". The item must have the <a href=\"/Types/ItemPrototypeFlags#.22spawnable.22\" title=\"Types/ItemPrototypeFlags\">\"spawnable\"</a> flag set.",
          "type": "string",
          "optional": true
        },
        {
          "name": "linked_game_control",
          "description": "When a custom-input is linked to a game control it won't show up in the control-settings GUI and will fire when the linked control is pressed. <a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/53591\">[1]</a>",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_CustomInput",
      "link": "/Prototype/CustomInput",
      "description": "Used for custom keyboard shortcuts/keybindings in mods. The key associated with the custom input can be changed in the options. This means that <code>key_sequence</code> is simply the default keybinding."
    },
    {
      "properties": [
        {
          "name": "filename",
          "description": "Technically optional, but path to sprite cannot be empty.",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the sprite. Must be unique. Can be used as a <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/Concepts.html#SpritePath\">https://lua-api.factorio.com/latest/Concepts.html#SpritePath</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "draw_as_shadow",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the sprite.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "layers",
          "description": "<p>If this property is present, all Sprite definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (Sprite definition) in the array may also have the <code>layers</code> property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_SpriteType[]",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the sprite on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "shift",
          "description": "In tiles. util.by_pixel() can be used to divide the shift by 32 which is the usual pixel height/width of 1 tile in normal resolution. Note that 32 pixel tile height/width is not enforced anywhere - any other tile height or width is also possible.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the sprite. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "slice",
          "description": "<p>Number of slices this is sliced into when using the \"optimized atlas packing\" option. If you are a modder, you can just ignore this property.</p><p>Example: If this is 4, the sprite will be sliced into a 4×4 grid.</p>",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_x",
          "description": "Same as <code>slice</code> above, but this specifies only how many slices there are on the x axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_y",
          "description": "Same as <code>slice</code> above, but this specifies only how many slices there are on the y axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "prototype": "Prototype",
      "name": "PT_Sprite",
      "link": "/Prototype/Sprite",
      "description": "Specifies a picture that can be used with <a rel=\"nofollow\" class=\"external free\" href=\"https://lua-api.factorio.com/latest/Concepts.html#SpritePath\">https://lua-api.factorio.com/latest/Concepts.html#SpritePath</a> during runtime."
    },
    {
      "properties": [
        {
          "name": "collision_mask",
          "type": "PT_CollisionMask",
          "optional": false
        },
        {
          "name": "layer",
          "description": "Specifies transition drawing priority.",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "map_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "pollution_absorption_per_second",
          "description": "Emissions absorbed per second by this tile. Use a negative value if pollution is created instead of removed.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "variants",
          "description": "Graphics for this tile.",
          "type": "PT_TileVariants",
          "optional": false
        },
        {
          "name": "allowed_neighbors",
          "description": "Array of tile names that are allowed next to this one.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "autoplace",
          "type": "PT_AutoplaceSpecification",
          "optional": true
        },
        {
          "name": "build_sound",
          "description": "If the <a href=\"/Types/Sound\" title=\"Types/Sound\">Sound</a> is provided directly, it is loaded as the \"small\" build sound.",
          "type": "PT_TileBuildSound",
          "optional": true
        },
        {
          "name": "can_be_part_of_blueprint",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "decorative_removal_probability",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "draw_in_water_layer",
          "description": "Used only for the <code>layer_group</code> default, see above.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "effect",
          "type": "string",
          "optional": true
        },
        {
          "name": "effect_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "effect_is_opaque",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "layer_group",
          "type": "PT_TileLayerGroup",
          "optional": true
        },
        {
          "name": "minable",
          "description": " If you want the tile to not be mineable, don't specify the minable property. Only non-mineable tiles become hidden tiles when placing mineable tiles on top of them. ",
          "type": "PT_MinableProperties",
          "optional": true
        },
        {
          "name": "mined_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "needs_correction",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "next_direction",
          "description": "Name of a tile.",
          "type": "string",
          "optional": true
        },
        {
          "name": "placeable_by",
          "type": "PT_ItemToPlace|PT_ItemToPlace[]",
          "optional": true
        },
        {
          "name": "scorch_mark_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "transition_merges_with_tile",
          "description": "Name of a tile.",
          "type": "string",
          "optional": true
        },
        {
          "name": "transition_overlay_layer_offset",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "transitions",
          "description": "Extra transitions. Array of <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">TileTransitions</a>. Each <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">TileTransitions</a> needs the extra mandatory property <code>to_tiles</code>, which is a <a href=\"/Types/string\" title=\"Types/string\">string</a> which is the name of a tile. Furthermore, each <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">TileTransitions</a> needs the extra mandatory property <code>transition_group</code> which is a <a href=\"/Types/uint8\" title=\"Types/uint8\">uint8</a>.",
          "type": "PT_TileTransitions[]",
          "optional": true
        },
        {
          "name": "transitions_between_transitions",
          "description": "Array of <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">TileTransitions</a>. Each <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">TileTransitions</a> needs the extra mandatory properties <code>transition_group1</code> and<code>transition_group2</code> , which are of  <a href=\"/Types/uint8\" title=\"Types/uint8\">uint8</a>.",
          "type": "PT_TileTransitions[]",
          "optional": true
        },
        {
          "name": "trigger_effect",
          "description": "Called by <a href=\"/Types/InvokeTileEffectTriggerEffectItem\" title=\"Types/InvokeTileEffectTriggerEffectItem\">InvokeTileEffectTriggerEffectItem</a>.",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "vehicle_friction_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "walking_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "walking_speed_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_Tile",
      "link": "/Prototype/Tile",
      "description": "A <a href=\"/Tile\" title=\"Tile\">tile</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This will trigger the achievement, if the player receives this amount of attacks. <b>Note:</b> The default achievement \"it stinks and they dont like it\" uses the amount of 1. (As in getting attacked once.)",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_GroupAttackAchievement",
      "link": "/Prototype/GroupAttackAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player gets attacked due to pollution."
    },
    {
      "properties": [
        {
          "name": "time_to_live",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "armor_picture_mapping",
          "description": "Table of key value pairs, the keys are armor names and the values are numbers. The number is the Animation that is associated with the armor, e.g. using <code>1</code> will associate the armor with the first Animation in the pictures table.",
          "type": "table",
          "optional": true
        },
        {
          "name": "picture",
          "description": "Either <code>pictures</code> or <code>picture</code> must be defined.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Either <code>pictures</code> or <code>picture</code> must be defined.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_CharacterCorpse",
      "link": "/Prototype/CharacterCorpse",
      "description": "The corpse of a <a href=\"/Prototype/Character\" title=\"Prototype/Character\">Prototype/Character</a>."
    },
    {
      "properties": [],
      "parent": "PT_Smoke",
      "prototype": "Prototype",
      "name": "PT_SimpleSmoke",
      "link": "/Prototype/SimpleSmoke",
      "description": "<b>Deprecated in 0.16. The type \"simple-smoke\" has been obsoleted and cannot be created. Use <a href=\"/Prototype/TrivialSmoke\" title=\"Prototype/TrivialSmoke\">Prototype/TrivialSmoke</a> or <a href=\"/Prototype/SmokeWithTrigger\" title=\"Prototype/SmokeWithTrigger\">Prototype/SmokeWithTrigger</a> instead.</b>"
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This will disable the achievement, if the player crafts more than this.",
          "type": "PT_MaterialAmountType",
          "optional": false
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_DontCraftManuallyAchievement",
      "link": "/Prototype/DontCraftManuallyAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player finishes the game without crafting more than a set amount."
    },
    {
      "properties": [
        {
          "name": "connector_frame_sprites",
          "type": "PT_TransportBeltConnectorFrame",
          "optional": false
        },
        {
          "name": "animations",
          "description": "Transport belts must have 12 animations. Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "belt_animation_set",
          "description": "<p>Either this, or <code>animations</code> has to present.</p><p>This is the same table as the one used by <a href=\"/Prototype/TransportBeltConnectable\" title=\"Prototype/TransportBeltConnectable\">Prototype/TransportBeltConnectable</a>, with additional properties. If this is present, the belt_animation_set will used for all graphics.</p>",
          "type": "PT_TransportBeltBeltAnimationSet",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "The pictures displayed for circuit connections to this transport belt.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "description": "Defines how wires visually connect to this transport belt.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "0",
          "optional": true
        },
        {
          "name": "related_underground_belt",
          "description": "<p>The name of the <a href=\"/Prototype/UndergroundBelt\" title=\"Prototype/UndergroundBelt\">Prototype/UndergroundBelt</a> which is used in quick-replace fashion when the smart belt dragging behavior is triggered.</p>",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_TransportBelt",
      "link": "/Prototype/TransportBelt",
      "description": "A <a href=\"/Transport_belt\" title=\"Transport belt\">transport belt</a>."
    },
    {
      "properties": [
        {
          "name": "heat_buffer",
          "type": "PT_HeatBuffer",
          "optional": false
        },
        {
          "name": "gui_mode",
          "type": "PT_GuiMode",
          "default": "all",
          "optional": true
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_HeatInterface",
      "link": "/Prototype/HeatInterface",
      "description": "This entity produces or consumes heat. Its heat settings can be changed runtime."
    },
    {
      "properties": [
        {
          "name": "dont_build",
          "description": "This will disable the achievement, if this entity is placed. If you finish the game without building this entity, you receive the achievement.",
          "type": "string[]|string",
          "optional": false
        },
        {
          "name": "amount",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_DontBuildEntityAchievement",
      "link": "/Prototype/DontBuildEntityAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player finishes the game without building a specific entity."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_RecipeCategory",
      "link": "/Prototype/RecipeCategory",
      "description": "A recipe category. The built-in categories can be found <a href=\"/Data.raw#recipe-category\" title=\"Data.raw\">here</a>. See <a href=\"/Prototype/Recipe#category\" title=\"Prototype/Recipe\">Prototype/Recipe#category</a>. Recipe categories can be used to specify which machine can craft which recipes."
    },
    {
      "properties": [
        {
          "name": "animation",
          "description": "Animation speed 1 means 1 frame per tile.",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "burner",
          "description": "Must be a burner energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "energy_source",
          "description": "Can also be a void energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "consumption",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "darkness_to_render_light_animation",
          "type": "PT_float",
          "default": "0.3",
          "optional": true
        },
        {
          "name": "effectivity",
          "description": "Modifies the efficiency of energy transfer from burner output to wheels.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "inventory_size",
          "description": "Size of the car inventory.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "rotation_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "guns",
          "description": "The names of the <a href=\"/Prototype/Gun\" title=\"Prototype/Gun\">Prototype/Guns</a> this car prototype uses.",
          "type": "strings[]",
          "optional": true
        },
        {
          "name": "has_belt_immunity",
          "description": "If this car is immune to movement by belts.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "immune_to_rock_impacts",
          "description": "If this car gets damaged by driving over/against <a href=\"/Prototype/SimpleEntity#count_as_rock_for_filtered_deconstruction\" title=\"Prototype/SimpleEntity\">rocks</a>.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "immune_to_tree_impacts",
          "description": "If this car gets damaged by driving over/against <a href=\"/Prototype/Tree\" title=\"Prototype/Tree\">Prototype/Trees</a>.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "light_animation",
          "description": "Must have the same frame count as <code>animation</code>.",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "sound_no_fuel",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "tank_driving",
          "description": "If this car prototype uses tank controls to drive.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "track_particle_triggers",
          "type": "PT_FootstepTriggerEffectList",
          "optional": true
        },
        {
          "name": "turret_animation",
          "description": "Animation speed 1 means 1 frame per tile.",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "turret_return_timeout",
          "description": "Timeout in ticks specifying how long the turret must be inactive to return to the default position.",
          "type": "PT_uint32",
          "default": "60",
          "optional": true
        },
        {
          "name": "turret_rotation_speed",
          "type": "PT_double",
          "default": "0.01",
          "optional": true
        }
      ],
      "parent": "PT_Vehicle",
      "prototype": "Prototype",
      "name": "PT_Car",
      "link": "/Prototype/Car",
      "description": "Entity with specialized properties for acceleration, braking, and turning."
    },
    {
      "properties": [
        {
          "name": "max_distance",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "structure",
          "type": "PT_UndergroundBeltStructure",
          "optional": false
        },
        {
          "name": "underground_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "underground_remove_belts_sprite",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_UndergroundBelt",
      "link": "/Prototype/UndergroundBelt",
      "description": "An <a href=\"/Underground_belt\" title=\"Underground belt\">underground belt</a>."
    },
    {
      "properties": [],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_BatteryEquipment",
      "link": "/Prototype/BatteryEquipment",
      "description": "Used by <a href=\"/Personal_battery\" title=\"Personal battery\">personal battery</a>."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_ModuleCategory",
      "link": "/Prototype/ModuleCategory",
      "description": "A module category. The built-in categories can be found <a href=\"/Data.raw#module-category\" title=\"Data.raw\">here</a>. See <a href=\"/Prototype/Module#category\" title=\"Prototype/Module\">Prototype/Module#category</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "life_time",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "pictures",
          "description": "Picture variation count and individual frame count must be equal to shadow variation count.",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": false
        },
        {
          "name": "render_layer_when_on_ground",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": false
        },
        {
          "name": "creation_shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "early_death_ticks",
          "description": "How long this flare stays alive after <code>shots_per_flare</code> amount of shots have been shot at it.",
          "type": "PT_uint32",
          "default": "180",
          "optional": true
        },
        {
          "name": "ended_in_water_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "initial_frame_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "initial_height",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "initial_speed",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "initial_vertical_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "movement_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "movement_modifier_when_on_ground",
          "type": "PT_double",
          "default": "0.8",
          "optional": true
        },
        {
          "name": "regular_trigger_effect",
          "type": "PT_TriggerEffect",
          "default": "0",
          "optional": true
        },
        {
          "name": "regular_trigger_effect_frequency",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "shadows",
          "description": "Shadow variation variation count and individual frame count must be equal to picture variation count.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "shot_category",
          "description": "Name of a <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">Prototype/AmmoCategory</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "shots_per_flare",
          "description": "How many artillery shots should be fired at the position of this flare.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ArtilleryFlare",
      "link": "/Prototype/ArtilleryFlare",
      "description": "The entity spawned by the <a href=\"/Artillery_targeting_remote\" title=\"Artillery targeting remote\">artillery targeting remote</a>."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Must be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "animations",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "continuous_animation",
          "description": "Whether the electric energy interface animation always runs instead of being scaled to activity.",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "energy_production",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "energy_usage",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "gui_mode",
          "type": "PT_GuiMode",
          "default": "none",
          "optional": true
        },
        {
          "name": "light",
          "description": "The light that this electric energy interface emits.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "pictures",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_ElectricEnergyInterface",
      "link": "/Prototype/ElectricEnergyInterface",
      "description": "Entity with electric energy source with that can have some of its values changed runtime. Useful for modding in energy consumers/producers."
    },
    {
      "properties": [
        {
          "name": "duration_in_ticks",
          "description": "Must be > 0.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "damage_interval",
          "description": "Interval between application of <code>damage_per_tick</code>, in ticks.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "damage_per_tick",
          "description": "Applied every <code>damage_interval</code> ticks, so may not necessarily be \"per tick\".",
          "type": "PT_DamagePrototype",
          "optional": true
        },
        {
          "name": "fire_spread_cooldown",
          "type": "PT_uint8",
          "default": "30",
          "optional": true
        },
        {
          "name": "fire_spread_radius",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "force_visibility",
          "type": "PT_ForceCondition",
          "default": "all",
          "optional": true
        },
        {
          "name": "selection_box_type",
          "description": "Using this property marks the sticker as a \"selection sticker\", meaning that the selection box will be rendered around the entity when the sticker is on it.",
          "type": "string",
          "default": "entity",
          "optional": true
        },
        {
          "name": "single_particle",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spread_fire_entity",
          "description": "Name of an entity. If this is given, this sticker is considered a \"fire sticker\" for some functions, such as <a href=\"/Types/BaseAttackParameters#fire_penalty\" title=\"Types/BaseAttackParameters\">BaseAttackParameters#fire_penalty</a> and <a href=\"/Types/EntityPrototypeFlags#.22not-flammable.22\" title=\"Types/EntityPrototypeFlags\">EntityPrototypeFlags#.22not-flammable.22</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "stickers_per_square_meter",
          "type": "PT_float",
          "default": "15",
          "optional": true
        },
        {
          "name": "target_movement_modifier",
          "description": "Less than 1 to reduce movement speed, more than 1 to increase it.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "target_movement_modifier_from",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "target_movement_modifier_to",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "vehicle_friction_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "vehicle_friction_modifier_from",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "vehicle_friction_modifier_to",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "vehicle_speed_modifier",
          "description": "Less than 1 to reduce vehicle speed, more than 1 to increase it.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "vehicle_speed_modifier_from",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "vehicle_speed_modifier_to",
          "type": "PT_float",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Sticker",
      "link": "/Prototype/Sticker",
      "description": "Entity that sticks to another entity, and damages/slows it. Currently stickers can only be attached to <a href=\"/Prototype/Unit\" title=\"Prototype/Unit\">Prototype/Unit</a>, <a href=\"/Prototype/Character\" title=\"Prototype/Character\">Prototype/Character</a> and <a href=\"/Prototype/Car\" title=\"Prototype/Car\">Prototype/Car</a>."
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_TriggerTargetType",
      "link": "/Prototype/TriggerTargetType",
      "description": "Only 56 instances of this prototype may be defined. The base game always internally defines a \"common\" trigger target type."
    },
    {
      "properties": [
        {
          "name": "hidden",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_DamageType",
      "link": "/Prototype/DamageType",
      "description": "A damage type. This is used in the <a href=\"/Damage\" title=\"Damage\">damage system</a>. <a href=\"/Damage#Damage_Types\" title=\"Damage\">A list of built-in damage types can be found here</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "equipment_grid",
          "description": "Name of the Prototype/EquipmentGrid that this armor has.",
          "type": "string",
          "optional": true
        },
        {
          "name": "inventory_size_bonus",
          "description": "By how many slots the inventory of the player is expanded when the armor is worn.",
          "type": "PT_ItemStackIndex",
          "optional": true
        },
        {
          "name": "resistances",
          "description": "What amount of damage the armor takes on what type of damage is incoming.",
          "type": "PT_Resistances",
          "optional": true
        }
      ],
      "parent": "PT_Tool",
      "prototype": "Prototype",
      "name": "PT_Armor",
      "link": "/Prototype/Armor",
      "description": "Armor to wear on your in-game character for defense, and buffs."
    },
    {
      "properties": [
        {
          "name": "expensive",
          "type": "PT_TechnologyData|PT_bool",
          "optional": true
        },
        {
          "name": "normal",
          "type": "PT_TechnologyData|PT_bool",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification:PT_TechnologyData",
      "prototype": "Prototype",
      "name": "PT_Technology",
      "link": "/Prototype/Technology",
      "description": "A <a href=\"/Technologies\" title=\"Technologies\">technology</a>."
    },
    {
      "properties": [
        {
          "name": "equal_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "greater_or_equal_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "greater_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "less_or_equal_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "less_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "not_equal_symbol_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        }
      ],
      "parent": "PT_Combinator",
      "prototype": "Prototype",
      "name": "PT_DeciderCombinator",
      "link": "/Prototype/DeciderCombinator",
      "description": "A <a href=\"/Decider_combinator\" title=\"Decider combinator\">decider combinator</a>."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_HighlightBoxEntity",
      "link": "/Prototype/HighlightBoxEntity",
      "description": "<p>Used to attach graphics for <a href=\"/Types/CursorBoxType\" title=\"Types/CursorBoxType\">cursor boxes</a> to entities during runtime. HighlightBoxEntity can also be independent from entities so it is simply drawn somewhere in the world. See <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/LuaSurface.html#LuaSurface.create_entity\">LuaSurface.create_entity</a> for the available options for type \"highlight-box\".</p><p>The <code><a href=\"/Prototype/Entity#collision_box\" title=\"Prototype/Entity\">collision_box</a></code> of the highlight box prototype is ignored during runtime, instead the \"bounding_box\" given in create_entity() or the selection box of the target entity is used.</p>"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "<p>Unique textual identification of the prototype.</p><p>For a list of all names used in vanilla, see <a href=\"/Data.raw\" title=\"Data.raw\">data.raw</a>.</p><p>May not contain <code>.</code>, may not exceed a length of 200 characters.</p>",
          "type": "string",
          "optional": false
        },
        {
          "name": "localised_description",
          "description": "Overwrites the description set in the <a href=\"/Tutorial:Localisation#Localising_simple_strings\" title=\"Tutorial:Localisation\">locale file</a>. The description is usually shown in the tooltip of the prototype.",
          "type": "PT_LocalisedString",
          "optional": true
        },
        {
          "name": "localised_name",
          "description": "Overwrites the name set in the <a href=\"/Tutorial:Localisation#Localising_simple_strings\" title=\"Tutorial:Localisation\">locale file</a>. Can be used to easily set a procedurally-generated name because the LocalisedString format allows to insert parameters into the name directly from the Lua script.",
          "type": "PT_LocalisedString",
          "optional": true
        },
        {
          "name": "order",
          "description": "<p>Used to order items in inventory, recipes and GUI's.</p><p>May not exceed a length of 200 characters.</p>",
          "type": "PT_Order",
          "default": "",
          "optional": true
        }
      ],
      "name": "PT_PrototypeBase",
      "link": "/PrototypeBase",
      "description": "The abstract base for prototypes. PrototypeBase defines the common features of prototypes, such as localization and order."
    },
    {
      "properties": [
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "allow_access_to_all_forces",
          "description": "Whether all forces are allowed to open this market.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Market",
      "link": "/Prototype/Market",
      "description": "Offers can be added to a market and they are shown when opening the entity. Offers allow to spend items to get research bonuses or items."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Defines how this lab gets energy.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "The amount of energy this lab uses.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "inputs",
          "description": "A list of the names of science packs that can be used in this lab.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "off_animation",
          "description": "The animation that plays when the lab is idle.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "on_animation",
          "description": "The animation that plays when the lab is active.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "allowed_effects",
          "description": "Sets the module effects that are allowed to be used on this lab.",
          "type": "PT_EffectTypeLimitation",
          "optional": true
        },
        {
          "name": "base_productivity",
          "description": "Productivity bonus that this machine always has.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "entity_info_icon_shift",
          "description": "Shift of the \"alt-mode icon\" relative to the lab's center.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "module_specification",
          "description": "The number of module slots.",
          "type": "PT_ModuleSpecification",
          "optional": true
        },
        {
          "name": "researching_speed",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Lab",
      "link": "/Prototype/Lab",
      "description": "A <a href=\"/Lab\" title=\"Lab\">lab</a>."
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of the map-gen-presets. Must be \"default\" since only one instances of this prototype can be defined.",
          "type": "string",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_MapGenPresets",
      "link": "/Prototype/MapGenPresets",
      "description": "The available map gen presets. Only 1 instance of this prototype can exist."
    },
    {
      "properties": [
        {
          "name": "speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "energy_per_move",
          "description": "How much does it cost to move 1 meter.",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "energy_per_tick",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_energy",
          "description": "How much energy can be stored in the batteries.",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_speed",
          "description": "The maximum speed of the robot. Useful to limit the impact of <a href=\"/Worker_robot_speed_(research)\" title=\"Worker robot speed (research)\">worker robot speed (research)</a>.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "max_to_charge",
          "description": "The robot will never go to charge when it has more energy than this.",
          "type": "PT_float",
          "default": "0.95",
          "optional": true
        },
        {
          "name": "min_to_charge",
          "description": "The robot will always go to charge when it has less energy than this.",
          "type": "PT_float",
          "default": "0.2",
          "optional": true
        },
        {
          "name": "speed_multiplier_when_out_of_energy",
          "description": "Some robots simply crash, some slowdown but keep going. 0 means crash.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_FlyingRobot",
      "link": "/Prototype/FlyingRobot",
      "description": "Abstract base for construcion/logistics and combat robots."
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of the prototype.",
          "type": "string",
          "optional": false
        },
        {
          "name": "filename",
          "description": "Has to be present if <code>system_cursor</code> is not present.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "hot_pixel_x",
          "description": "Has to be present if <code>system_cursor</code> is not present.",
          "type": "PT_int16",
          "optional": true
        },
        {
          "name": "hot_pixel_y",
          "description": "Has to be present if <code>system_cursor</code> is not present.",
          "type": "PT_int16",
          "optional": true
        },
        {
          "name": "system_cursor",
          "description": "Either this or the other three properties have to be present.",
          "type": "PT_MouseCursorSystemCursor",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_MouseCursor",
      "link": "/Prototype/MouseCursor",
      "description": "Used by Prototype/SelectionTool#mouse_cursor."
    },
    {
      "properties": [
        {
          "name": "categories",
          "description": "An array of <a href=\"/Prototype/EquipmentCategory\" title=\"Prototype/EquipmentCategory\">Prototype/EquipmentCategory</a> names. Sets the categories of the equipment. It can only be inserted into <a href=\"/Prototype/EquipmentGrid#equipment_categories\" title=\"Prototype/EquipmentGrid\">grids</a> with at least one matching category.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "Must be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "shape",
          "description": "How big this equipment should be in the grid and whether it should be one solid rectangle or of a custom shape.",
          "type": "PT_EquipmentShape",
          "optional": false
        },
        {
          "name": "sprite",
          "description": "The graphics to use when this equipment is shown inside an equipment grid.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "background_border_color",
          "description": "The color that the border of the background of this equipment should have when shown inside an equipment grid.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "background_color",
          "description": "The color that the background of this equipment should have when shown inside an equipment grid.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "grabbed_background_color",
          "description": "The color that the background of this equipment should have when held in the players hand and hovering over an equipment grid.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "take_result",
          "description": "Name of the item prototype that should be returned to the player when they remove this equipment from an equipment grid.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "name": "PT_Equipment",
      "link": "/Prototype/Equipment",
      "description": "Abstract base of all equipment modules. Equipment modules can be inserted into Prototype/EquipmentGrids."
    },
    {
      "properties": [
        {
          "name": "animation_scale",
          "type": "PT_one[]|PT_two PT_float",
          "optional": false
        },
        {
          "name": "animation_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "dark_threshold",
          "type": "PT_one[]|PT_two PT_float",
          "optional": false
        },
        {
          "name": "foam_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "foam_color_multiplier",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the tile-effect. Must be \"water\" since only one instances of this prototype can be defined.",
          "type": "string",
          "optional": false
        },
        {
          "name": "reflection_threshold",
          "type": "PT_one[]|PT_two PT_float",
          "optional": false
        },
        {
          "name": "specular_lightness",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "specular_threshold",
          "type": "PT_one[]|PT_two PT_float",
          "optional": false
        },
        {
          "name": "texture",
          "description": "Sprite size must be 512x512.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "tick_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "far_zoom",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "near_zoom",
          "type": "PT_float",
          "default": "2.0",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_TileEffect",
      "link": "/Prototype/TileEffect",
      "description": "Used to define the parameters for the water shader."
    },
    {
      "properties": [
        {
          "name": "minimum_distance",
          "description": "The achievement will trigger if a train path is longer than this.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_TrainPathAchievement",
      "link": "/Prototype/TrainPathAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player has a specified train path length."
    },
    {
      "properties": [
        {
          "name": "expression",
          "description": "The noise expression itself. This is where most of the noise magic happens.",
          "type": "PT_NoiseExpression",
          "optional": false
        },
        {
          "name": "intended_property",
          "description": "<p>Names the property that this expression is intended to provide a value for, if any. This will make the expression show up as an option in the map generator GUI, unless it is the only expression with that intended property, in which case it will be hidden and selected by default.</p><p>Note that the \"Map type\" dropdown in the map generation GUI is actually a selector for \"elevation\" generators. If generators are available for other properties, the \"Map type\" dropdown in the GUI will be renamed to \"elevation\" and shown along with selectors for the other selectable properties.</p><p>For example if a noise expression is intended to be used as an alternative temperature generator, <code>intended_property</code> should be \"temperature\". The base game uses the intended_properties  elevation, temperature, moisture and aux. For how the named noise expression with those intended_properties are used in the base game see the notable named noise expression list on <a href=\"/Types/NoiseExpression#variable\" title=\"Types/NoiseExpression\">Types/NoiseExpression#variable</a>. Mods may add any other intended_property or modify the existing noise expressions to change/remove their intended properties. Furthermore, mods may remove the use of those named noise expressions from the map generation code or change what they affect.</p>",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_NamedNoiseExpression",
      "link": "/Prototype/NamedNoiseExpression",
      "description": "<p>A <a href=\"/Types/NoiseExpression\" title=\"Types/NoiseExpression\">NoiseExpression</a> together with a name.</p><p>The base game uses named noise expressions to specify functions for many map properties to be used in map generation; e.g. the \"elevation\" expression is used to calculate elevation for every point on a map. For a list of the built-in named noise expressions, see <a href=\"/Data.raw#noise-expression\" title=\"Data.raw\">Data.raw#noise-expression</a>.</p><p>Named noise expressions can be used by <a rel=\"nofollow\" class=\"external text\" href=\"http://lua-api.factorio.com/latest/Concepts.html#MapGenSettings\">MapGenSettings</a> and <a href=\"/Types/MapGenPreset\" title=\"Types/MapGenPreset\">Types/MapGenPreset</a> to override which named expression is used to calculate a given property by having an entry in <code>property_expression_names</code> e.g. <code>elevation = \"0.16-elevation\"</code>.<br>Alternate expressions can be made available in the map generator GUI by setting their <code>intended_property</code> to the name of the property they should override.<br>Named noise expressions can also be used by <a href=\"/Types/NoiseExpression#variable\" title=\"Types/NoiseExpression\">noise variables</a>, e.g. <code>noise.var(\"my-named-expression\")</code>.</p>"
    },
    {
      "properties": [
        {
          "name": "activity_led_light_offsets",
          "type": "PT_vector[]",
          "optional": false
        },
        {
          "name": "activity_led_sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "circuit_wire_connection_points",
          "type": "PT_WireConnectionPoint[]",
          "optional": false
        },
        {
          "name": "item_slot_count",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "sprites",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "activity_led_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_ConstantCombinator",
      "link": "/Prototype/ConstantCombinator",
      "description": "A <a href=\"/Constant_combinator\" title=\"Constant combinator\">constant combinator</a>."
    },
    {
      "properties": [
        {
          "name": "subgroup",
          "description": "The name of a <a href=\"/Prototype/ItemSubGroup\" title=\"Prototype/ItemSubGroup\">Prototype/ItemSubGroup</a>.",
          "type": "string",
          "default": "virtual-signal",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_VirtualSignal",
      "link": "/Prototype/VirtualSignal",
      "description": "A <a href=\"/Circuit_network#Virtual_signals\" title=\"Circuit network\">virtual signal</a>."
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Unique textual identification of the prototype.",
          "type": "string",
          "optional": false
        },
        {
          "name": "sound",
          "description": "The sound file and volume.",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "track_type",
          "description": "This lets the game know in what instances the audio file is played.",
          "type": "PT_AmbientSoundTrackType",
          "optional": false
        },
        {
          "name": "weight",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_AmbientSound",
      "link": "/Prototype/AmbientSound",
      "description": "This prototype is used to make sound while playing the game. This includes the game's <a href=\"/Factorio_Soundtrack\" title=\"Factorio Soundtrack\">music</a>, composed by Daniel James Taylor."
    },
    {
      "properties": [
        {
          "name": "damage_per_tick",
          "type": "PT_DamagePrototype",
          "optional": false
        },
        {
          "name": "spread_delay",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "spread_delay_deviation",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "add_fuel_cooldown",
          "type": "PT_uint32",
          "default": "10",
          "optional": true
        },
        {
          "name": "burnt_patch_alpha_default",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "burnt_patch_alpha_variations",
          "type": "PT_FireFlameBurntPatchAlphaVariations",
          "optional": true
        },
        {
          "name": "burnt_patch_lifetime",
          "type": "PT_uint32",
          "default": "1800",
          "optional": true
        },
        {
          "name": "burnt_patch_pictures",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "damage_multiplier_decrease_per_tick",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "damage_multiplier_increase_per_added_fuel",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "delay_between_initial_flames",
          "type": "PT_uint32",
          "default": "10",
          "optional": true
        },
        {
          "name": "fade_in_duration",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "fade_out_duration",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "flame_alpha",
          "description": "Only loaded if <code>uses_alternative_behavior</code> is false.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "flame_alpha_deviation",
          "description": "Only loaded if <code>uses_alternative_behavior</code> is false.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "initial_flame_count",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "initial_lifetime",
          "type": "PT_uint32",
          "default": "300",
          "optional": true
        },
        {
          "name": "initial_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "lifetime_increase_by",
          "type": "PT_uint32",
          "default": "20",
          "optional": true
        },
        {
          "name": "lifetime_increase_cooldown",
          "type": "PT_uint32",
          "default": "10",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "limit_overlapping_particles",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "maximum_damage_multiplier",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "maximum_lifetime",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "maximum_spread_count",
          "type": "PT_uint16",
          "default": "200",
          "optional": true
        },
        {
          "name": "on_damage_tick_effect",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "on_fuel_added_action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "particle_alpha",
          "description": "Only loaded if <code>uses_alternative_behavior</code> is true.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_alpha_blend_duration",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "particle_alpha_deviation",
          "description": "Only loaded if <code>uses_alternative_behavior</code> is true.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "pictures",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "secondary_picture_fade_out_duration",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "secondary_picture_fade_out_start",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "secondary_pictures",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "secondary_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "small_tree_fire_pictures",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "smoke",
          "type": "PT_SmokeSource[]",
          "optional": true
        },
        {
          "name": "smoke_fade_in_duration",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "smoke_fade_out_duration",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "smoke_source_pictures",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "spawn_entity",
          "description": "The name of an entity.",
          "type": "string",
          "optional": true
        },
        {
          "name": "tree_dying_factor",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "uses_alternative_behavior",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_FireFlame",
      "link": "/Prototype/FireFlame",
      "description": "A fire."
    },
    {
      "properties": [
        {
          "name": "power",
          "description": "The power output of this equipment.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "burner",
          "description": "Must be a burner energy source. If not defined, this equipment produces power for free.",
          "type": "PT_EnergySource",
          "optional": true
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_GeneratorEquipment",
      "link": "/Prototype/GeneratorEquipment",
      "description": "Used by <a href=\"/Portable_fusion_reactor\" title=\"Portable fusion reactor\">portable fusion reactor</a>. Provides power in equipment grids. Can produce power for free or use a burner energy source."
    },
    {
      "properties": [
        {
          "name": "speed",
          "description": "How fast the text flies up. Seems to be tiles/tick.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "time_to_live",
          "description": "Time in ticks this flying-text lasts.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "text_alignment",
          "type": "PT_TextAlignment",
          "default": "left",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_FlyingText",
      "link": "/Prototype/FlyingText",
      "description": "An upwards flying text that disappears after a certain time (setting active = false stops the flying and the disappearing.)"
    },
    {
      "properties": [
        {
          "name": "energy_consumption",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "movement_bonus",
          "description": "Multiplier of the character speed/vehicle acceleration.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_MovementBonusEquipment",
      "link": "/Prototype/MovementBonusEquipment",
      "description": "Used by <a href=\"/Exoskeleton\" title=\"Exoskeleton\">exoskeleton</a>. Increases max speed of characters or acceleration of vehicles if they have this equipment in their grid."
    },
    {
      "properties": [
        {
          "name": "energy_per_shield",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "max_shield_value",
          "type": "PT_float",
          "optional": false
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_EnergyShieldEquipment",
      "link": "/Prototype/EnergyShieldEquipment",
      "description": "Used by <a href=\"/Energy_shield\" title=\"Energy shield\">Energy shield</a>."
    },
    {
      "properties": [
        {
          "name": "stack_size",
          "description": " Count of items of the same name that can be stored in one inventory slot. Must be 1 when the <code>\"not-stackable\"</code> flag is set. ",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "burnt_result",
          "description": "The item that is the result when this item gets burned as fuel.",
          "type": "string",
          "optional": true
        },
        {
          "name": "close_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "dark_background_icons",
          "type": "PT_IconData[]",
          "optional": true
        },
        {
          "name": "dark_background_icon",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "default_request_amount",
          "type": "PT_ItemCountType",
          "optional": true
        },
        {
          "name": "flags",
          "description": "Specifies some properties of the item.",
          "type": "PT_ItemPrototypeFlags",
          "optional": true
        },
        {
          "name": "fuel_acceleration_multiplier",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fuel_category",
          "description": "Must exist when a fuel_value is defined. Name of one of the <a href=\"/Prototype/FuelCategory\" title=\"Prototype/FuelCategory\">fuel categories</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "fuel_emissions_multiplier",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fuel_glow_color",
          "description": "Colors the glow of the burner energy source when this fuel is burned.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "fuel_top_speed_multiplier",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fuel_value",
          "description": "Mandatory when fuel_acceleration_multiplier, fuel_top_speed_multiplier, fuel_emissions_multiplier, or fuel_glow_color are used. Amount of energy it gives when used as fuel.",
          "type": "PT_Energy",
          "default": "0J",
          "optional": true
        },
        {
          "name": "open_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Used to give the item multiple different icons so that they look less uniform on belts etc. For inventory icons and similar, <code>icon/icons</code> will be used. Maximum number of variations is 16.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "place_as_tile",
          "type": "PT_PlaceAsTile",
          "optional": true
        },
        {
          "name": "place_result",
          "description": "Name of <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">prototype/Entity</a> that can be built using this item. If this item should be the one that construction bots use to build the specified place_result, set the <a href=\"/Types/ItemPrototypeFlags#.22primary-place-result.22\" title=\"Types/ItemPrototypeFlags\">primary-place-result</a> item flag.<br>The localised name of the entity will be used as the in-game item name. This behavior can be overwritten by specifying <code>localised_name</code> on this item, it will be used instead.",
          "type": "string",
          "optional": true
        },
        {
          "name": "placed_as_equipment_result",
          "type": "string",
          "optional": true
        },
        {
          "name": "rocket_launch_product",
          "type": "PT_ItemProductPrototype",
          "optional": true
        },
        {
          "name": "rocket_launch_products",
          "type": "PT_ItemProductPrototype[]",
          "optional": true
        },
        {
          "name": "subgroup",
          "description": "Empty text of subgroup is not allowed. (You can ommit the definition to get the default \"other\").",
          "type": "string",
          "default": "other",
          "optional": true
        },
        {
          "name": "wire_count",
          "description": "The number of items needed to connect 2 entities with this as wire. In the base game, <a href=\"/Green_wire\" title=\"Green wire\">green wire</a>, <a href=\"/Red_wire\" title=\"Red wire\">red wire</a> and <a href=\"/Copper_cable\" title=\"Copper cable\">copper cable</a> have this set to 1.",
          "type": "PT_ItemCountType",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_Item",
      "link": "/Prototype/Item",
      "description": "Possible configuration for all items."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_DeconstructibleTileProxy",
      "link": "/Prototype/DeconstructibleTileProxy",
      "description": "Entity used to signify that the tile below it should be deconstructed."
    },
    {
      "properties": [
        {
          "name": "limited_to_one_game",
          "description": "If this is false, the player carries over their statistics from this achievement through all their saves.",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "amount",
          "description": "This will trigger the achievement, if enough entities were placed using construction robots.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "more_than_manually",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_ConstructWithRobotsAchievement",
      "link": "/Prototype/ConstructWithRobotsAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player constructs enough entities with construction robots."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_EntityParticle",
      "link": "/Prototype/EntityParticle",
      "description": "Deprecated in 0.18. The type \"particle\" has been obsoleted and cannot be created. See <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a> for particles."
    },
    {
      "properties": [
        {
          "name": "base_color",
          "description": "Used by bars that show the fluid color, like the flamethrower turret fill bar in the tooltip, or the fill bar for the fluidwagon tooltip; and for the pipe windows and storage tank fill gauges.",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_temperature",
          "description": "Also the minimum temperature of the fluid. Has to be lower than <code>max_temperature</code>.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "flow_color",
          "description": "Used only for pipe windows or storage tank fill gauges.",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "max_temperature",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "emissions_multiplier",
          "description": "Scales pollution generated when the fluid is consumed.",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fuel_value",
          "type": "PT_Energy",
          "default": "0J",
          "optional": true
        },
        {
          "name": "gas_temperature",
          "description": "Above this temperature the <code>gas_flow</code> animation is used to display the fluid inside storage tanks and pipes.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "heat_capacity",
          "description": "Joule needed to heat 1 Unit by 1 °C.",
          "type": "PT_Energy",
          "default": "1KJ",
          "optional": true
        },
        {
          "name": "hidden",
          "description": "Hides the fluid from the signal selection screen.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "subgroup",
          "description": "The value of this property may not be an empty string. It either has to be nil, or a non-empty string.",
          "type": "string",
          "default": "fluid",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "prototype": "Prototype",
      "name": "PT_Fluid",
      "link": "/Prototype/Fluid",
      "description": "A fluid."
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "description": "The information the item needs to know in order to know what ammo it requires, the sounds, and range.",
          "type": "PT_AttackParameters",
          "optional": false
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_Gun",
      "link": "/Prototype/Gun",
      "description": "A gun. A weapon to deal damage to entities."
    },
    {
      "properties": [
        {
          "name": "ammo_stack_limit",
          "description": "Must be > 0.",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "automated_ammo_count",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "gun",
          "description": "Name of an item.",
          "type": "string",
          "optional": false
        },
        {
          "name": "inventory_size",
          "description": "Must be > 0.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "manual_range_modifier",
          "description": "Must be > 0.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "turret_rotation_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "alert_when_attacking",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "base_picture",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "base_picture_render_layer",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": true
        },
        {
          "name": "base_picture_secondary_draw_order",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "base_shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "cannon_barrel_light_direction",
          "type": "PT_Vector3D",
          "optional": true
        },
        {
          "name": "cannon_barrel_pictures",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "cannon_barrel_recoil_shiftings",
          "type": "PT_Vector3D[]",
          "optional": true
        },
        {
          "name": "cannon_barrel_recoil_shiftings_load_correction_matrix",
          "description": "Only loaded if <code>cannon_barrel_recoil_shiftings</code> is loaded.",
          "type": "PT_Vector3D[]",
          "optional": true
        },
        {
          "name": "cannon_base_pictures",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "cannon_parking_frame_count",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "cannon_parking_speed",
          "type": "PT_uint16",
          "default": "1",
          "optional": true
        },
        {
          "name": "disable_automatic_firing",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "rotating_sound",
          "type": "PT_InterruptibleSound",
          "optional": true
        },
        {
          "name": "rotating_stopped_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "turn_after_shooting_cooldown",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_ArtilleryTurret",
      "link": "/Prototype/ArtilleryTurret",
      "description": "An <a href=\"/Artillery_turret\" title=\"Artillery turret\">artillery turret</a>."
    },
    {
      "properties": [
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "item_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "loot_pickup_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "mining_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "movement_speed",
          "description": "Must be >= 0.34375.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the god-controller. Must be \"default\" since only one instances of this prototype can be defined.",
          "type": "string",
          "default": "default",
          "optional": false
        },
        {
          "name": "crafting_categories",
          "description": "Names of the crafting categories the player can craft recipes from.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "mining_categories",
          "description": "Names of the crafting categories the player can craft recipes from.",
          "type": "string[]",
          "optional": true
        }
      ],
      "prototype": "Prototype",
      "name": "PT_GodController",
      "link": "/Prototype/GodController",
      "description": "Properties of the god controller."
    },
    {
      "properties": [
        {
          "name": "damage",
          "type": "PT_DamagePrototype",
          "optional": false
        },
        {
          "name": "slow_down_factor",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Explosion",
      "prototype": "Prototype",
      "name": "PT_FlameThrowerExplosion",
      "link": "/Prototype/FlameThrowerExplosion",
      "description": "Explosion that can deal damage."
    },
    {
      "properties": [
        {
          "name": "stage_counts",
          "description": "Number of stages the animation has.",
          "type": "PT_uint32[]",
          "optional": false
        },
        {
          "name": "stages",
          "description": "Entity's graphics, using a graphic sheet, with variation and depletion. At least one stage must be defined.",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "category",
          "description": "The category for the resource. Available categories in vanilla can be found here: <a href=\"/Data.raw#resource-category\" title=\"Data.raw\">Data.raw#resource-category</a>",
          "type": "string",
          "default": "basic-solid",
          "optional": true
        },
        {
          "name": "effect_animation_period",
          "description": "How long it takes <code>stages_effect</code> to go from <code>min_effect_alpha</code> to <code>max_effect_alpha</code>.",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "effect_animation_period_deviation",
          "description": "How much <code>effect_animation_period</code> can deviate from its original value. Used to make the stages effect alpha change look less uniform.",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "effect_darkness_multiplier",
          "description": "How much the surface darkness should affect the alpha of <code>stages_effect</code>.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "highlight",
          "description": "If the resource should be highlighted when holding a mining drill that can mine it (holding a pumpjack highlights crude-oil in the base game).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "infinite",
          "description": "If the ore is infinitely minable, or if it will eventually run out of resource.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "infinite_depletion_amount",
          "description": "<i>Every time an infinite-type resource \"ticks\" lower it's lowered by that amount.</i> -- <a rel=\"nofollow\" class=\"external text\" href=\"https://forums.factorio.com/viewtopic.php?t=47093&amp;p=271243#p271115\">Rseding91</a>",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "map_grid",
          "description": "Whether the resource should have a grid pattern on the map instead of a solid map color.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "max_effect_alpha",
          "description": "Maximal alpha value of <code>stages_effect</code>.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "min_effect_alpha",
          "description": "Minimal alpha value of <code>stages_effect</code>.",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "minimum",
          "description": "Must be not 0 when <code>infinite = true</code>.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "mining_visualisation_tint",
          "description": "Defaults to the resources map color if left unset and map color is set, otherwise defaults to white if left unset.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "normal",
          "description": "Must be not 0 when <code>infinite = true</code>.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "randomize_visual_position",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "resource_patch_search_radius",
          "description": "When hovering over this resource in the map view: How far to search for other resource patches of this type to display as one (summing amount, white outline).",
          "type": "PT_uint32",
          "default": "3",
          "optional": true
        },
        {
          "name": "stages_effect",
          "description": "An effect that can be overlayed above the normal ore graphics. Used in the base game to make <a href=\"/Uranium_ore\" title=\"Uranium ore\">uranium ore</a> glow.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "tree_removal_max_distance",
          "description": "Must be positive when <code>tree_removal_probability</code> is set.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "tree_removal_probability",
          "description": "Must be positive.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "walking_sound",
          "description": "Sound played when the player walks over this resource.",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ResourceEntity",
      "link": "/Prototype/ResourceEntity",
      "description": "A mineable/gatherable entity."
    },
    {
      "properties": [
        {
          "name": "animations",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "beam",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "correct_rotation",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "fade_in_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "fade_out_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "height",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "light_intensity_factor_final",
          "description": "Silently clamped to be between 0 and 1.",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "light_intensity_factor_initial",
          "description": "Silently clamped to be between 0 and 1.",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "light_intensity_peak_end_progress",
          "type": "PT_float",
          "default": "0.9",
          "optional": true
        },
        {
          "name": "light_intensity_peak_start_progress",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "light_size_factor_final",
          "description": "Silently clamped to be between 0 and 1.",
          "type": "PT_float",
          "default": "0.1",
          "optional": true
        },
        {
          "name": "light_size_factor_initial",
          "description": "Silently clamped to be between 0 and 1.",
          "type": "PT_float",
          "default": "0.05",
          "optional": true
        },
        {
          "name": "light_size_peak_end_progress",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "light_size_peak_start_progress",
          "type": "PT_float",
          "default": "0.1",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "explosion",
          "optional": true
        },
        {
          "name": "rotate",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "scale",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "scale_animation_speed",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "scale_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "scale_end",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "scale_in_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "scale_increment_per_tick",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "scale_initial",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "scale_initial_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "scale_out_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "smoke",
          "description": "Name of a trivial-smoke prototype. Mandatory if smoke_count > 0.",
          "type": "string",
          "optional": true
        },
        {
          "name": "smoke_count",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "smoke_slow_down_factor",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Explosion",
      "link": "/Prototype/Explosion",
      "description": "Used to play an animation and a sound."
    },
    {
      "properties": [
        {
          "name": "default_sprite_priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "default_sprite_scale",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "default_tileset",
          "type": "PT_FileName",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_GuiStyle",
      "link": "/Prototype/GuiStyle",
      "description": "The available gui styles. Only 1 instance of this prototype can exist."
    },
    {
      "properties": [],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_RocketSiloRocketShadow",
      "link": "/Prototype/RocketSiloRocketShadow",
      "description": "The shadow of the rocket inside the rocket silo."
    },
    {
      "properties": [
        {
          "name": "effectivity",
          "description": "The effectivity of the generator with 0.5 being half as effective as a regular steam-engine generator.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "energy_source",
          "description": "Must be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "description": "This must have a filter if <code>max_power_output</code> is not defined.",
          "optional": false
        },
        {
          "name": "fluid_usage_per_tick",
          "description": "The number of fluid units the generator uses per tick.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "horizontal_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "maximum_temperature",
          "type": "PT_double",
          "description": "<p>Used to calculate the <code>max_power_output</code> if it is not defined and <code>burns_fluid</code> is false. Then, the max power output is <code>(min(fluid_max_temp,&nbsp;maximum_temperature)&nbsp;-&nbsp;fluid_default_temp) × fluid_usage_per_tick × fluid_heat_capacity × effectivity</code>, the fluid is the filter specified on the <code>fluid_box</code>. </p> \n<   <p>The maximum temperature to which the efficiency can increase. At this temperature the generator will run at 100% efficiency. Note: Higher temperature fluid can still be consumed.</p><p>The maximum temperature to which the efficiency can increase. At this temperature the generator will run at 100% efficiency. Note: Higher temperature fluid can still be consumed.</p>",
          "optional": false
        },
        {
          "name": "vertical_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "burns_fluid",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "max_power_output",
          "type": "PT_Energy",
          "description": "The power production of the generator is capped to this value. This is also the value that is shown as the maximum power output in the tooltip of the generator.<br><code>fluid_box</code> must have a filter if this is not defined.",
          "optional": true
        },
        {
          "name": "min_perceived_performance",
          "description": "Animation runs at least this fast. This corresponds to the sound.",
          "type": "PT_double",
          "default": "0.25",
          "optional": true
        },
        {
          "name": "performance_to_sound_speedup",
          "type": "PT_double",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "scale_fluid_usage",
          "description": "Scales the generator's fluid usage to its maximum power output.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "smoke",
          "description": "Array of 1 or more smoke sources.",
          "type": "PT_SmokeSource[]",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Generator",
      "link": "/Prototype/Generator",
      "description": "An entity that produces power from fluids, for example a <a href=\"/Steam_engine\" title=\"Steam engine\">steam engine</a>."
    },
    {
      "properties": [
        {
          "name": "movement_speed",
          "description": "Must be >= 0.34375.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the spectator-controller. Must be \"default\" since only one instances of this prototype can be defined.",
          "type": "string",
          "default": "default",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_SpectatorController",
      "link": "/Prototype/SpectatorController",
      "description": "Properties of the spectator controller."
    },
    {
      "properties": [
        {
          "name": "count",
          "description": "This will trigger the achievement, if player's current robot count is over this amount.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_CombatRobotCountAchievement",
      "link": "/Prototype/CombatRobotCountAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player has a certain robot follower count."
    },
    {
      "properties": [
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "description": "Size of the inventory of the wagon. The inventory can be limited using the red bar and filtered. This functionality cannot be turned off.",
          "optional": false
        }
      ],
      "parent": "PT_RollingStock",
      "prototype": "Prototype",
      "name": "PT_CargoWagon",
      "link": "/Prototype/CargoWagon",
      "description": "A <a href=\"/Cargo_wagon\" title=\"Cargo wagon\">cargo wagon</a>."
    },
    {
      "properties": [
        {
          "name": "circuit_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": false
        },
        {
          "name": "led_off",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "led_on",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "left_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": false
        },
        {
          "name": "overlay_loop",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "overlay_start",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "overlay_start_delay",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "power_on_animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "right_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": false
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "wire_max_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_PowerSwitch",
      "link": "/Prototype/PowerSwitch",
      "description": "A <a href=\"/Power_switch\" title=\"Power switch\">power switch</a>."
    },
    {
      "properties": [
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_PipeToGroundPictures",
          "optional": false
        },
        {
          "name": "draw_fluid_icon_override",
          "description": "Causes fluid icon to always be drawn, ignoring the usual pair requirement.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_PipeToGround",
      "link": "/Prototype/PipeToGround",
      "description": "A <a href=\"/Pipe_to_ground\" title=\"Pipe to ground\">pipe to ground</a>."
    },
    {
      "properties": [
        {
          "name": "inventory_size",
          "description": "The number of slots in this container.",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "picture",
          "description": "The picture displayed for this entity.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "circuit_connector_sprites",
          "description": "The pictures displayed for circuit connections to this container.",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "description": "Defines how wires visually connect to this container.",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this container.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "enable_inventory_bar",
          "description": "If the red inventory limiter bar is enabled.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "scale_info_icons",
          "description": "If the icons of items shown in alt-mode should be scaled to the containers size.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Container",
      "link": "/Prototype/Container",
      "description": "A generic container, such as a chest. Can not be rotated."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Sets how this solar panel connects to the energy network. The most relevant property seems to be the output_priority. Has to be an electric energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "picture",
          "description": "The picture displayed for this solar panel.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "production",
          "description": "The maximum amount of power this solar panel can produce.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "overlay",
          "description": "Overlay has to be empty or have same number of variations as picture.",
          "type": "PT_SpriteVariations",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_SolarPanel",
      "link": "/Prototype/SolarPanel",
      "description": "A <a href=\"/Solar_panel\" title=\"Solar panel\">solar panel</a>."
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "automatic",
          "type": "PT_bool",
          "optional": false
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_ActiveDefenseEquipment",
      "link": "/Prototype/ActiveDefenseEquipment",
      "description": "Used by <a href=\"/Discharge_defense\" title=\"Discharge defense\">discharge defense</a> and <a href=\"/Personal_laser_defense\" title=\"Personal laser defense\">personal laser defense</a>."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This is the amount of entity of the specified type the player needs to destroy to receive the achievement.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "damage_type",
          "description": "This defines how the player needs to destroy the specific entity.",
          "type": "string",
          "optional": true
        },
        {
          "name": "in_vehicle",
          "description": "This defines if the player needs to be in a vehicle.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "personally",
          "description": "This defines to make sure you are the one driving, for instance, in a tank rather than an automated train.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "to_kill",
          "description": "This defines which entity (by name) needs to be destroyed in order to receive the achievement.",
          "type": "string",
          "optional": true
        },
        {
          "name": "type_to_kill",
          "description": "This defines what entity type needs to be destroyed in order to receive the achievement.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_KillAchievement",
      "link": "/Prototype/KillAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player destroys a certain amount of an entity, with a specific damage type."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Must be an electric or void energy source. The emissions set on the energy source are ignored so lamps cannot produce pollution.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage_per_tick",
          "description": "The amount of energy the lamp uses. Must be greater than > 0.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "picture_off",
          "description": "The lamps graphics when it's off.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "picture_on",
          "description": "The lamps graphics when it's on.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "always_on",
          "description": "Whether the lamp should always be on.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "The pictures displayed for circuit connections to this lamp.",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "description": "Defines how wires visually connect to this lamp.",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "darkness_for_all_lamps_off",
          "description": "darkness_for_all_lamps_on must be > darkness_for_all_lamps_off. Values must be between 0 and 1.",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "darkness_for_all_lamps_on",
          "description": "darkness_for_all_lamps_on must be > darkness_for_all_lamps_off. Values must be between 0 and 1.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "glow_color_intensity",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "glow_render_mode",
          "type": "PT_LampGlowRenderMode",
          "default": "additive",
          "optional": true
        },
        {
          "name": "glow_size",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "light",
          "description": "What color the lamp will be when it is on, and receiving power.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "light_when_colored",
          "description": "This refers to when the light is in a circuit network, and is lit a certain color based on a Circuit value.",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "signal_to_color_mapping",
          "type": "PT_SignalColorMapping[]",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Lamp",
      "link": "/Prototype/Lamp",
      "description": "A <a href=\"/Lamp\" title=\"Lamp\">lamp</a> to provide light, using energy."
    },
    {
      "properties": [
        {
          "name": "burning_cooldown",
          "description": "<p>Controls for how long the boiler will show the fire and fire_glow after the energy source runs out of energy.</p><p>Note that fire and fire_glow alpha is set to the light intensity of the energy source, so 0 light intensity means the fire is invisible. For burner energy sources, the light intensity will reach zero rather quickly after the boiler runs out of fuel, effectively capping the time that fire and fire_glow will be shown after the boiler runs out of fuel.</p>",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "energy_consumption",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "energy_source",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "fire",
          "description": "This means the table itself is required, but can be empty.",
          "type": "PT_AnimationSidesOptional",
          "optional": false
        },
        {
          "name": "fire_glow",
          "description": "This means the table itself is required, but can be empty.",
          "type": "PT_AnimationSidesOptional",
          "optional": false
        },
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "output_fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "structure",
          "type": "PT_AnimationSidesMandatory",
          "optional": false
        },
        {
          "name": "target_temperature",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "fire_flicker_enabled",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "fire_glow_flicker_enabled",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "mode",
          "type": "PT_BoilerMode",
          "default": "heat-water-inside",
          "optional": true
        },
        {
          "name": "patch",
          "type": "PT_BoilerPatch",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Boiler",
      "link": "/Prototype/Boiler",
      "description": "A <a href=\"/Boiler\" title=\"Boiler\">boiler</a>."
    },
    {
      "properties": [
        {
          "name": "cargo_centered",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "max_payload_size",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "destroy_action",
          "description": "Applied when the robot expires (runs out of energy and <a href=\"/Prototype/FlyingRobot#speed_multiplier_when_out_of_energy\" title=\"Prototype/FlyingRobot\">speed_multiplier_when_out_of_energy</a> is 0).",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "draw_cargo",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "idle",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "in_motion",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_idle",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_in_motion",
          "type": "PT_RotatedAnimation",
          "optional": true
        }
      ],
      "parent": "PT_FlyingRobot",
      "name": "PT_RobotWithLogisticInterface",
      "link": "/Prototype/RobotWithLogisticInterface",
      "description": "The common properties of logistic and construction robots represented by an abstract prototype."
    },
    {
      "properties": [
        {
          "name": "idle_with_cargo",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "in_motion_with_cargo",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_idle_with_cargo",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_in_motion_with_cargo",
          "type": "PT_RotatedAnimation",
          "optional": true
        }
      ],
      "parent": "PT_RobotWithLogisticInterface",
      "prototype": "Prototype",
      "name": "PT_LogisticRobot",
      "link": "/Prototype/LogisticRobot",
      "description": "A <a href=\"/Logistic_robot\" title=\"Logistic robot\">logistic robot</a>."
    },
    {
      "properties": [
        {
          "name": "burner",
          "description": "Must be a burner energy source when using \"burner\", otherwise it can also be a void energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "darkness_to_render_light_animation",
          "type": "PT_float",
          "default": "0.3",
          "optional": true
        },
        {
          "name": "energy_source",
          "description": "Must be a burner energy source when using \"burner\", otherwise it can also be a void energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "max_power",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "reversing_power_modifier",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "front_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "front_light_pictures",
          "type": "PT_RotatedSprite",
          "optional": true
        }
      ],
      "parent": "PT_RollingStock",
      "prototype": "Prototype",
      "name": "PT_Locomotive",
      "link": "/Prototype/Locomotive",
      "description": "A <a href=\"/Locomotive\" title=\"Locomotive\">locomotive</a>."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Must be an electric or void energy source.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage_per_tick",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "instruments",
          "type": "PT_ProgrammableSpeakerInstrument[]",
          "optional": false
        },
        {
          "name": "maximum_polyphony",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "audible_distance_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_ProgrammableSpeaker",
      "link": "/Prototype/ProgrammableSpeaker",
      "description": "A <a href=\"/Programmable_speaker\" title=\"Programmable speaker\">programmable speaker</a>."
    },
    {
      "properties": [],
      "parent": "PT_ItemWithInventory",
      "prototype": "Prototype",
      "name": "PT_BlueprintBook",
      "link": "/Prototype/BlueprintBook",
      "description": "A <a href=\"/Blueprint_book\" title=\"Blueprint book\">blueprint book</a>."
    },
    {
      "properties": [
        {
          "name": "result_inventory_size",
          "description": "The number of output slots.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "source_inventory_size",
          "description": "The number of input slots, but not more than 1.",
          "type": "PT_ItemStackIndex",
          "optional": false
        }
      ],
      "parent": "PT_CraftingMachine",
      "prototype": "Prototype",
      "name": "PT_Furnace",
      "link": "/Prototype/Furnace",
      "description": "A furnace. Normal furnaces only process \"smelting\" category recipes, but you can make furnaces that process other <a href=\"/Prototype/RecipeCategory\" title=\"Prototype/RecipeCategory\">recipe categories</a>. The difference to assembling machines is that furnaces automatically choose their recipe based on input."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "Defines how this inserter gets energy. The emissions set on the energy source are ignored so inserters cannot produce pollution.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "extension_speed",
          "type": "PT_double",
          "default": "nul",
          "optional": false
        },
        {
          "name": "hand_base_picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_base_shadow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_closed_picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_closed_shadow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_open_picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "hand_open_shadow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "insert_position",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "pickup_position",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "platform_picture",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "rotation_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "allow_burner_leech",
          "description": "Whether this burner inserter can fuel itself from the fuel inventory of the entity it is picking up items from.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "allow_custom_vectors",
          "description": "Whether pickup and insert position can be set run-time.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "chases_belt_items",
          "description": "Whether the inserter hand should move to the items it picks up from belts, leading to item chasing behaviour. If this is off, the inserter hand will stay in the center of the belt and any items picked up from the edges of the belt \"teleport\" to the inserter hand.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "default_stack_control_input_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_held_item",
          "description": "Whether the item that the inserter is holding should be drawn.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_inserter_arrow",
          "description": "Whether the yellow arrow that indicates the drop point of the inserter and the line that indicates the pickup position should be drawn.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "energy_per_movement",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "energy_per_rotation",
          "type": "PT_Energy",
          "default": "0",
          "optional": true
        },
        {
          "name": "filter_count",
          "description": "How many filters this inserter has. Maximum count of filtered items in inserter is 5.",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "hand_size",
          "description": "Used to determine how long the arm of the inserter is when drawing it. Does not affect gameplay. The lower the value, the straighter the arm. Increasing the value will give the inserter a bigger bend due to its longer parts.",
          "type": "PT_double",
          "default": "0.75",
          "optional": true
        },
        {
          "name": "stack",
          "description": "Whether this inserter is considered a stack inserter. Relevant for determining how <a href=\"/Inserter_capacity_bonus_(research)\" title=\"Inserter capacity bonus (research)\">Inserter capacity bonus (research)</a> applies to the inserter.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "stack_size_bonus",
          "description": " Stack size bonus that is inherent to the prototype without having to be researched.",
          "type": "PT_ItemCountType",
          "default": "0",
          "optional": true
        },
        {
          "name": "use_easter_egg",
          "description": "Whether the inserter should be able to fish <a href=\"/Raw_fish\" title=\"Raw fish\">fish</a>.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Inserter",
      "link": "/Prototype/Inserter",
      "description": "An <a href=\"/Inserter\" title=\"Inserter\">inserter</a>."
    },
    {
      "properties": [
        {
          "name": "selection_box_offsets",
          "description": "Array of 8 vectors.",
          "type": "PT_vector[]",
          "optional": false
        },
        {
          "name": "blue_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "default_blue_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        }
      ],
      "parent": "PT_RailSignalBase",
      "prototype": "Prototype",
      "name": "PT_RailChainSignal",
      "link": "/Prototype/RailChainSignal",
      "description": "A <a href=\"/Rail_chain_signal\" title=\"Rail chain signal\">rail chain signal</a>."
    },
    {
      "properties": [
        {
          "name": "automated_ammo_count",
          "type": "PT_ItemCountType",
          "optional": false
        },
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "entity_info_icon_shift",
          "description": "Shift of the \"alt-mode icon\" relative to the turret's position.",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_Turret",
      "prototype": "Prototype",
      "name": "PT_AmmoTurret",
      "link": "/Prototype/AmmoTurret",
      "description": "A turret that consumes ammo items."
    },
    {
      "properties": [
        {
          "name": "connection_points",
          "type": "PT_WireConnectionPoint[]",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_RotatedSprite",
          "optional": false
        },
        {
          "name": "supply_area_distance",
          "description": "<p>The \"radius\" of this pole's supply area. Corresponds to half of the \"supply area\" in the item tooltip. If this is 3.5, the pole will have a 7X7 supply area.</p><p>Max value is 64.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "active_picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "maximum_wire_distance",
          "description": "<p>The maximum distance between this pole and any other connected pole - if two poles are farther apart than this, they cannot be connected together directly. Corresponds to \"wire reach\" in the item tooltip.</p><p>Max value is 64.</p>",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "radius_visualisation_picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "track_coverage_during_build_by_moving",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_ElectricPole",
      "link": "/Prototype/ElectricPole",
      "description": "An electric pole - part of the <a href=\"/Electric_system\" title=\"Electric system\">electric system</a>."
    },
    {
      "properties": [
        {
          "name": "curved_rail",
          "description": "The name of an entity of the type \"curved-rail\". The first item to place of the rail must be this rail planner.",
          "type": "string",
          "optional": false
        },
        {
          "name": "straight_rail",
          "description": "The name of an entity of the type \"straight-rail\". The first item to place of the rail must be this rail planner.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_RailPlanner",
      "link": "/Prototype/RailPlanner",
      "description": "A <a href=\"/Rail_planner\" title=\"Rail planner\">rail planner</a>."
    },
    {
      "properties": [
        {
          "name": "animations",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "force_visibility",
          "description": " If the entity is not visible to a player, the player cannot select it.",
          "type": "PT_ForceCondition",
          "default": "all",
          "optional": true
        },
        {
          "name": "picture",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "random_variation_on_create",
          "description": "Whether a random graphics variation is chosen when placing the entity/creating it via script/creating it via map generation. If this is false, the entity will use the first variation instead of a random one.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Used to determine render order for entities with the same <code>render_layer</code> in the same position. Entities with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_SimpleEntityWithOwner",
      "link": "/Prototype/SimpleEntityWithOwner",
      "description": "Has a force, but unlike Prototype/SimpleEntityWithForce it is only attacked if the biters get stuck on it."
    },
    {
      "properties": [
        {
          "name": "life_time",
          "description": "Can't be 1.",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "pictures",
          "description": "Picture variation count and individual frame count must be equal to shadow variation count.",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": false
        },
        {
          "name": "render_layer_when_on_ground",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": false
        },
        {
          "name": "draw_shadow_when_on_ground",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "ended_in_water_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "ended_on_ground_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "fade_away_duration",
          "description": "Defaults to <code>life_time</code> / 5, but at most 60. If this is 0, it is silently changed to 1.",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "mining_particle_frame_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "movement_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "movement_modifier_when_on_ground",
          "type": "PT_double",
          "default": "0.8",
          "optional": true
        },
        {
          "name": "regular_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "regular_trigger_effect_frequency",
          "description": "Can't be 1.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "shadows",
          "description": "Shadow variation variation count and individual frame count must be equal to picture variation count.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "vertical_acceleration",
          "description": "Has to be >= -0.01 and <= 0.01.",
          "type": "PT_float",
          "default": "-0.004",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_Particle",
      "link": "/Prototype/Particle",
      "description": "An entity with a limited lifetime that can use trigger effects."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This will set the amount of items or fluids needed to craft, for the player to complete the achievement.",
          "type": "PT_MaterialAmountType",
          "optional": false
        },
        {
          "name": "limited_to_one_game",
          "description": "If this is false, the player carries over their statistics from this achievement through all their saves.",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "fluid_product",
          "description": "This will tell the achievement what fluid the player needs to craft, to get the achievement.",
          "type": "string",
          "optional": true
        },
        {
          "name": "item_product",
          "description": "This will tell the achievement what item the player needs to craft, to get the achievement.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_ProduceAchievement",
      "link": "/Prototype/ProduceAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player produces more than the specified amount of items."
    },
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_RotatedAnimationVariations",
          "optional": true
        },
        {
          "name": "animation_overlay",
          "description": "Variation count must be the same as <code>animation</code> variation count. Direction count must be the same as <code>animation</code> direction count. Frame count must be the same as <code>animation</code> frame count.",
          "type": "PT_RotatedAnimationVariations",
          "optional": true
        },
        {
          "name": "animation_overlay_final_render_layer",
          "type": "PT_RenderLayer",
          "default": "corpse",
          "optional": true
        },
        {
          "name": "animation_overlay_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "animation_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "direction_shuffle",
          "description": "An array of arrays of integers. Arrays are called \"groups\" and must all have the same size.",
          "type": "PT_uint16[][]",
          "optional": true
        },
        {
          "name": "dying_speed",
          "description": "Multiplier for #time_before_shading_off and #time_before_removed. Must be positive.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "final_render_layer",
          "type": "PT_RenderLayer",
          "default": "corpse",
          "optional": true
        },
        {
          "name": "ground_patch",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "ground_patch_fade_in_delay",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "ground_patch_fade_in_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "ground_patch_fade_out_duration",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "ground_patch_fade_out_start",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "ground_patch_higher",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "ground_patch_render_layer",
          "type": "PT_RenderLayer",
          "default": "ground-patch",
          "optional": true
        },
        {
          "name": "remove_on_entity_placement",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "remove_on_tile_placement",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "shuffle_directions_at_frame",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "splash",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "splash_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "splash_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "time_before_removed",
          "description": "Time in ticks this corpse lasts. May not be 0.",
          "type": "PT_int32",
          "default": "7200",
          "optional": true
        },
        {
          "name": "time_before_shading_off",
          "description": "Controls how long the corpse takes to fade, as in how long it takes to get from no transparency to full tranparency/removed. This time is not added to #time_before_removed, it is instead substracted from it. So by default, the corpse starts fading about 15 seconds before it gets removed.",
          "type": "PT_int32",
          "default": "900",
          "optional": true
        },
        {
          "name": "use_tile_color_for_ground_patch_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Corpse",
      "link": "/Prototype/Corpse",
      "description": "Used for corpses, for example the remnants when destroying buildings."
    },
    {
      "properties": [
        {
          "name": "bonus_gui_order",
          "type": "PT_Order",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_AmmoCategory",
      "link": "/Prototype/AmmoCategory",
      "description": "An ammo category. Each weapon has an ammo category, and can use any ammo with the same ammo category. Ammo categories can also be upgraded by technologies. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "capsule_action",
          "type": "PT_CapsuleAction",
          "optional": false
        },
        {
          "name": "radius_color",
          "description": "Color of the range radius that is shown around the player when they hold the capsule.",
          "type": "PT_Color",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_Capsule",
      "link": "/Prototype/Capsule",
      "description": "A capsule, for example a <a href=\"/Combat_robot_capsules\" title=\"Combat robot capsules\">combat robot capsule</a> or the <a href=\"/Raw_fish\" title=\"Raw fish\">raw fish</a>."
    },
    {
      "properties": [
        {
          "name": "icon_tintable",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "icon_tintables",
          "type": "PT_IconData[]",
          "optional": true
        },
        {
          "name": "icon_size",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "icon_tintable_mask",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "icon_tintable_masks",
          "type": "PT_IconData[]",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_ItemWithEntityData",
      "link": "/Prototype/ItemWithEntityData",
      "description": "ItemWithEntityData saves data associated with the entity that it represents, for example the content of the equipment grid of a car."
    },
    {
      "properties": [
        {
          "name": "construction_vector",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "smoke",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "sparks",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "working",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "working_light",
          "type": "PT_LightDefinition",
          "optional": true
        }
      ],
      "parent": "PT_RobotWithLogisticInterface",
      "prototype": "Prototype",
      "name": "PT_ConstructionRobot",
      "link": "/Prototype/ConstructionRobot",
      "description": "A <a href=\"/Construction_robot\" title=\"Construction robot\">construction robot</a>."
    },
    {
      "properties": [],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_NoiseLayer",
      "link": "/Prototype/NoiseLayer",
      "description": "A noise layer used by the <a href=\"/Types/AutoplaceSpecification#noise_layer\" title=\"Types/AutoplaceSpecification\">autoplace system</a>. For a list of built-in layers, see <a href=\"/Data.raw#noise-layer\" title=\"Data.raw\">Data.raw#noise-layer</a>."
    },
    {
      "properties": [
        {
          "name": "action",
          "type": "PT_ShortcutAction",
          "optional": false
        },
        {
          "name": "icon",
          "description": "Scales to fit a 16x16-pixel square.<br> Note: The scale that can be defined in the sprite may not behave as expected because the game always scales the sprite to fill the GUI slot.",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "associated_control_input",
          "description": "Name of a custom input or vanilla control. Used to show the keybind in the tooltip of the shortcut.",
          "type": "string",
          "optional": true
        },
        {
          "name": "disabled_icon",
          "description": "The icon used when the shortcut is shown in the quickbar, and is not usable.<br> Note: The scale that can be defined in the sprite may not behave as expected because the game always scales the sprite to fill the GUI slot.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "disabled_small_icon",
          "description": " The icon used in the panel for visible shortcuts, when the shortcut is not usable.<br> Note: The scale that can be defined in the sprite may not behave as expected because the game always scales the sprite to fill the GUI slot.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "item_to_spawn",
          "description": "Name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>. The item to create when clicking on a shortcut with the action set to \"spawn-item\". The item must have the <a href=\"/Types/ItemPrototypeFlags#.22spawnable.22\" title=\"Types/ItemPrototypeFlags\">\"spawnable\"</a> flag set.",
          "type": "string",
          "optional": true
        },
        {
          "name": "small_icon",
          "description": " The icon used in the panel for visible shortcuts, when the shortcut is usable.<br>Note: The scale that can be defined in the sprite may not behave as expected because the game always scales the sprite to fill the GUI slot.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "style",
          "description": "One of \"default\", \"blue\", \"red\" and \"green\".",
          "type": "string",
          "default": "default",
          "optional": true
        },
        {
          "name": "technology_to_unlock",
          "description": "Name of a Prototype/Technology. The technology that must be researched before this shortcut can be used.",
          "type": "string",
          "optional": true
        },
        {
          "name": "toggleable",
          "description": "Must be enabled for the Factorio API to be able to set the toggled state on the shortcut button, see <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/LuaPlayer.html#LuaPlayer.set_shortcut_toggled\">LuaPlayer.set_shortcut_toggled</a>.",
          "type": "PT_bool",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_Shortcut",
      "link": "/Prototype/Shortcut",
      "description": "Definition for a shortcut button in the <a href=\"/Shortcut_bar\" title=\"Shortcut bar\">shortcut bar</a>.<br>This is <i>not</i> a custom keybinding (keyboard shortcut), for that see <a href=\"/Prototype/CustomInput\" title=\"Prototype/CustomInput\">Prototype/CustomInput</a>"
    },
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "affected_by_wind",
          "description": "Smoke always moves randomly unless <code>movement_slow_down_factor</code> is 0. If <code>affected_by_wind</code> is true, the smoke will also be moved by wind.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "cyclic",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "duration",
          "description": "May not be 0 if cyclic is true.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "end_scale",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "fade_away_duration",
          "description": "<code>fade_in_duration</code> + <code>fade_away_duration</code> must be &lt;= <code>duration</code>.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "fade_in_duration",
          "description": "<code>fade_in_duration</code> + <code>fade_away_duration</code> must be &lt;= <code>duration</code>.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "glow_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "glow_fade_away_duration",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "movement_slow_down_factor",
          "description": "Value between 0 and 1, with 0 being no movement.",
          "type": "PT_double",
          "default": "0.995",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "smoke",
          "optional": true
        },
        {
          "name": "show_when_smoke_off",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spread_duration",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "start_scale",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "name": "PT_Smoke",
      "link": "/Prototype/Smoke",
      "description": "Abstract entity that has an animation."
    },
    {
      "properties": [
        {
          "name": "pictures",
          "type": "PT_WallPictures",
          "optional": false
        },
        {
          "name": "circuit_connector_sprites",
          "type": "PT_CircuitConnectorSprites",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_point",
          "type": "PT_WireConnectionPoint",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "connected_gate_visualization",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "default_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "visual_merge_group",
          "description": "Different walls will visually connect to each other if their merge group is the same.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "wall_diode_green",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "wall_diode_green_light_bottom",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_green_light_left",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_green_light_right",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_green_light_top",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_red",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "wall_diode_red_light_bottom",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_red_light_left",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_red_light_right",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "wall_diode_red_light_top",
          "type": "PT_LightDefinition",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Wall",
      "link": "/Prototype/Wall",
      "description": "A <a href=\"/Wall\" title=\"Wall\">wall</a>."
    },
    {
      "properties": [
        {
          "name": "colors",
          "description": "Array. Mandatory if <code>variations</code> exists.",
          "type": "PT_Color[]",
          "optional": true
        },
        {
          "name": "darkness_of_burnt_tree",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Either this or <code>variations</code> must exist.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "variation_weights",
          "type": "PT_double[]",
          "optional": true
        },
        {
          "name": "variations",
          "description": "Array. Can't be empty. Either this or <code>pictures</code> must exist.",
          "type": "PT_TreePrototypeVariation[]",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Tree",
      "link": "/Prototype/Tree",
      "description": "A <a href=\"/Tree\" title=\"Tree\">tree</a>."
    },
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "default_green_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_orange_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "default_red_output_signal",
          "type": "PT_SignalIDConnector",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "green_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "orange_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "rail_piece",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "red_light",
          "type": "PT_LightDefinition",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_RailSignalBase",
      "link": "/Prototype/RailSignalBase",
      "description": "The abstract base entity for both rail signals."
    },
    {
      "properties": [
        {
          "name": "speed",
          "description": "<p>The speed of the belt (since 0.17): <code>speed × 480 = x Items/second</code></p><p>The raw value is expressed as the number of tiles traveled by each item on the belt per tick, relative to the belt's maximum density - e.g. <code>x items/second ÷ (4 items/lane × 2 lanes/belt × 60 ticks/second) = &lt;speed&gt; belts/tick</code> where a \"belt\" is the size of one tile. See <a href=\"/Transport_belts/Physics\" title=\"Transport belts/Physics\">Transport_belts/Physics</a> for more details.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "animation_speed_coefficient",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "belt_animation_set",
          "description": "Either this, or all of the properties below this one have to present.",
          "type": "PT_TransportBeltConnectableBeltAnimationSet",
          "optional": true
        },
        {
          "name": "belt_horizontal",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "belt_vertical",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ending_bottom",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ending_patch",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "ending_side",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ending_top",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ends_with_stopper",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "starting_bottom",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "starting_side",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "starting_top",
          "description": "Mandatory if <code>belt_animation_set</code> is not present.",
          "type": "PT_AnimationType",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_TransportBeltConnectable",
      "link": "/Prototype/TransportBeltConnectable",
      "description": "Abstract class that anything that is a belt or can connect to belts uses"
    },
    {
      "properties": [
        {
          "name": "particle_horizontal_speed",
          "description": "Must be larger than 0. particle_horizontal_speed has to be greater than particle_horizontal_speed_deviation.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "particle_horizontal_speed_deviation",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "particle_spawn_interval",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "particle_vertical_acceleration",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "ground_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "initial_action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "oriented_particle",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "particle",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "particle_alpha_per_part",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_buffer_size",
          "description": "Has to be less than 256.",
          "type": "PT_uint32",
          "default": "20",
          "optional": true
        },
        {
          "name": "particle_end_alpha",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_fade_out_duration",
          "description": "Will be set to 1 by the game if less than 1.",
          "type": "PT_uint16",
          "default": "65553",
          "optional": true
        },
        {
          "name": "particle_fade_out_threshold",
          "description": "Value between 0 and 1.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_loop_exit_threshold",
          "description": "Value between 0 and 1.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "particle_loop_frame_count",
          "description": "Will be set to 1 by the game if less than 1.",
          "type": "PT_uint16",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_scale_per_part",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_spawn_timeout",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "particle_start_alpha",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "particle_start_scale",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "progress_to_create_smoke",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "shadow",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "shadow_scale_enabled",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "smoke_sources",
          "type": "PT_SmokeSource[]",
          "optional": true
        },
        {
          "name": "special_neutral_target_damage",
          "type": "PT_DamagePrototype",
          "optional": true
        },
        {
          "name": "spine_animation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "stream_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "target_position_deviation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "width",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_FluidStream",
      "link": "/Prototype/FluidStream",
      "description": "Used for example for the handheld flamethrower."
    },
    {
      "properties": [
        {
          "name": "animations",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "call_for_help_radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_count_of_owned_units",
          "description": "Count of enemies this spawner can sustain.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_friends_around_to_spawn",
          "description": "How many friendly units are required within the <a href=\"#spawning_radius\">spawning_radius</a> of this spawner for it to stop producing more units.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_richness_for_spawn_shift",
          "description": "Max richness to determine spawn shift. Spawn shift is linear interpolation between 0 and maxSpawnShift.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_spawn_shift",
          "description": "Caps how much richness can be added on top of evolution when spawning units. (See also <a rel=\"nofollow\" class=\"external autonumber\" href=\"https://www.reddit.com/r/factorio/comments/8pjscm/friday_facts_246_the_gui_update_part_3/e0bttnp/\">[1]</a>)",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_absorption_absolute",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_absorption_proportional",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "result_units",
          "description": "Array of the <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">entities</a> that this spawner can spawn and their spawn probabilities. The sum of probabilities is expected to be 1.0. The array must not be empty.",
          "type": "PT_UnitSpawnDefinition[]",
          "optional": false
        },
        {
          "name": "spawning_cooldown",
          "description": "Ticks for cooldown after unit is spawned.",
          "type": "PT_two[] PT_double",
          "optional": false
        },
        {
          "name": "spawning_radius",
          "description": "How far from the spawner can the units be spawned.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "spawning_spacing",
          "description": "What spaces should be between the spawned units.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "dying_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "integration",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "max_darkness_to_spawn",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "min_darkness_to_spawn",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_EnemySpawner",
      "link": "/Prototype/EnemySpawner",
      "description": "Can spawn entities. Used for biter/spitter nests."
    },
    {
      "properties": [
        {
          "name": "energy_source",
          "description": "The energy source of this mining drill.",
          "type": "PT_EnergySource",
          "optional": false
        },
        {
          "name": "energy_usage",
          "description": "The amount of energy used by the drill while mining. Can't be less than or equal to 0.",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "mining_speed",
          "description": "The speed of this drill.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "resource_categories",
          "description": "The names of the <a href=\"/Prototype/ResourceCategory\" title=\"Prototype/ResourceCategory\">Prototype/ResourceCategory</a> that can be mined by this drill. For a list on built-in categories, see <a href=\"/Data.raw#resource-category\" title=\"Data.raw\">Data.raw#resource-category</a>.<br>Note: Categories containing resources which produce items, fluids, or items+fluids may be combined on the same entity, but may not work as expected. Examples: Miner does not rotate fluid-resulting resources until depletion. Fluid isn't output (fluid resource change and fluidbox matches previous fluid). Miner with no vector_to_place_result can't output an item result and halts.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "resource_searching_radius",
          "description": "<p>The distance from the centre of the mining drill to search for resources in.</p><p>This is 2.49 for electric mining drills (a 5x5 area) and 0.99 for burner mining drills (a 2x2 area). The drill searches resource outside its natural boundary box, which is 0.01 (the middle of the entity); making it 2.5 and 1.0 gives it another block radius.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "vector_to_place_result",
          "description": "The position where any item results are placed, when the mining drill is facing north (default direction).",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "allowed_effects",
          "type": "PT_EffectTypeLimitation",
          "optional": true
        },
        {
          "name": "animations",
          "description": "Loaded only if <code>graphics_set</code> does not exist.",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "base_picture",
          "description": "Used by the <a href=\"/Pumpjack\" title=\"Pumpjack\">pumpjack</a> to have a static 4 way sprite.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "base_productivity",
          "description": "Productivity bonus that this machine always has.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "base_render_layer",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": true
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "description": "The maximum circuit wire distance for this entity.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "graphics_set",
          "type": "PT_MiningDrillGraphicsSet",
          "optional": true
        },
        {
          "name": "input_fluid_box",
          "type": "PT_FluidBox",
          "optional": true
        },
        {
          "name": "module_specification",
          "type": "PT_ModuleSpecification",
          "optional": true
        },
        {
          "name": "monitor_visualization_tint",
          "description": "When this mining drill is connected to the circuit network, the resource that it is reading (either the entire resource patch, or the resource in the mining area of the drill, depending on circuit network setting), is tinted in this color when mousing over the mining drill.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "output_fluid_box",
          "type": "PT_FluidBox",
          "optional": true
        },
        {
          "name": "radius_visualisation_picture",
          "description": "The sprite used to show the range of the mining drill.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "wet_mining_graphics_set",
          "type": "PT_MiningDrillGraphicsSet",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_MiningDrill",
      "link": "/Prototype/MiningDrill",
      "description": "A mining drill."
    },
    {
      "properties": [
        {
          "name": "durability",
          "description": "The durability of this tool. Must be positive. Mandatory if <code>infinite</code> is false.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "durability_description_key",
          "description": "May not be longer than 200 characters.",
          "type": "string",
          "default": "description.durability-key",
          "optional": true
        },
        {
          "name": "durability_description_value",
          "description": "May not be longer than 200 characters.",
          "type": "string",
          "default": "description.durability-value",
          "optional": true
        },
        {
          "name": "infinite",
          "description": "Whether this tool has infinite durability.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_Tool",
      "link": "/Prototype/Tool",
      "description": "Items with a \"durability\". Used for <a href=\"/Science_pack\" title=\"Science pack\">science packs</a>."
    },
    {
      "properties": [
        {
          "name": "power",
          "description": "How much power should be provided.",
          "type": "PT_Energy",
          "optional": false
        }
      ],
      "parent": "PT_Equipment",
      "prototype": "Prototype",
      "name": "PT_SolarPanelEquipment",
      "link": "/Prototype/SolarPanelEquipment",
      "description": "Used by <a href=\"/Portable_solar_panel\" title=\"Portable solar panel\">portable solar panel</a>."
    },
    {
      "properties": [
        {
          "name": "alert_when_damaged",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "attack_reaction",
          "type": "PT_AttackReaction",
          "optional": true
        },
        {
          "name": "corpse",
          "description": "Specifies the name(s) of the <a href=\"/Prototype/Corpse\" title=\"Prototype/Corpse\">Prototype/Corpse</a> entity to be used when this entity dies.",
          "type": "string|strings[]",
          "optional": true
        },
        {
          "name": "create_ghost_on_death",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "damaged_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "dying_explosion",
          "description": "Either one <a href=\"/Types/ExplosionDefinition\" title=\"Types/ExplosionDefinition\">ExplosionDefinition</a> or an array of them. The entities that are spawned in place of this one when it dies.",
          "type": "PT_ExplosionDefinition|PT_ExplosionDefinition[]",
          "optional": true
        },
        {
          "name": "dying_trigger_effect",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "healing_per_tick",
          "description": "The amount of health automatically regenerated per tick. The entity must be active for this to work.<br>Trees will regenerate every 60 ticks with <code>healing_per_tick × 60</code> and they don't need to be active.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "hide_resistances",
          "description": "Whether the resistances of this entity should be hidden in the entity tooltip.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "integration_patch",
          "description": "Sprite drawn on ground under the entity to make it feel more integrated into the ground.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "integration_patch_render_layer",
          "type": "PT_RenderLayer",
          "default": "lower-object",
          "optional": true
        },
        {
          "name": "loot",
          "description": "The loot is dropped on the ground when the entity is killed.",
          "type": "PT_Loot",
          "optional": true
        },
        {
          "name": "max_health",
          "description": "The unit health can never go over the maximum. Default health of units on creation is set to max. Must be greater than 0.",
          "type": "PT_float",
          "default": "10",
          "optional": true
        },
        {
          "name": "random_corpse_variation",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "repair_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "repair_speed_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "resistances",
          "type": "PT_Resistances",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "name": "PT_EntityWithHealth",
      "link": "/Prototype/EntityWithHealth",
      "description": "Abstract base of all entities with health in the game."
    },
    {
      "properties": [
        {
          "name": "equipment_categories",
          "description": "An array of <a href=\"/Prototype/EquipmentCategory\" title=\"Prototype/EquipmentCategory\">Prototype/EquipmentCategory</a> names. Only <a href=\"/Prototype/Equipment\" title=\"Prototype/Equipment\">Prototype/Equipment</a> with at least one of these categories can be inserted into the grid.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "height",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "width",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "locked",
          "description": "Whether this locked from user interaction which means that the user cannot put equipment into or take equipment from this equipment grid.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_EquipmentGrid",
      "link": "/Prototype/EquipmentGrid",
      "description": "The prototype of an equipment grid, for example the one used in a <a href=\"/Power_armor\" title=\"Power armor\">power armor</a>. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [],
      "parent": "PT_EntityParticle",
      "prototype": "Prototype",
      "name": "PT_LeafParticle",
      "link": "/Prototype/LeafParticle",
      "description": "Deprecated in 0.18. Particles that are exclusively meant for leaves of trees. The type \"leaf-particle\" has been obsoleted and cannot be created. See <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a> for particles."
    },
    {
      "properties": [
        {
          "name": "category",
          "description": "The name of a <a href=\"/Prototype/ModuleCategory\" title=\"Prototype/ModuleCategory\">Prototype/ModuleCategory</a>. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules of the same category with higher tier modules.",
          "type": "string",
          "optional": false
        },
        {
          "name": "effect",
          "type": "PT_Effect",
          "optional": false
        },
        {
          "name": "tier",
          "description": "Tier of the module inside its category. Used when upgrading modules: Ctrl + click modules into an entity and it will replace lower tier modules with higher tier modules if they have the same category.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "art_style",
          "description": "Chooses with what art style the module is shown inside beacons. See <a href=\"/Types/BeaconModuleVisualizations#art_style\" title=\"Types/BeaconModuleVisualizations\">Types/BeaconModuleVisualizations#art_style</a>. Vanilla uses \"vanilla\" here.",
          "type": "string",
          "optional": true
        },
        {
          "name": "beacon_tint",
          "type": "PT_TintColors",
          "optional": true
        },
        {
          "name": "limitation",
          "description": "Array of recipe names this module can be used on. If empty, the module can be used on all recipes.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "limitation_blacklist",
          "description": "<p>Array of recipe names this module can <b>not</b> be used on, implicitly allowing its use on all other recipes. This property has no effect if set to an empty table.</p><p>Note that the game converts this into a normal list of limitations internally, so reading <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/LuaItemPrototype.html#LuaItemPrototype.limitations\">LuaItemPrototype.limitations</a> at runtime will be the product of both ways of defining limitations.</p>",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "limitation_message_key",
          "description": "Mandatory when <code>limitation</code> is present. The locale key of the message that is shown when the player attempts to use the module on a recipe it can't be used on. The locale key will be prefixed with <code>item-limitation.</code> (the \"category\" of the locale) by the game.",
          "type": "string",
          "optional": true
        },
        {
          "name": "requires_beacon_alt_mode",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_Module",
      "link": "/Prototype/Module",
      "description": "A <a href=\"/Module\" title=\"Module\">module</a>."
    },
    {
      "properties": [
        {
          "name": "allow_passengers",
          "description": "Determines whether this vehicle accepts passengers. This includes both drivers and gunners, if applicable.",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "braking_force",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "braking_power",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "energy_per_hit_point",
          "description": "The (movement) energy used per hit point (1 hit point = 1 health damage) taken and dealt for this vehicle during collisions. The smaller the number, the more damage this vehicle and the rammed entity take during collisions: <code>damage = energy / energy_per_hit_point</code>.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "friction",
          "description": "Two different ways to set friction force. At least one must exist. Must be positive.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "friction_force",
          "description": "Two different ways to set friction force. At least one must exist. Must be positive.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "weight",
          "description": "Must be positive. Weight of the entity used for physics calculation when car hits something.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "crash_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "equipment_grid",
          "description": "The name of the <a href=\"/Prototype/EquipmentGrid\" title=\"Prototype/EquipmentGrid\">equipment grid</a> this vehicle has.",
          "type": "string",
          "optional": true
        },
        {
          "name": "minimap_representation",
          "description": "The sprite that represents this vehicle on the map/minimap.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "selected_minimap_representation",
          "description": "The sprite that represents this vehicle on the map/minimap when it is selected.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "sound_minimum_speed",
          "description": "Must be positive. Sound is scaled by speed.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "sound_scaling_ratio",
          "description": "Must be positive. Sound is scaled by speed.",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "stop_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "stop_trigger_speed",
          "type": "PT_double",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "terrain_friction_modifier",
          "description": "Must be in the [0, 1] interval.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_Vehicle",
      "link": "/Prototype/Vehicle",
      "description": "Abstract base of all vehicles."
    },
    {
      "properties": [
        {
          "name": "minimum_damage",
          "description": "This will trigger the achievement, if the amount of damage taken by the dealer, is more than this.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "should_survive",
          "description": "This sets the achievement to only trigger, if you survive the minimum amount of damage. If you don't need to survive, false.",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "type_of_dealer",
          "description": "This will trigger the achievement, if the player takes damage from this specific entity type.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_PlayerDamagedAchievement",
      "link": "/Prototype/PlayerDamagedAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player receives damage."
    },
    {
      "properties": [
        {
          "name": "pictures",
          "description": "Must contain at least 1 picture.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "autoplace",
          "type": "PT_AutoplaceSpecification",
          "optional": true
        },
        {
          "name": "collision_box",
          "description": "Must contain the [0,0] point. Max radius of the collision box is 8.",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "collision_mask",
          "type": "PT_CollisionMask",
          "default": "doodad-layer",
          "optional": true
        },
        {
          "name": "grows_through_rail_path",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "decorative",
          "optional": true
        },
        {
          "name": "tile_layer",
          "description": "Mandatory if <code>render_layer</code> = \"decals\". This int16 is converted to a <a href=\"/Types/RenderLayer\" title=\"Types/RenderLayer\">RenderLayer</a> internally.",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "trigger_effect",
          "description": "Called by <a href=\"/Types/DestroyDecorativesTriggerEffectItem\" title=\"Types/DestroyDecorativesTriggerEffectItem\">DestroyDecorativesTriggerEffectItem</a>.",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "walking_sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_Decorative",
      "link": "/Prototype/Decorative",
      "description": "Simple decorative purpose objects on the map, they have no health and some of them are removed when the player builds over. Usually used for grass patches, roots, small plants etc. Only 255 instances of this prototype may be defined."
    },
    {
      "properties": [
        {
          "name": "fluid_box",
          "description": "The area of the entity where fluid/gas inputs, and outputs.",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "horizontal_window_bounding_box",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_PipePictures",
          "optional": false
        },
        {
          "name": "vertical_window_bounding_box",
          "type": "PT_BoundingBox",
          "optional": false
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Pipe",
      "link": "/Prototype/Pipe",
      "description": "An entity to transport gas and fluids over a distance, and between machines."
    },
    {
      "properties": [
        {
          "name": "body",
          "description": "Body segment of the beam. Must have at least 1 variation.",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "damage_interval",
          "description": "Damage interval can't be 0. A value of 1 will cause the attack to be applied each tick.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "head",
          "description": "Head segment of the beam.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "tail",
          "description": "Tail segment of the beam.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "width",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "action_triggered_automatically",
          "description": "Whether this beams should trigger its action every damage_interval. If false, the action is instead triggered when its owner triggers shooting.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "body_light",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "ending",
          "description": "End point of the beam.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ending_light",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ground_light_animations",
          "type": "PT_BeamLightAnimations",
          "optional": true
        },
        {
          "name": "head_light",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "light_animations",
          "description": "Lights are additively accumulated onto lightmap, which is multiplicatively rendered on the game world.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=435042#p435042\">[1]</a>",
          "type": "PT_BeamLightAnimations",
          "optional": true
        },
        {
          "name": "random_end_animation_rotation",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "random_target_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "start",
          "description": "Start point of the beam.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "start_light",
          "description": "This and the below properties ending in \"_light\" are considered deprecated. If they are present, then <code>light_animations</code> and <code>ground_light_animations</code> are not loaded.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "tail_light",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "target_offset",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "transparent_start_end_animations",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_Beam",
      "link": "/Prototype/Beam",
      "description": "Used as a laser beam."
    },
    {
      "properties": [
        {
          "name": "achievement_unlocked",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "alert_destroyed",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "armor_insert",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "armor_remove",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "axe_fighting",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "axe_mining_ore",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "blueprint_selection_ended",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "blueprint_selection_started",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_blueprint_small",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_blueprint_medium",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_blueprint_large",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_large",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_medium",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "build_small",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "cancel_deconstruction_selection_ended",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "cancel_deconstruction_selection_started",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "cannot_build",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "clear_cursor",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "confirm",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "console_message",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "copy_activated",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "crafting_finished",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "cut_activated",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruct_big",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruct_medium",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruct_robot",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruct_small",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruction_selection_ended",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "deconstruction_selection_started",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "default_manual_repair",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "drop_item",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "entity_settings_pasted",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "entity_settings_copied",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "game_lost",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "game_won",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "gui_click",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "inventory_click",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "inventory_move",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "item_deleted",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "item_spawned",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "list_box_click",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "metal_walking_sound",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "mining_wood",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "new_objective",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "paste_activated",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "picked_up_item",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "rail_plan_start",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "research_completed",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "rotated_big",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "rotated_medium",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "rotated_small",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "scenario_message",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "smart_pipette",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "switch_gun",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "tutorial_notice",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "undo",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "upgrade_selection_ended",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "upgrade_selection_started",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "wire_connect_pole",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "wire_disconnect",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "wire_pickup",
          "type": "PT_SoundType",
          "optional": false
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_UtilitySounds",
      "link": "/Prototype/UtilitySounds",
      "description": "Sounds used by the game that are not specific to certain prototypes."
    },
    {
      "properties": [
        {
          "name": "flow_length_in_ticks",
          "description": "<p>Must be positive.</p><p>Used for determining the x position inside the flow_sprite when drawing the storage tank. Does not affect gameplay.</p><p>The x position of the sprite will be <code>((game.tick&nbsp;% flow_length_in_ticks) ÷ flow_length_in_ticks) × (flow_sprite.width - 32)</code>. This means, that over flow_length_in_ticks ticks, the part of the flow_sprite that is drawn in-game is incrementally moved from most-left to most-right inside the actual sprite, that part always has a width of 32px. After flow_length_in_ticks, the part of the flow_sprite that is drawn will start from the left again.</p>",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "fluid_box",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_StorageTankPictures",
          "optional": false
        },
        {
          "name": "window_bounding_box",
          "description": "The location of the window showing the contents. Note that for window_background the width and height are determined by the sprite and window_bounding_box only determines the drawing location. For fluid_background the width is determined by the sprite and the height and drawing location are determined by window_bounding_box.",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "circuit_connector_sprites",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_CircuitConnectorSprites[]",
          "optional": true
        },
        {
          "name": "circuit_wire_connection_points",
          "description": "Mandatory if circuit_wire_max_distance > 0.",
          "type": "PT_WireConnectionPoint[]",
          "optional": true
        },
        {
          "name": "circuit_wire_max_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "draw_circuit_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_copper_wires",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "scale_info_icons",
          "description": "If the icons of fluids shown in alt-mode should be scaled to the storage tank's size.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "two_direction_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_StorageTank",
      "link": "/Prototype/StorageTank",
      "description": "A <a href=\"/Storage_tank\" title=\"Storage tank\">storage tank</a>."
    },
    {
      "properties": [
        {
          "name": "animations",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_AnimationVariations",
          "optional": true
        },
        {
          "name": "picture",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "pictures",
          "description": "Must have one of 'picture', 'pictures' or 'animations' defined.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "random_variation_on_create",
          "description": "Whether a random graphics variation is chosen when placing the entity/creating it via script/creating it via map generation. If this is false, the entity will use the first variation instead of a random one.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Used to determine render order for entities with the same <code>render_layer</code> in the same position. Entities with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_SimpleEntityWithForce",
      "link": "/Prototype/SimpleEntityWithForce",
      "description": "This entity will be a priority target for units/turrets, who will choose to attack it even if it does not block their path.  Use <a href=\"/Prototype/SimpleEntityWithOwner\" title=\"Prototype/SimpleEntityWithOwner\">Prototype/SimpleEntityWithOwner</a> for entities that are only attacked when they block enemies."
    },
    {
      "properties": [
        {
          "name": "artillery_range_visualization_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "bonus_gui_ordering",
          "type": "PT_UtilityConstantsBonusGuiOrdering",
          "optional": false
        },
        {
          "name": "building_buildable_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "building_buildable_too_far_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "building_ignorable_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "building_no_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "building_not_buildable_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "capsule_range_visualization_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart",
          "type": "PT_UtilityConstantsChart",
          "optional": false
        },
        {
          "name": "checkerboard_black",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "checkerboard_white",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clipboard_history_size",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "color_filters",
          "type": "PT_UtilityConstantsColorFilter[]",
          "optional": false
        },
        {
          "name": "count_button_size",
          "type": "PT_int",
          "optional": false
        },
        {
          "name": "daytime_color_lookup",
          "type": "PT_DaytimeColorLookupTable",
          "optional": false
        },
        {
          "name": "deconstruct_mark_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_alert_icon_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "default_enemy_force_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_other_force_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_player_force_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_scorch_mark_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "disabled_recipe_slot_background_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "disabled_recipe_slot_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "dynamic_recipe_overload_factor",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "enabled_recipe_slot_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "entity_button_background_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "entity_renderer_search_box_limits",
          "type": "table",
          "optional": false
        },
        {
          "name": "equipment_default_background_border_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "equipment_default_background_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "equipment_default_grabbed_background_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "filter_outline_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "flying_text_ttl",
          "description": "Must be >= 1.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "forced_enabled_recipe_slot_background_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "ghost_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "gui_remark_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "icon_shadow_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "icon_shadow_inset",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "icon_shadow_radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "icon_shadow_sharpness",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "inventory_width",
          "description": "Must be in range [1, 100].",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "item_outline_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "item_outline_inset",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "item_outline_radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "item_outline_sharpness",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "light_renderer_search_distance_limit",
          "description": "Can be set to anything from range 0 to 255, but larger values will be clamped to 160. Setting it to larger values can have performance impact (growing geometrically).",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "main_menu_background_image_location",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "main_menu_background_vignette_intensity",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "main_menu_background_vignette_sharpness",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "main_menu_simulations",
          "description": "The strings represent the names of the simulations.",
          "type": "table<string, PT_SimulationDefinition>",
          "optional": false
        },
        {
          "name": "manual_rail_building_reach_modifier",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "map_editor",
          "type": "PT_UtilityConstantsMapEditor",
          "optional": false
        },
        {
          "name": "max_terrain_building_size",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "maximum_recipe_overload_multiplier",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "medium_area_size",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "medium_blueprint_area_size",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "minimum_recipe_overload_multiplier",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "missing_preview_sprite_location",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "module_inventory_width",
          "description": "Must be in range [1, 100].",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "normalised_achievement_icon_size",
          "description": "Must be >= 1.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "player_colors",
          "description": "The inner tables have the following key/value pairs. The table with name = default must exist and be the first member of the array.",
          "type": "PT_UtilityConstantsPlayerColor[]",
          "optional": false
        },
        {
          "name": "rail_planner_count_button_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "rail_segment_colors",
          "type": "PT_Color[]",
          "optional": false
        },
        {
          "name": "recipe_step_limit",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "script_command_console_chat_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "select_group_row_count",
          "description": "Must be in range [1, 100].",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "select_slot_row_count",
          "description": "Must be in range [1, 100].",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "server_command_console_chat_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "small_area_size",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "small_blueprint_area_size",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "tile_ghost_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "tooltip_monitor_edge_border",
          "description": "Must be >= 1.",
          "type": "PT_int32",
          "optional": false
        },
        {
          "name": "train_button_hovered_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "train_destination_full_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "train_inactivity_wait_condition_default",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_no_path_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "train_path_finding",
          "type": "PT_UtilityConstantsTrainPathFinding",
          "optional": false
        },
        {
          "name": "train_temporary_stop_wait_time",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_time_wait_condition_default",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_distortion_far",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_distortion_near",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_speed_far",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_speed_near",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_strength_far",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_leaf_distortion_strength_near",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "tree_shadow_roughness",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "tree_shadow_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "turret_range_visualization_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "tutorial_notice_icon_size",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "unit_group_max_pursue_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "unit_group_pathfind_resolution",
          "type": "PT_int8",
          "optional": false
        },
        {
          "name": "zoom_to_world_can_use_nightvision",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "zoom_to_world_daytime_color_lookup",
          "type": "PT_DaytimeColorLookupTable",
          "optional": false
        },
        {
          "name": "zoom_to_world_effect_strength",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "default_alert_icon_scale_by_type",
          "type": "table<string, PT_float>",
          "optional": true
        },
        {
          "name": "default_alert_icon_shift_by_type",
          "type": "table<string, PT_vector>",
          "optional": true
        },
        {
          "name": "default_trigger_target_mask_by_type",
          "description": "The strings are entity types.",
          "type": "table<string, PT_TriggerTargetMask>",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_UtilityConstants",
      "link": "/Prototype/UtilityConstants",
      "description": "Constants used by the game that are not specific to certain prototypes. See <a rel=\"nofollow\" class=\"external text\" href=\"https://github.com/wube/factorio-data/blob/master/core/prototypes/utility-constants.lua\">utility-constants.lua</a> for the values used by the base game."
    },
    {
      "properties": [
        {
          "name": "reveal_map",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "chart_picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "final_action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "height_from_ground",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "rotatable",
          "description": "Whether the picture of the projectile is rotated to match the direction of travel.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "shadow",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "parent": "PT_Entity",
      "prototype": "Prototype",
      "name": "PT_ArtilleryProjectile",
      "link": "/Prototype/ArtilleryProjectile",
      "description": "The projectile shot by <a href=\"/Artillery\" title=\"Artillery\">artillery</a>."
    },
    {
      "properties": [
        {
          "name": "additional_pastable_entities",
          "description": "Names of the entity prototypes this entity prototype can be pasted on to in addition to the standard supported types.<br>This is used to allow copying between types that aren't compatible on the C++ code side, by allowing mods to receive the <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#on_entity_settings_pasted\">on_entity_settings_pasted</a> event for the given entity and do the setting pasting via script.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "alert_icon_scale",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "alert_icon_shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "allow_copy_paste",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "autoplace",
          "description": "Used to specify the rules for placing this entity during map generation.",
          "type": "PT_AutoplaceSpecification",
          "default": "nil",
          "optional": true
        },
        {
          "name": "build_base_evolution_requirement",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "build_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "close_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "collision_box",
          "description": "<p>Specification of the entity collision boundaries.</p><p>Empty collision box is used for smoke, projectiles, particles, explosions etc.</p><p><div class=\"mw-highlight mw-content-ltr\" dir=\"ltr\"><pre><span></span><span class=\"n\">collision_box</span> <span class=\"o\">=</span> <span class=\"p\">{{</span><span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.4</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">}}</span></pre></div></p><p>The {0,0} coordinate in the collision box will match the entity position.</p><p>It should be near the center of the collision box, to keep correct entity drawing order. It must include the {0,0} coordinate.</p><p>Note, that for buildings, it is customary to leave 0.1 wide border between the edge of the tile and the edge of the building, this lets the player move between the building and electric poles/inserters etc.</p>",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "collision_mask",
          "description": "Two entities can collide only if they share a layer from the collision mask.",
          "type": "PT_CollisionMask",
          "optional": true
        },
        {
          "name": "created_effect",
          "description": "The effect/trigger that happens when the entity is placed.",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "created_smoke",
          "description": "The smoke that is shown when the entity is placed.",
          "type": "PT_CreateTrivialSmokeEffectItem",
          "default": "smoke-building",
          "optional": true
        },
        {
          "name": "drawing_box",
          "description": "<p>Specification of space needed to see the whole entity.</p><p>This is used to calculate the correct zoom and positioning in the entity info gui.</p>",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "emissions_per_second",
          "description": "Amount of emissions created (positive number) or cleaned (negative number) every second by the entity. This is passive, and it is independent concept of the emissions of machines, these are created actively depending on the power consumption. Currently used just for trees.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "enemy_map_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "fast_replaceable_group",
          "description": "<p>This allows you to replace an entity that's already placed, with a different one in your inventory. For example, replacing a burner inserter with a fast inserter.</p><p>This is simply a string, so any string can be used here. The entity that should be replaced simply has to use the same string here.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_EntityPrototypeFlags",
          "optional": true
        },
        {
          "name": "friendly_map_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "hit_visualization_box",
          "description": "Where beams should hit the entity. Useful if the bounding box only covers part of the entity (e.g. feet of the character) and beams only hitting there would look weird.",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "map_color",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "map_generator_bounding_box",
          "description": "Used instead of the collision box during map generation. Allows space entities differently during map generation, for example if the box is bigger, the entities will be placed farther apart.",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "minable",
          "type": "PT_MinableProperties",
          "optional": true
        },
        {
          "name": "mined_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "mining_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "next_upgrade",
          "description": "Name of the entity that will be automatically selected as the upgrade of this entity when using the <a href=\"/Upgrade_planner\" title=\"Upgrade planner\">upgrade planner</a> without configuration.</p><p>This entity may not have 'not-upgradable' flag set and must be minable. This entity mining result must not contain item product with \"hidden\" flag set. Mining results with no item products are allowed. The entity may not be a <a href=\"/Prototype/RollingStock\" title=\"Prototype/RollingStock\">Prototype/RollingStock</a>.<br>The upgrade target entity needs to have the same bounding box, collision mask, and fast replaceable group as this entity. The upgrade target entity must have least 1 item that builds it that isn't hidden.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "open_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "placeable_by",
          "description": "<p>Item that when placed creates this entity. Determines which item is picked when \"Q\" (smart pipette) is used on the entity, determines which item is needed in a blueprint of this entity.</p><p>The item count specified here can't be larger than the stack size of that item.</p>",
          "type": "PT_ItemToPlace|PT_ItemToPlace[]",
          "optional": true
        },
        {
          "name": "radius_visualisation_specification",
          "type": "PT_RadiusVisualisationSpecification",
          "optional": true
        },
        {
          "name": "remains_when_mined",
          "description": "The entity that remains when this one is mined, deconstructed or fast-replaced. The entity wont actually be spawned if it would collide with the entity that is in the process of being mined.",
          "type": "string|string[]",
          "optional": true
        },
        {
          "name": "remove_decoratives",
          "description": "Whether this entity should remove decoratives that collide with it when this entity is built. When set to \"automatic\", if the entity type is considered a building (e.g. an assembling machine or a wall) it will remove decoratives.",
          "type": "PT_EntityRemoveDecoratives",
          "default": "automatic",
          "optional": true
        },
        {
          "name": "rotated_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "selectable_in_game",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "selection_box",
          "description": "<p>Specification of the entity selection area. When empty the entity will have no selection area (and thus is not selectable).</p><p>The selection box is usually a little bit bigger than the collision box, for tilable entities (like buildings) it should match the tile size of the building.</p>",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "selection_priority",
          "description": "The entity with the higher number is selectable before the entity with the lower number. When two entities have the same selection priority, the one with the highest <a href=\"/Types/CollisionMask\" title=\"Types/CollisionMask\">collision mask</a> (as determined by the order on that page) is selected.",
          "type": "PT_uint8",
          "default": "50",
          "optional": true
        },
        {
          "name": "shooting_cursor_size",
          "description": "The cursor size used when shooting at this entity.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "sticker_box",
          "description": "Used to set the area of the entity that can have stickers on it, currently only used for units to specify the area where the green slow down stickers can appear. It is optional and the collision box is used when not specified.",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "subgroup",
          "description": "The name of the subgroup this entity should be sorted into in the map editor building selection.",
          "type": "string",
          "optional": true
        },
        {
          "name": "tile_height",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "tile_width",
          "description": "Used to determine how the center of the entity should be positioned when building (unless the offgrid <a href=\"/Types/EntityPrototypeFlags\" title=\"Types/EntityPrototypeFlags\">flag</a> is specified). When the tile width is odd, the center will be in the center of the tile, when it is even, the center is on the tile transition.",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "trigger_target_mask",
          "type": "PT_TriggerTargetMask",
          "optional": true
        },
        {
          "name": "vehicle_impact_sound",
          "description": "When playing this sound, the volume is scaled by the speed of the vehicle when colliding with this entity.",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "water_reflection",
          "description": "May also be defined inside <code>graphics_set</code> instead of directly in the entity prototype. This is useful for entities that use the a <code>graphics_set</code> property to define their graphics, becausen then all graphics can be in defined one place.",
          "type": "PT_WaterReflectionDefinition",
          "optional": true
        },
        {
          "name": "working_sound",
          "description": "Will also work on entities that don't actually do work.",
          "type": "PT_WorkingSound",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase:PT_IconSpecification",
      "name": "PT_Entity",
      "link": "/Prototype/Entity",
      "description": "Abstract base of all entities in the game. Entity is basically everything that can be on the map (except tiles). For in game script access to entity, take a look at <a rel=\"nofollow\" class=\"external text\" href=\"http://lua-api.factorio.com/latest/LuaEntity.html\">LuaEntity</a>"
    },
    {
      "properties": [],
      "parent": "PT_SelectionTool",
      "prototype": "Prototype",
      "name": "PT_BlueprintItem",
      "link": "/Prototype/BlueprintItem",
      "description": "A <a href=\"/Blueprint\" title=\"Blueprint\">blueprint</a>."
    },
    {
      "properties": [
        {
          "name": "amount",
          "description": "This will trigger the achievement, if enough entities were deconstructed using construction robots.",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "parent": "PT_Achievement",
      "prototype": "Prototype",
      "name": "PT_DeconstructWithRobotsAchievement",
      "link": "/Prototype/DeconstructWithRobotsAchievement",
      "description": "This prototype definition is used for receiving an achievement when the player deconstructs enough entities with construction robots."
    },
    {
      "properties": [
        {
          "name": "pictures",
          "type": "PT_RailRemnantsPictures",
          "optional": false
        },
        {
          "name": "walking_sound",
          "description": "Sound played when a character walks over this rail.",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "name": "PT_Rail",
      "link": "/Prototype/Rail",
      "description": "The abstract base of both rail prototypes."
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "description": "Requires animation in attack_parameters. Requires ammo_type in attack_parameters.",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "distance_per_frame",
          "description": "How fast the <code>run_animation</code> frames are advanced. The animations are advanced animation_speed frames per <code>distance_per_frame</code> that the unit moves.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "distraction_cooldown",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "movement_speed",
          "description": "Movement speed of the unit in the world, in tiles per tick. Must be equal to or greater than 0.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "pollution_to_join_attack",
          "description": "The amount of pollution that has to be absorbed by the unit's spawner before the unit will leave the spawner and attack the source of the pollution.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "run_animation",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "vision_distance",
          "description": "Note: Setting to 50 or above can lead to undocumented behavior of individual units creating groups on their own when attacking or being attacked.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "affected_by_tiles",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "ai_settings",
          "type": "PT_UnitAISettings",
          "optional": true
        },
        {
          "name": "alternative_attacking_frame_sequence",
          "type": "PT_UnitAlternativeAttackingFrameSequence",
          "optional": true
        },
        {
          "name": "can_open_gates",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "dying_sound",
          "description": "The sound file to play when entity dies.",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "has_belt_immunity",
          "description": "If the unit is immune to movement by belts.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "max_pursue_distance",
          "type": "PT_double",
          "default": "50",
          "optional": true
        },
        {
          "name": "min_pursue_time",
          "type": "PT_uint32",
          "default": "600",
          "optional": true
        },
        {
          "name": "move_while_shooting",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "radar_range",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "rotation_speed",
          "type": "PT_float",
          "default": "0.025",
          "optional": true
        },
        {
          "name": "running_sound_animation_positions",
          "description": "Ignored if <code>walking_sounds</code> is not defined.",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "spawning_time_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "walking_sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_Unit",
      "link": "/Prototype/Unit",
      "description": "Entity that attacks players."
    },
    {
      "properties": [
        {
          "name": "ammo_type",
          "description": "<p>When using an array of AmmoType, the AmmoType has an extra property:</p><ul><li>source_type - <a href=\"/Types/AmmoSourceType\" title=\"Types/AmmoSourceType\">AmmoSourceType</a> - Mandatory. - Defines for which kind of entity this ammo type applies. Each entity kind can only be used once per array.</li></ul><p>When using a plain <a href=\"/Types/AmmoType\" title=\"Types/AmmoType\">AmmoType</a>, the ammo type applies to everything (\"default\").</p>",
          "type": "PT_AmmoType[]|PT_AmmoType",
          "optional": false
        },
        {
          "name": "magazine_size",
          "description": "Number of shots before ammo item is consumed. Must be >= 1.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "reload_time",
          "description": "Amount of extra time (in ticks) it takes to reload the weapon after depleting the magazine. Must be >= 0.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_AmmoItem",
      "link": "/Prototype/AmmoItem",
      "description": "Ammo used for a gun."
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "player_color",
          "type": "string",
          "optional": false
        },
        {
          "name": "chat_color",
          "type": "string",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsPlayerColor",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "name": "PT_AnimatedVectorDirectionShift",
      "link": "/Types/AnimatedVector#default_recipe_tint"
    },
    {
      "properties": [
        {
          "name": "ingredients",
          "description": "A table containing ingredient names and counts. Can also contain information about fluid temperature and catalyst amounts. The catalyst amounts are automatically calculated from the recipe, or can be set manually in the <a href=\"/Types/IngredientPrototype\" title=\"Types/IngredientPrototype\">IngredientPrototype</a>.<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://factorio.com/blog/post/fff-256\">[1]</a></sup><br>Maximum ingredient amount is 65535.<br><code>ingredients</code> can be set to an empty table  to create a recipe that needs no ingredients.<br>Duplicate ingredients, e.g. two entries for the \"wood\" item, are <i>not</i> allowed.</p>",
          "type": "PT_IngredientPrototype[]",
          "optional": false
        },
        {
          "name": "allow_as_intermediate",
          "description": "Optional. Whether the recipe can be used as an intermediate recipe in hand-crafting.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_decomposition",
          "description": "Optional. Whether this recipe is allowed to be broken down for the recipe tooltip \"Total raw\" calculations.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_inserter_overload",
          "description": "If the recipe is allowed to have the extra inserter overload bonus applied (4 * stack inserter stack size).",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_intermediates",
          "description": "Optional. Whether the recipe is allowed to use intermediate recipes when hand-crafting.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "always_show_made_in",
          "description": "Optional. Whether the \"Made in: {Machine}\" part of the tool-tip should always be present, not only when the recipe can not be hand-crafted.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "always_show_products",
          "description": "Optional. Whether the products are always shown in the recipe tool-tip.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "emissions_multiplier",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "enabled",
          "description": "<p>Optional. This can be false to disable the recipe at the start of the game, or \"true\" to leave it enabled.</p><p>If your recipe is unlocked by a technology, you should set this to \"false\".</p>",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "energy_required",
          "description": "<p>Optional. The amount of time it takes to make this recipe.</p><p>This is the number of seconds it takes to craft at crafting speed 1.</p>",
          "type": "PT_double",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "hidden",
          "description": "Optional. Hides the recipe from crafting menus.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "hide_from_player_crafting",
          "description": "Optional. Hides the recipe from the player's crafting screen. The recipe will still show up for selection in machines.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "hide_from_stats",
          "description": "Optional. Hides the recipe from flow stats (item/fluid production statistics).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "main_product",
          "description": "<p>For recipes with more than one product: This defines of which result the icon, subgroup and name is used. If it is not set and the recipe has more than 1 result the recipe will use the recipe-name and recipe-description locale and its own subgroup and icon.</p><p>For recipes with 1 result: The recipe uses the icon, subgroup and name of the result by default. If set this property is set to an empty string, the recipe will use the properties of the recipe instead of the result.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "overload_multiplier",
          "description": "<p>Used to determine how many extra items are put into an assembling machine before it's considered \"full enough\". See <a href=\"/Inserters#Insertion_limits\" title=\"Inserters\">Inserters#Insertion_limits</a>.</p><p>If set to 0, it instead uses the following formula: 1.166 / (energy_required / the assembler's crafting_speed), rounded up, and clamped between 2 and 100. The numbers used in this formula can be changed by the <a href=\"/Prototype/UtilityConstants\" title=\"Prototype/UtilityConstants\">Prototype/UtilityConstants</a> dynamic_recipe_overload_factor, minimum_recipe_overload_multiplier and maximum_recipe_overload_multiplier.</p>",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "requester_paste_multiplier",
          "type": "PT_uint32",
          "default": "30",
          "optional": true
        },
        {
          "name": "result",
          "description": "Can be replaced with the results parameter. The item created by this recipe. Must be the name of an item, such as \"iron-gear-wheel\".",
          "type": "string",
          "optional": true
        },
        {
          "name": "result_count",
          "description": "Optional. The number of items created by this recipe.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "results",
          "description": "A table containing result names and counts. Can also contain information about fluid temperature and catalyst amounts. The catalyst amounts are automatically calculated from the recipe, or can be set manually in the <a href=\"/Types/ProductPrototype\" title=\"Types/ProductPrototype\">ProductPrototype</a>.<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://factorio.com/blog/post/fff-256\">[2]</a></sup><br><code>results</code> can be set to an empty table to create a recipe that produces nothing.<br>Duplicate results, e.g. two entries for the \"iron-plate\" item, are allowed.",
          "type": "PT_ProductPrototype[]",
          "optional": true
        },
        {
          "name": "show_amount_in_title",
          "description": "Optional. Whether the recipe name should have the product amount in front of it, e.g. \"2 <a href=\"/Transport_belt\" title=\"Transport belt\">transport belt</a>\"",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "unlock_results",
          "description": "Optional. Whether enabling this recipe unlocks its item products to show in selection lists (item filter, logistic request etc.).",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "name": "PT_RecipeData",
      "link": "/Prototypes/Recipe"
    },
    {
      "properties": [
        {
          "name": "item",
          "description": "Name of the <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a> that should be created.",
          "type": "string",
          "optional": false
        },
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_InsertItemTriggerEffectItem",
      "link": "/Types/InsertItemTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "pictures",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "orientation_to_variation",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "rotate",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_WaterReflectionDefinition",
      "link": "/Types/WaterReflectionDefinition",
      "description": "Entity water reflection."
    },
    {
      "properties": [
        {
          "name": "small",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "medium",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "large",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "name": "PT_TileBuildSoundValue",
      "link": "/Prototype/Tile#build_sound"
    },
    {
      "properties": [
        {
          "name": "effect",
          "description": "Required, read by the game and then immediately discarded. In short: Does nothing.",
          "type": "string",
          "optional": false
        },
        {
          "name": "duration",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "ease_in_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "ease_out_duration",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "delay",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "full_strength_max_distance",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_distance",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "strength",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CameraEffectTriggerEffectItem",
      "link": "/Types/CameraEffectTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "max_temperature",
          "description": "max_temperature must be >= default_temperature.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "default_temperature",
          "type": "PT_double",
          "default": "15",
          "optional": true
        },
        {
          "name": "specific_heat",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "max_transfer",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "min_temperature_gradient",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "min_working_temperature",
          "description": "min_working_temperature must be >= default_temperature. min_working_temperature must be <= max_temperature.",
          "type": "PT_double",
          "default": "15",
          "optional": true
        },
        {
          "name": "minimum_glow_temperature",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "pipe_covers",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_pipe_covers",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_picture",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_glow",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "connections",
          "description": "The table may only contain up to 32 connections.",
          "type": "PT_HeatConnection[]",
          "optional": true
        }
      ],
      "parent": "PT_EnergySourceBase",
      "prototype": "PT_EnergySource",
      "name": "PT_EnergySourceHeat",
      "link": "/Types/EnergySource"
    },
    {
      "properties": [
        {
          "name": "explosion",
          "description": "Name of a <a href=\"/Prototype/Explosion\" title=\"Prototype/Explosion\">Prototype/Explosion</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "starting_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "direction_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_deviation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_fraciton_deviation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "projectile_starting_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_FlameThrowerExplosionTriggerDelivery",
      "link": "/Types/FlameThrowerExplosionTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "straight_vertical_single",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "straight_vertical",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "straight_vertical_window",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "straight_horizontal",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "straight_horizontal_window",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "corner_up_right",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "corner_up_left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "corner_down_right",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "corner_down_left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "t_up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "t_down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "t_right",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "t_left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "cross",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ending_up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ending_down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ending_right",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "ending_left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "horizontal_window_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "vertical_window_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fluid_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "low_temperature_flow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "middle_temperature_flow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "high_temperature_flow",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "gas_flow",
          "type": "PT_AnimationType",
          "optional": false
        }
      ],
      "name": "PT_PipePictures",
      "link": "/Prototype/Pipe#pictures"
    },
    {
      "properties": [],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_InstantTriggerDelivery",
      "link": "/Types/InstantTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "primary",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "secondary",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "tertiary",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "quaternary",
          "type": "PT_Color",
          "optional": true
        }
      ],
      "name": "PT_TintColors",
      "link": "/Types/TintColors"
    },
    {
      "properties": [
        {
          "name": "tiles",
          "description": "Array of names of <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tiles</a>. The tiles this footprint particle is shown on when the player walks over them.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "particle_name",
          "description": "Name of a <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a>. The name of the particle that should be created when the character walks on the defined tiles.",
          "type": "string",
          "optional": true
        },
        {
          "name": "use_as_default",
          "description": "Whether this footprint particle should be the default particle that is used for <a href=\"#tiles\">#tiles</a> that don't have an associated footprint particle.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_FootprintParticle",
      "link": "/Types/FootprintParticle"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_int8",
          "optional": false
        },
        {
          "name": "east",
          "type": "PT_int8",
          "optional": false
        },
        {
          "name": "south",
          "type": "PT_int8",
          "optional": false
        },
        {
          "name": "west",
          "type": "PT_int8",
          "optional": false
        }
      ],
      "name": "PT_FluidBoxSecondaryDrawOrders",
      "link": "/Types/FluidBox#secondary_draw_orders"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "The name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "[1]",
          "description": "The name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "amount",
          "description": "Mandatory when using numbered keys (an array). If <code>amount</code> is present, <code>amount_min</code> and <code>amount_max</code> are not loaded.",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "[2]",
          "description": "Mandatory when using numbered keys (an array). If <code>amount</code> is present, <code>amount_min</code> and <code>amount_max</code> are not loaded.",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "probability",
          "description": "Value between 0 and 1, 0 for 0% chance and 1 for 100% chance.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "amount_min",
          "description": "Mandatory if <code>amount</code> is not specified and named keys are being used.",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "amount_max",
          "description": "<p>Mandatory if <code>amount</code> is not specified and named keys are being used.</p><p>If set to a number that is less than amount_min, the game will use amount_min internally.</p>",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "catalyst_amount",
          "description": "Amount that should not be affected by productivity modules (not yielded from bonus production) and should not be included in the item production statistics.",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_ItemProductPrototype",
      "link": "/Types/ItemProductPrototype",
      "description": "An item product definition for a <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a>. Its loading is triggered by the <code>type</code> of a <a href=\"/Types/ProductPrototype\" title=\"Types/ProductPrototype\">Types/ProductPrototype</a> being \"item\". It can be specified as a table with named or numbered keys, but not a mix of both."
    },
    {
      "properties": [
        {
          "name": "type",
          "type": "PT_TutorialTriggerType",
          "optional": false
        },
        {
          "name": "technology",
          "description": "<p>Read if type is \"research-technology\".</p><p>Name of the technology that triggers this tutorial when it is researched.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "entity",
          "description": "<p>Read if type is \"build-entity\".</p><p>Name of the entity that triggers this tutorial when it is built.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "item",
          "description": "<p>Read if type is \"craft-item\".</p><p>Name of the item that triggers this tutorial when it is crafted.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "count",
          "description": "<p>Read if type is \"manual-transfer\".</p><p>Amount of times manual item transfer has to be done to trigger this tutorial.</p>",
          "type": "PT_uint32",
          "optional": true
        }
      ],
      "name": "PT_TutorialTrigger",
      "link": "/Prototype/Tutorial#trigger"
    },
    {
      "properties": [
        {
          "name": "radius",
          "description": "Not including the radius of the unit",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "separation_factor",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "separation_force",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "force_unit_fuzzy_goto_behavior",
          "type": "PT_bool",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsSteeringDefault",
      "link": "/Prototype/MapSettings#steering"
    },
    {
      "properties": [
        {
          "name": "pipe_connections",
          "description": "<p>Max number of members is 255.</p><p>Connection points to connect to other fluidboxes. This is also marked as blue arrows in alt mode. Fluid may flow in or out depending on the `type` field of each connection. Connection points may depend on the direction the entity is facing.</p>",
          "type": "PT_PipeConnectionDefinition[]",
          "optional": false
        },
        {
          "name": "base_area",
          "description": "Must be greater than 0.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "base_level",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "height",
          "description": "Must be greater than 0.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "filter",
          "description": "Name of a <a href=\"/Prototype/Fluid\" title=\"Prototype/Fluid\">Prototype/Fluid</a>. Can be used to specify which fluid is allowed to enter this fluid box. <a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?f=28&amp;t=46302\">[1]</a>",
          "type": "string",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "pipe_covers",
          "description": "The pictures to show when another fluid box connects to this one.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "pipe_picture",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "minimum_temperature",
          "description": "The minimum temperature allowed into the fluidbox. Only applied if a <code>filter</code> is specified <a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=496738#p496738\">[2]</a>.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "maximum_temperature",
          "description": "The maximum temperature allowed into the fluidbox. Only applied if a <code>filter</code> is specified <a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=496738#p496738\">[3]</a>.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "production_type",
          "type": "PT_FluidBoxProductionType",
          "default": "None",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Set the secondary draw order for all orientations. Used to determine render order for sprites with the same <code>render_layer</code> in the same position. Sprites with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "default": "1",
          "optional": true
        },
        {
          "name": "secondary_draw_orders",
          "description": "Set the secondary draw order for each orientation. Used to determine render order for sprites with the same <code>render_layer</code> in the same position. Sprites with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_FluidBoxSecondaryDrawOrders",
          "optional": true
        }
      ],
      "name": "PT_FluidBox",
      "link": "/Types/FluidBox",
      "description": "<p>Used to set the fluid amount an entity can hold, as well as the connection points for pipes leading into and out of the entity.</p><p>Each entity can have multiple fluidboxes. It can come from a fluid_energy_source, any fluidbox or normal property storage tanks and pumps.</p><p>Each fluidbox should store only ONE type of fluid. It accepts to store multiple different fluids, which is fluid mixing and not wanted. To avoid fluid mixing, you can setup a filter for certain fluids. Crafting machines will automatically disable unused fluidboxes.</p>"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of a <a href=\"/Prototype/TrivialSmoke\" title=\"Prototype/TrivialSmoke\">Prototype/TrivialSmoke</a>",
          "type": "string",
          "optional": false
        },
        {
          "name": "frequency",
          "description": "Can't be negative, NaN or infinite.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "offset",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "north_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "east_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "south_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "west_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "deviation",
          "type": "PT_Position",
          "optional": true
        },
        {
          "name": "starting_frame_speed",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed_deviation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_deviation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "slow_down_factor",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "height",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "height_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_vertical_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_vertical_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "vertical_speed_slowdown",
          "type": "PT_float",
          "default": "0.965",
          "optional": true
        }
      ],
      "name": "PT_SmokeSource",
      "link": "/Types/SmokeSource",
      "description": "Definition of the smoke of an entity."
    },
    {
      "properties": [
        {
          "name": "start",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "ending",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "head",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "tail",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "body",
          "type": "PT_AnimationVariations",
          "optional": true
        }
      ],
      "name": "PT_BeamLightAnimations",
      "link": "/Prototype/Beam#light_animations"
    },
    {
      "properties": [
        {
          "name": "range",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "cooldown",
          "description": "Number of ticks in which it will be possible to shoot again. If < 1, multiple shots can be performed in one tick.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "min_range",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "turn_range",
          "description": "If this is <= 0, it is set to 1. Arc from 0 to 1, so for example 0.25 is 90°. Used by the <a href=\"/Flamethrower_turret\" title=\"Flamethrower turret\">flamethrower turret</a> in the base game. Arcs greater than 0.5 but less than 1 will be clamped to 0.5 as targeting in arcs larger than half circle is not implemented.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/94654\">[1]</a>",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "fire_penalty",
          "description": "Used when searching for the nearest enemy, when this is &gt; 0, enemies that aren't burning are preferred over burning enemies. Definition of \"burning\" for this: Entity has sticker attached to it, and the sticker has a <a href=\"/Prototype/Sticker#spread_fire_entity\" title=\"Prototype/Sticker\">spread_fire_entity</a> set.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "rotate_penalty",
          "description": "A higher penalty will discourage turrets from targeting units that would take longer to turn to face.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "health_penalty",
          "description": "A higher penalty will discourage turrets from targeting units with higher health. A negative penalty will encourage turrets to target units with higher health.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "range_mode",
          "type": "PT_BaseAttackParametersRangeMode",
          "default": "center-to-center",
          "optional": true
        },
        {
          "name": "min_attack_distance",
          "description": "If less than <code>range</code>, the entity will choose a random distance between <code>range</code> and <code>min_attack_distance</code> and attack from that distance.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "damage_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "ammo_consumption_modifier",
          "description": "Must be greater than or equal to 0.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "cooldown_deviation",
          "description": "Must be between 0 and 1.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "warmup",
          "description": "Number of ticks it takes for the weapon to actually shoot after the order for shooting has been made. This also allows to \"adjust\" the shooting animation to the effect of shooting.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "lead_target_for_projectile_speed",
          "description": "Presumably this should be set to the projectile speed to make the unit/turret lead their projectiles.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "movement_slow_down_cooldown",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "movement_slow_down_factor",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "ammo_type",
          "description": "Can be mandatory.",
          "type": "PT_AmmoType",
          "optional": true
        },
        {
          "name": "activation_type",
          "type": "PT_BaseAttackParametersActivationType",
          "optional": true
        },
        {
          "name": "sound",
          "type": "PT_LayeredSound",
          "optional": true
        },
        {
          "name": "animation",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "cyclic_sound",
          "type": "PT_CyclicSound",
          "optional": true
        },
        {
          "name": "use_shooter_direction",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "ammo_categories",
          "description": "Names of <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">Prototype/AmmoCategories</a>.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "ammo_category",
          "description": "The name of a <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">Prototype/AmmoCategory</a>. Mandatory if <code>ammo_type</code> and <code>ammo_category</code> is not given, otherwise ignored.",
          "type": "string",
          "optional": true
        }
      ],
      "name": "PT_BaseAttackParameters",
      "link": "/Types/BaseAttackParameters",
      "description": "The abstract base of all attack parameters."
    },
    {
      "properties": [
        {
          "name": "x",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "y",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "z",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "[1]",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "[2]",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "[3]",
          "type": "PT_float",
          "optional": true
        }
      ],
      "name": "PT_Vector3D",
      "link": "/Types/Vector3D",
      "description": "table of three floats. Either specified as an array, or with the named keys \"x\", \"y\" and \"z\"."
    },
    {
      "properties": [
        {
          "name": "picture",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "red_picture",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": false
        }
      ],
      "name": "PT_TrainStopLight",
      "link": "/Prototype/TrainStop#light1"
    },
    {
      "properties": [
        {
          "name": "frame_main",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "frame_shadow",
          "type": "PT_AnimationVariations",
          "optional": false
        },
        {
          "name": "frame_main_scanner",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "frame_main_scanner_movement_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "frame_main_scanner_horizontal_start_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_horizontal_end_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_horizontal_y_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "frame_main_scanner_horizontal_rotation",
          "type": "PT_RealOrientation",
          "optional": false
        },
        {
          "name": "frame_main_scanner_vertical_start_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_vertical_end_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_vertical_y_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "frame_main_scanner_vertical_rotation",
          "type": "PT_RealOrientation",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_horizontal_start_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_horizontal_end_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_horizontal_y_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_horizontal_rotation",
          "type": "PT_RealOrientation",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_vertical_start_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_vertical_end_shift",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_vertical_y_scale",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "frame_main_scanner_cross_vertical_rotation",
          "type": "PT_RealOrientation",
          "optional": false
        },
        {
          "name": "frame_main_scanner_nw_ne",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "frame_main_scanner_sw_se",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "frame_back_patch",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "frame_front_patch",
          "type": "PT_SpriteVariations",
          "optional": true
        }
      ],
      "name": "PT_TransportBeltConnectorFrame",
      "link": "/Types/TransportBeltConnectorFrame",
      "description": "Used to define the graphics for the (in vanilla) yellow frame that is used when a <a href=\"/Prototype/TransportBelt\" title=\"Prototype/TransportBelt\">Prototype/TransportBelt</a> is connected to the circuit network."
    },
    {
      "properties": [
        {
          "name": "animation",
          "description": "Rendered in \"object\" layer, with secondary draw order 0.",
          "type": "PT_Animation4Way",
          "optional": false
        },
        {
          "name": "base_render_layer",
          "type": "PT_RenderLayer",
          "default": "ground-patch",
          "optional": true
        },
        {
          "name": "underwater_layer_offset",
          "type": "PT_int8",
          "default": "1",
          "optional": true
        },
        {
          "name": "fluid_animation",
          "description": "Rendered in \"object\" layer, with secondary draw order 20.",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "glass_pictures",
          "description": "Rendered in \"object\" layer, with secondary draw order 40.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "base_pictures",
          "description": "Rendered in layer specified by base_render_layer, with secondary draw order 0.",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "underwater_pictures",
          "description": "Drawn by tile renderer when water animation is enabled.",
          "type": "PT_Sprite4Way",
          "optional": true
        }
      ],
      "name": "PT_OffshorePumpGraphicsSet",
      "link": "/Prototype/OffshorePump#graphics_set"
    },
    {
      "properties": [
        {
          "name": "sound",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "fade_ticks",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_InterruptibleSound",
      "link": "/Types/InterruptibleSound"
    },
    {
      "properties": [
        {
          "name": "direction_count",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "layers",
          "description": "<p>If this property is present, all RotatedAnimation definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (RotatedAnimation definition) in the array may also have the <code>layers</code> property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_RotatedAnimation[]",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the RotatedAnimation.",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "filename",
          "description": "Mandatory if <code>stripes</code> and <code>filenames</code> is not specified.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "filenames",
          "description": "Only loaded if <code>stripes</code> is not present.",
          "type": "PT_FileName[]",
          "optional": true
        },
        {
          "name": "slice",
          "description": "Mandatory if <code>filenames</code> is present.",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "lines_per_file",
          "description": "Mandatory if <code>filenames</code> is present.",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the one frame. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the animation on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "run_mode",
          "type": "PT_AnimationRunMode",
          "default": "forward",
          "optional": true
        },
        {
          "name": "frame_count",
          "description": "Can't be 0.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "line_length",
          "description": "Once the specified number of pictures is loaded, other pictures are loaded on other line. This is to allow having longer animations in matrix, to avoid pictures with too big width. The game engine limits the width of any input picture to 2048px, so it is compatible with most graphics cards.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "animation_speed",
          "description": "Modifier of the animation playing speed, the default is 1, which means one animation frame per tick (60 fps). The speed of playing can often vary depending on the usage (output of steam engine for example). Has to be greater than 0.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "max_advance",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "repeat_count",
          "description": "Can't be 0.",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "dice",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "dice_x",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "dice_y",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "frame_sequence",
          "type": "PT_AnimationFrameSequence",
          "optional": true
        },
        {
          "name": "still_frame",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "axially_symmetrical",
          "description": "If true, <code>direction_count</code> must be greater than 1.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "counterclockwise",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "middle_orientation",
          "type": "PT_RealOrientation",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "orientation_range",
          "description": "Automatically clamped to be between 0 and 1.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "apply_projection",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "stripes",
          "type": "PT_Stripe[]",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "name": "PT_RotatedAnimation",
      "link": "/Types/RotatedAnimation"
    },
    {
      "properties": [
        {
          "name": "max_temperature",
          "description": "Must be >= default_temperature.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "specific_heat",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "max_transfer",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "default_temperature",
          "type": "PT_double",
          "default": "15",
          "optional": true
        },
        {
          "name": "min_temperature_gradient",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "min_working_temperature",
          "description": "Must be >= default_temperature and <= max_temperature.",
          "type": "PT_double",
          "default": "15",
          "optional": true
        },
        {
          "name": "minimum_glow_temperature",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "pipe_covers",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_pipe_covers",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_picture",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "heat_glow",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "connections",
          "description": "The table may only contain up to 32 connections.",
          "type": "PT_HeatConnection[]",
          "optional": true
        }
      ],
      "name": "PT_HeatBuffer",
      "link": "/Types/HeatBuffer",
      "description": "Used to specify heat capacity properties without a <a href=\"/Types/EnergySource#Heat_energy_source\" title=\"Types/EnergySource\">heat energy source</a>."
    },
    {
      "properties": [
        {
          "name": "scale",
          "type": "PT_float",
          "optional": false
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_ShowExplosionOnChartTriggerEffectItem",
      "link": "/Types/ShowExplosionOnChartTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "electric_lines_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "electric_lines_color_switch_enabled",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "electric_lines_color_switch_disabled",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "electric_power_pole_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "switch_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "electric_line_width",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "electric_line_minimum_absolute_width",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "turret_range_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "artillery_range_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "pollution_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_friendly_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_enemy_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "rail_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "entity_ghost_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "vehicle_outer_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "vehicle_outer_color_selected",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "vehicle_inner_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "vehicle_wagon_connection_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "resource_outline_selection_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_train_stop_text_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_train_stop_disabled_text_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_train_stop_full_text_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_deconstruct_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "red_signal_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "green_signal_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "blue_signal_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "yellow_signal_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "default_friendly_color_by_type",
          "description": "The strings are entity types.",
          "type": "table<string, PT_Color>",
          "optional": true
        },
        {
          "name": "default_color_by_type",
          "description": "The strings are entity types.",
          "type": "table<string, PT_Color>",
          "optional": true
        },
        {
          "name": "explosion_visualization_duration",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_path_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "train_preview_path_outline_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "train_current_path_outline_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_logistic_robot_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_construction_robot_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_mobile_construction_robot_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "chart_personal_construction_robot_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "custom_tag_selected_overlay_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "custom_tag_scale",
          "type": "PT_float",
          "default": "0.6",
          "optional": true
        }
      ],
      "name": "PT_UtilityConstantsChart",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "result",
          "description": "Name of a <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "condition",
          "description": "Name of a <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a>.",
          "type": "PT_CollisionMask",
          "optional": false
        },
        {
          "name": "condition_size",
          "type": "PT_int32",
          "optional": false
        }
      ],
      "name": "PT_PlaceAsTile",
      "link": "/Types/PlaceAsTile"
    },
    {
      "properties": [
        {
          "name": "control",
          "description": "ID of <a href=\"/Prototype/AutoplaceControl\" title=\"Prototype/AutoplaceControl\">autoplace control</a> that applies to this entity.",
          "type": "string",
          "optional": true
        },
        {
          "name": "default_enabled",
          "description": "<p>Indicates whether the thing should be placed even if <a rel=\"nofollow\" class=\"external text\" href=\"http://lua-api.factorio.com/latest/Concepts.html#MapGenSettings\">MapGenSettings</a> do not provide frequency/size/richness for it (either for the specific prototype of for the control named by AutoplaceSpecification.control).</p><p>If true, normal frequency/size/richness (value=1) are used in that case.  Otherwise it is treated as if 'none' were selected.</p>",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "force",
          "description": "Force of the placed entity. One of \"enemy\", \"player\", \"neutral\", or a custom force name. Only matters for EntityWithForce or EntityWithOwner.",
          "type": "PT_AutoplaceSpecificationForce",
          "default": "neutral",
          "optional": true
        },
        {
          "name": "order",
          "description": "Order for placing the entity (has no effect when placing tiles). Entities whose order compares less are placed earlier (this influences placing multiple entities which collide with itself), from entities with equal order string only one with the highest probability is placed.",
          "type": "PT_Order",
          "optional": true
        },
        {
          "name": "placement_density",
          "description": "For entities and decoratives, how many times to attempt to place on each tile (probability and collisions are taken into account each attempt).",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "tile_restriction",
          "description": "Restricts tiles or tile transitions the entity can appear on.<br>Contains list of specifications. Each specification is a single `string` with the name of an allowed tile, or a list of two tile names for entities allowed on transitions.",
          "type": "string[]",
          "optional": true
        }
      ],
      "name": "PT_AutoplaceSpecification",
      "link": "/Types/AutoplaceSpecification",
      "description": "<p>Autoplace specification is used to determine which entities are placed when generating map. Currently it is used for enemy bases, resources and other entities (trees, fishes, ...).</p><p>Autoplace specification describe conditions for placing tiles, entities, and decoratives during surface generation. Probability (of placement on any given tile) and richness (which has different meaning depending on the thing being placed) can be defined either in terms of a set of peaks, or using explicit expressions.</p>"
    },
    {
      "properties": [
        {
          "name": "animation",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "idle_animation",
          "description": "Idle animation must have the same frame count as animation.",
          "type": "PT_Animation4Way",
          "optional": true
        },
        {
          "name": "always_draw_idle_animation",
          "description": "Only loaded if <code>idle_animation</code> is present. ",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "default_recipe_tint",
          "type": "PT_TintColors",
          "optional": true
        },
        {
          "name": "working_visualisations",
          "type": "PT_WorkingVisualisation",
          "optional": true
        },
        {
          "name": "shift_animation_waypoints",
          "description": "Only loaded if one of <code>shift_animation_waypoint_stop_duration</code> or <code>shift_animation_transition_duration</code> is not 0.",
          "type": "PT_CraftingMachineShiftAnimationWaypoints",
          "optional": true
        },
        {
          "name": "shift_animation_waypoint_stop_duration",
          "description": "Only loaded if <code>shift_animation_waypoints</code> is present.",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "shift_animation_transition_duration",
          "description": "Only loaded if <code>shift_animation_waypoints</code> is present.",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "status_colors",
          "type": "PT_CraftingMachineStatusColors",
          "optional": true
        },
        {
          "name": "drilling_vertical_movement_duration",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "animation_progress",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "max_animation_progress",
          "type": "PT_float",
          "default": "1000",
          "optional": true
        },
        {
          "name": "min_animation_progress",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "circuit_connector_layer",
          "description": "Renderlayer(s) for all directions of the circuit connectors.",
          "type": "PT_RenderLayer|PT_MiningDrillGraphicsSetCircuitConnectorLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "circuit_connector_secondary_draw_order",
          "description": "Secondary draw order(s) for all directions of the circuit connectors.",
          "type": "PT_int8|PT_MiningDrillGraphicsSetCircuitConnectorSecondaryDrawOrder",
          "default": "100",
          "optional": true
        }
      ],
      "name": "PT_MiningDrillGraphicsSet",
      "link": "/Types/MiningDrillGraphicsSet"
    },
    {
      "properties": [
        {
          "name": "rotations",
          "type": "PT_AnimatedVectorRotation[]",
          "optional": false
        },
        {
          "name": "render_layer",
          "description": "Default render layer for the rotations.",
          "type": "PT_RenderLayer",
          "optional": true
        },
        {
          "name": "direction_shift",
          "type": "PT_AnimatedVectorDirectionShift",
          "optional": true
        }
      ],
      "name": "PT_AnimationVector",
      "link": "/Types/AnimatedVector"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "west",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "south",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "east",
          "type": "PT_BoundingBox",
          "optional": false
        }
      ],
      "name": "PT_TrainStopDrawingBoxes",
      "link": "/Prototype/TrainStop#drawing_boxes"
    },
    {
      "properties": [
        {
          "name": "position",
          "type": "PT_Position",
          "optional": false
        },
        {
          "name": "direction",
          "type": "PT_Direction",
          "optional": false
        }
      ],
      "name": "PT_HeatConnection",
      "link": "/Types/HeatConnection",
      "description": "Defines the connections for a heat energy source in <a href=\"/Types/EnergySource\" title=\"Types/EnergySource\">Types/EnergySource</a>."
    },
    {
      "properties": [
        {
          "name": "regular",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "not_allowed",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "copy",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "electricity",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "logistics",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "pair",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "train_visualization",
          "type": "PT_BoxSpecification[]",
          "optional": false
        },
        {
          "name": "blueprint_snap_rectangle",
          "type": "PT_BoxSpecification[]",
          "optional": false
        }
      ],
      "name": "PT_UtilitySpritesCursorBox",
      "link": "/Prototype/UtilitySprites"
    },
    {
      "properties": [
        {
          "name": "radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "trigger_from_target",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "target_entities",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "show_in_tooltip",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "collision_mode",
          "type": "PT_AreaTriggerItemCollisionMode",
          "default": "distance-from-collision-box",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "PT_Trigger",
      "name": "PT_AreaTriggerItem",
      "link": "/Types/AreaTriggerItem"
    },
    {
      "properties": [
        {
          "name": "entity_name",
          "description": "Name of the entity that should be created.",
          "type": "string",
          "optional": false
        },
        {
          "name": "offset_deviation",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "trigger_created_entity",
          "description": "If this is true, <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#on_trigger_created_entity\">on_trigger_created_entity</a> is raised when the entity is created.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "check_buildability",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "show_in_tooltip",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tile_collision_mask",
          "type": "PT_CollisionMask",
          "optional": true
        },
        {
          "name": "offsets",
          "type": "PT_vector[]",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateEntityTriggerEffectItem",
      "link": "/Types/CreateEntityTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "The name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "[1]",
          "description": "The name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "amount",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "[2]",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "catalyst_amount",
          "description": "Only loaded if the table is using named keys. Amount of this ingredient that should not be included in the item consumption statistics. Usually used together with an equal catalyst amount on the \"product\" of the catalyst in the recipe.",
          "type": "PT_uint16",
          "default": "0",
          "optional": false
        }
      ],
      "parent": "PT_IngredientPrototype",
      "name": "PT_ItemIngredientPrototype",
      "link": "/Types/ItemIngredientPrototype",
      "description": "An item ingredient definition for a <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a>. Its loading is triggered by the <code>type</code> of a <a href=\"/Types/IngredientPrototype\" title=\"Types/IngredientPrototype\">Types/IngredientPrototype</a> being \"item\". It can be specified as a table with named or numbered keys, but not a mix of both."
    },
    {
      "properties": [
        {
          "name": "draw_animation_when_idle",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_light_when_idle",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "random_animation_offset",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "module_icons_suppressed",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "base_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "animation_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "top_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "animation_progress",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "min_animation_progress",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_animation_progress",
          "type": "PT_float",
          "default": "1000",
          "optional": true
        },
        {
          "name": "apply_module_tint",
          "description": "Which tint set in <a href=\"/Prototype/Module#beacon_tint\" title=\"Prototype/Module\">Prototype/Module#beacon_tint</a> should be applied to this, if any.",
          "type": "PT_BeaconGraphicsSetApplymoduleTint",
          "default": "none",
          "optional": true
        },
        {
          "name": "apply_module_tint_to_light",
          "description": "Which tint set in <a href=\"/Prototype/Module#beacon_tint\" title=\"Prototype/Module\">Prototype/Module#beacon_tint</a> should be applied to the light, if any.",
          "type": "PT_BeaconGraphicsSetApplymoduleTint",
          "default": "none",
          "optional": true
        },
        {
          "name": "no_modules_tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "animation_list",
          "type": "PT_AnimationElement[]",
          "optional": true
        },
        {
          "name": "module_visualisations",
          "description": "The visualisations available for displaying the modules in the beacon. The visualisation is chosen based on art style, see <a href=\"/Types/BeaconModuleVisualizations#art_style\" title=\"Types/BeaconModuleVisualizations\">Types/BeaconModuleVisualizations#art_style</a> and <a href=\"/Prototype/Module#art_style\" title=\"Prototype/Module\">Prototype/Module#art_style</a>.",
          "type": "PT_BeaconModuleVisualizations[]",
          "optional": true
        },
        {
          "name": "module_tint_mode",
          "description": "One of \"single-module\" or \"mix\".",
          "type": "string",
          "default": "single-module",
          "optional": true
        }
      ],
      "name": "PT_BeaconGraphicsSet",
      "link": "/Types/BeaconGraphicsSet"
    },
    {
      "properties": [
        {
          "name": "equipment",
          "description": "Name of a <a href=\"/Prototype/Equipment\" title=\"Prototype/Equipment\">Prototype/Equipment</a>. Activation is only implemented for <a href=\"/Prototype/ActiveDefenseEquipment\" title=\"Prototype/ActiveDefenseEquipment\">Prototype/ActiveDefenseEquipment</a>.",
          "type": "string",
          "optional": false
        }
      ],
      "prototype": "PT_CapsuleAction",
      "name": "PT_ActivateEquipmentCapsuleAction",
      "link": "/Types/ActivateEquipmentCapsuleAction",
      "description": "Used by <a href=\"/Types/CapsuleAction\" title=\"Types/CapsuleAction\">Types/CapsuleAction</a>."
    },
    {
      "properties": [
        {
          "name": "direction_count",
          "description": "Count of direction (frames) specified.",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "filename",
          "description": "Either this or <code>\"filenames\"</code> has to be non-empty.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "filenames",
          "description": "Array of filenames. Either this or <code>\"filename\"</code> has to be non-empty.",
          "type": "PT_FileName[]",
          "optional": true
        },
        {
          "name": "layers",
          "description": "<p>If this property is present, all RotatedSprite definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (RotatedSprite definition) in the array may also have the <code>layers</code> property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_RotatedSprite[]",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the RotatedSprite.",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the RotatedSprite.",
          "type": "PT_RotatedSprite",
          "optional": true
        },
        {
          "name": "slice",
          "description": "<p>Number of slices this is sliced into when using the \"optimized atlas packing\" option. If you are a modder, you can just ignore this property.</p><p>Example: If this is 4, the sprite will be sliced into a 4×4 grid.</p>",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice",
          "description": "<p>Number of slices this is sliced into when using the \"optimized atlas packing\" option. If you are a modder, you can just ignore this property.</p><p>Example: If this is 4, the sprite will be sliced into a 4×4 grid.</p>",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_x",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the x axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice_x",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the x axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_y",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the y axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice_y",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the y axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the sprite. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "shift",
          "description": "In tiles. util.by_pixel() can be used to divide the shift by 32 which is the usual pixel height/width of 1 tile in normal resolution. Note that 32 pixel tile height/width is not enforced anywhere - any other tile height or width is also possible.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the sprite on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "axially_symmetrical",
          "description": "When set to true, left the same picture is used for left/right direction, just flipped, this can save half of the space required, but is not usable once the picture contains shadows etc.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "back_equals_front",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "apply_projection",
          "description": "Used to fix the inconsistency of direction of the entity in 3d when rendered and direction on the screen (where the 45 degree angle for projection is used).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "counterclockwise",
          "description": "Set to true to indicate sprites in the spritesheet are in counterclockwise order.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "line_length",
          "description": "Used to specify the individual images in grid. 0 means that all the picture are in one horizontal line.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "allow_low_quality_rotation",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "lines_per_file",
          "description": "Mandatory if <code>\"filenames\"</code> exists.",
          "type": "PT_uint64",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "name": "PT_RotatedSprite",
      "link": "/Types/RotatedSprite",
      "description": "Specifies series of sprites used to visualise different rotations of the object."
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_int8",
          "default": "100",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_int8",
          "default": "100",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_int8",
          "default": "100",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_int8",
          "default": "100",
          "optional": true
        }
      ],
      "name": "PT_MiningDrillGraphicsSetCircuitConnectorSecondaryDrawOrder",
      "link": "/Types/MiningDrillGraphicsSet#circuit_connector_layer"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "starting_frame_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "direction",
          "type": "PT_float",
          "default": "0.25",
          "optional": true
        },
        {
          "name": "direction_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed",
          "type": "PT_float",
          "default": "0.1",
          "optional": true
        },
        {
          "name": "speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "height",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "height_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "vertical_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "vertical_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "center",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "creation_distance",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "creation_distance_orientation",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "use_source_position",
          "type": "PT_bool",
          "optional": true
        }
      ],
      "name": "PT_CircularParticleCreationSpecification",
      "link": "/Types/CircularParticleCreationSpecification"
    },
    {
      "properties": [
        {
          "name": "intensity",
          "description": "Brightness of the light in the range [0, 1] where 0 is no light and 1 is the maximum light.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "size",
          "description": "The radius of the light in tiles. Note, that the light gets darker near the edges, so the effective size of the light seems to be smaller.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "source_orientation_offset",
          "type": "PT_RealOrientation",
          "default": "0",
          "optional": true
        },
        {
          "name": "add_perspective",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "color",
          "description": "Color of the light.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "minimum_darkness",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_LightDefinition",
      "name": "PT_LightDefinitionBasic",
      "link": "/Types/LightDefinition",
      "description": "Type for placeable_by for entities: Item that when placed creates this entity."
    },
    {
      "properties": [
        {
          "name": "size",
          "description": "Only powers of 2 from 1 to 128 can be used. Square size of the tile arrangement this animation is used for. Used to calculate the <code>width</code> and <code>height</code> of the animation which cannot be set directly. (width or height) = size * 32 / scale.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "probability",
          "description": "Probability of 1x1 (size = 1) version of tile must be 1.",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "weights",
          "type": "PT_double[]",
          "optional": true
        }
      ],
      "parent": "PT_TileSprite",
      "name": "PT_TileVariantsMain",
      "link": "/Prototype/Tile#variants"
    },
    {
      "properties": [
        {
          "name": "clone_editor_copy_source_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_copy_destination_allowed_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_copy_destination_not_allowed_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_brush_source_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_brush_destination_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_brush_cursor_preview_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "clone_editor_brush_world_preview_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "script_editor_select_area_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "script_editor_drag_area_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "force_editor_select_area_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "cliff_editor_remove_cliffs_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "tile_editor_selection_preview_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "tile_editor_area_selection_color",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "decorative_editor_selection_preview_tint",
          "type": "PT_Color",
          "optional": false
        },
        {
          "name": "tile_editor_selection_preview_radius",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "decorative_editor_selection_preview_radius",
          "type": "PT_uint8",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsMapEditor",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "variation_count",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "frame_count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "line_length",
          "description": "Default is the value of <code>variation_count</code>.",
          "type": "PT_uint32",
          "optional": true
        }
      ],
      "parent": "PT_AnimationType",
      "name": "PT_AnimationVariationSheet",
      "link": "/Types/AnimationVariation"
    },
    {
      "properties": [
        {
          "name": "position",
          "description": "Where pipes can connect to this fluidbox regardless the directions of entity.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "positions",
          "description": "Where pipes can connect to this fluidbox, depending on the entity direction.<br>Table must have 4 members, which are 4 explicit positions corresponding to the 4 directions of entity. Positions must correspond to directions going one after another.",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "max_underground_distance",
          "description": "0 means not underground.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "type",
          "type": "PT_PipeConnectionDefinitionType",
          "default": "input-output",
          "optional": true
        }
      ],
      "name": "PT_PipeConnectionDefinition",
      "link": "/Types/PipeConnectionDefinition",
      "description": "<p>Definition of a pipe connection. Used by <a href=\"/Types/FluidBox\" title=\"Types/FluidBox\">Types/FluidBox</a>.</p><p>Either <code>position</code> or <code>positions</code> must be specified. (<code>position</code> takes priority)</p>"
    },
    {
      "properties": [
        {
          "name": "type",
          "description": "Type of the signal that shows this color.",
          "type": "PT_SignalColorMappingType",
          "optional": false
        },
        {
          "name": "name",
          "description": "Name of the signal that shows this color.",
          "type": "string",
          "optional": false
        },
        {
          "name": "color",
          "description": "The color this signal shows.",
          "type": "PT_Color",
          "optional": false
        }
      ],
      "name": "PT_SignalColorMapping",
      "link": "/Types/SignalColorMapping",
      "description": "Used for <a href=\"/Prototype/Lamp#signal_to_color_mapping\" title=\"Prototype/Lamp\">Prototype/Lamp#signal_to_color_mapping</a>"
    },
    {
      "properties": [
        {
          "name": "show_details_in_recipe_tooltip",
          "description": "When hovering over a recipe in the crafting menu the recipe tooltip will be shown. An additional item tooltip will be shown for every product, as a separate tooltip, if the item tooltip has a description and/or properties to show and if show_details_in_recipe_tooltip is true.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_Fluid",
      "prototype": "PT_ProductPrototype",
      "name": "PT_ProductPrototypeFluid",
      "link": "/Types/ProductPrototype"
    },
    {
      "properties": [
        {
          "name": "category",
          "description": "Name of a Prototype/AmmoCategory. Defines whether the attack will be affected by upgrades.",
          "type": "string",
          "optional": false
        },
        {
          "name": "action",
          "description": "Describes actions taken upon attack happening.",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "clamp_position",
          "description": "When true, the gun will be able to shoot even when the target is out of range. Only applies when target_type is position. The gun will fire at the maximum range in the direction of the target position. Defaults to false.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "energy_consumption",
          "description": "Energy consumption of a single shot, if applicable.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "range_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "cooldown_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "consumption_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "target_type",
          "description": "If this is \"entity\", <code>clamp_position</code> is forced to be false. \"entity\" fires at an entity, \"position\" fires directly at a position, \"direction\" fires in a direction.",
          "type": "PT_AmmoTypeTargetType",
          "default": "entity",
          "optional": true
        }
      ],
      "name": "PT_AmmoType",
      "link": "/Types/AmmoType",
      "description": "Definition of actual parameters used in attack."
    },
    {
      "properties": [
        {
          "name": "max_count",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "progress_threshold",
          "description": "If count already playing is true, this will determine maximum progress when instance is counted toward playing sounds.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "remove",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "count_already_playing",
          "description": "If true already playing sounds are taken into account when checking maxCount.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_SoundAggregation",
      "link": "/Prototype/Sound#aggregation"
    },
    {
      "properties": [
        {
          "name": "sheet",
          "description": "<p>An animation. Does not use the <code>layers</code> property. The <code>filename</code> is mandatory.</p><p>The variations are arranged vertically in the file, one row for each variation.</p>",
          "type": "PT_AnimationVariationSheet",
          "optional": true
        },
        {
          "name": "sheets",
          "description": "Array of Types/Animation. The contained animations do not use the <code>layers</code> property. The <code>filename</code> is mandatory.",
          "type": "PT_AnimationVariationSheet[]",
          "optional": true
        }
      ],
      "name": "PT_AnimationVariationValue",
      "link": "/Types/AnimationVariation"
    },
    {
      "properties": [
        {
          "name": "amount",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "type",
          "description": "The type of damage. See <a href=\"/Data.raw#damage-type\" title=\"Data.raw\">Data.raw#damage-type</a> for a list of built-in types, and <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageType</a> for creating custom types.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "name": "PT_DamagePrototype",
      "link": "/Types/DamagePrototype",
      "description": "A property type, NOT a prototype. Used to specify what type of damage and how much damage something deals."
    },
    {
      "properties": [
        {
          "name": "sound",
          "description": "The sound to be played when the entity is working. If sound is not present, the entire WorkingSound is loaded as a <a href=\"/Types/Sound\" title=\"Types/Sound\">Types/Sound</a>.",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "apparent_volume",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "max_sounds_per_type",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "match_progress_to_activity",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "match_volume_to_activity",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "match_speed_to_activity",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "persistent",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "use_doppler_shift",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "audible_distance_modifier",
          "description": "Modifies how far a sound can be heard. Can only be 1 or lower, has to be a positive number.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "probability",
          "description": "Modifies how often the sound is played.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "fade_in_ticks",
          "description": "Can't be used when match_progress_to_activity is true.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "fade_out_ticks",
          "description": "Can't be used when match_progress_to_activity is true.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "idle_sound",
          "description": "The sound to be played when the entity is idle. Might not work with all entities that use working_sound.",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "activate_sound",
          "description": "Might not work with all entities that use working_sound.",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "deactivate_sound",
          "description": "Might not work with all entities that use working_sound.",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "name": "PT_WorkingSound",
      "link": "/Types/WorkingSound",
      "description": "This type is used to produce sound from in-game entities when they are working/idle."
    },
    {
      "properties": [
        {
          "name": "decorative",
          "description": "Name of a <a href=\"/Prototype/Decorative\" title=\"Prototype/Decorative\">Prototype/Decorative</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "spawn_max",
          "type": "PT_uint16",
          "optional": false
        },
        {
          "name": "spawn_min_radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "spawn_max_radius",
          "description": "Must be less than 24.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "spawn_min",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "radius_curve",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "apply_projection",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "spread_evenly",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateDecorativesTriggerEffectItem",
      "link": "/Types/CreateDecorativesTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "fwd2bwd_ratio",
          "description": "Defines whether we prefer forward (>1) or backward (<-1) or symmetrical (1) search.",
          "type": "PT_int32",
          "optional": false
        },
        {
          "name": "goal_pressure_ratio",
          "description": "When comparing nodes in open which one to check next, heuristic value is multiplied by this ratio. The higher the number the more is the search directed directly towards the goal.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "use_path_cache",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "max_steps_worked_per_tick",
          "description": "When this is exhausted no more requests are allowed, at the moment the first path to exhaust this will be finished (even if it is hundreds of steps).",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_work_done_per_tick",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "short_cache_size",
          "description": "Number of elements in the cache.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "long_cache_size",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "short_cache_min_cacheable_distance",
          "description": "Minimal distance to goal for path to be searched in short path cache.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "short_cache_min_algo_steps_to_cache",
          "description": "Minimal number of algorithm steps for path to be inserted into the short path cache.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "long_cache_min_cacheable_distance",
          "description": "Minimal distance to goal for path to be searched in long path cache.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "cache_max_connect_to_cache_steps_multiplier",
          "description": "When searching for connection to path cache path, search at most for this number of steps times the initial estimate.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "cache_accept_path_start_distance_ratio",
          "description": "When looking for path from cache make sure it doesn't start too far from requested start in relative distance terms.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "cache_accept_path_end_distance_ratio",
          "description": "When looking for path from cache make sure it doesn't end too far from requested end. This is typically higher than accept value for the start because the end target can be moving.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "negative_cache_accept_path_start_distance_ratio",
          "description": "Same as cache_accept_path_start_distance_ratio, but used for negative cache queries.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "negative_cache_accept_path_end_distance_ratio",
          "description": "Same as cache_accept_path_end_distance_ratio, but used for negative cache queries.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "cache_path_start_distance_rating_multiplier",
          "description": "When assigning rating to the best path this * start distances is considered.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "cache_path_end_distance_rating_multiplier",
          "description": "When assigning rating to the best path this * end distances is considered. This is typically higher than value for the start to achieve better path end quality.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "stale_enemy_with_same_destination_collision_penalty",
          "description": "Somewhere along the path is stuck enemy we need to avoid. This is mainly to handle situations when units have arrived and are attacking the target then units further in the back will use this and run around the target.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "ignore_moving_enemy_collision_distance",
          "description": "If there is a moving unit further than this we don't really care.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "enemy_with_different_destination_collision_penalty",
          "description": "Enemy is not moving/or is too close and has different destination.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "general_entity_collision_penalty",
          "description": "Simplification for now; collision with everything else is this.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "general_entity_subsequent_collision_penalty",
          "description": "Collision penalty for successors of positions that require destroy to reach.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "extended_collision_penalty",
          "description": "Collision penalty for collisions in the extended bounding box but outside the entity's actual bounding box.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_clients_to_accept_any_new_request",
          "description": "Up until this amount any client will be served by the path finder (no estimate on the path length).",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_clients_to_accept_short_new_request",
          "description": "From max_clients_to_accept_any_new_request till this one only those that have a short estimate will be served.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "direct_distance_to_consider_short_request",
          "description": "This is the \"threshold\" to decide what is short and what is not.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "short_request_max_steps",
          "description": "If a short request takes more than this many steps, it will be rescheduled as a long request.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "short_request_ratio",
          "description": "How many steps will be allocated to short requests each tick, as a ratio of all available steps per tick.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "min_steps_to_check_path_find_termination",
          "description": "Absolute minimum of steps that will be performed for every path find request no matter what.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "start_to_goal_cost_multiplier_to_terminate_path_find",
          "description": "If the current actual cost from start is higher than this times estimate of start to goal then path finding is terminated.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "overload_levels",
          "type": "PT_uint32[]",
          "optional": false
        },
        {
          "name": "overload_multipliers",
          "type": "PT_double[]",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsPathFinder",
      "link": "/Prototype/MapSettings#path_finder"
    },
    {
      "properties": [
        {
          "name": "single",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "straight_vertical",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "straight_horizontal",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_right_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_left_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_right_up",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_left_up",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "t_up",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "t_right",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "t_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "t_left",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_up",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_right",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_left",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "cross",
          "type": "PT_SpriteVariations",
          "optional": false
        }
      ],
      "name": "PT_ConnectableEntityGraphics",
      "link": "/Types/ConnectableEntityGraphics",
      "description": "Graphics for the heat pipe."
    },
    {
      "properties": [
        {
          "name": "damage",
          "type": "PT_DamagePrototype",
          "optional": false
        },
        {
          "name": "apply_damage_to_trees",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "vaporize",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "lower_distance_threshold",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "upper_distance_threshold",
          "type": "PT_uint16",
          "optional": true
        },
        {
          "name": "lower_damage_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "upper_damage_modifier",
          "type": "PT_float",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_DamageTriggerEffectItem",
      "link": "/Types/DamageTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "filename",
          "description": "Technically optional, but path to sprite cannot be empty.",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "layers",
          "description": "<p>If this property is present, all Sprite definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (Sprite definition) in the array may also have the <code>layers</code> property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_SpriteType[]",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the sprite.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "slice",
          "description": "<p>Number of slices this is sliced into when using the \"optimized atlas packing\" option. If you are a modder, you can just ignore this property.</p><p>Example: If this is 4, the sprite will be sliced into a 4×4 grid.</p>",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice",
          "description": "<p>Number of slices this is sliced into when using the \"optimized atlas packing\" option. If you are a modder, you can just ignore this property.</p><p>Example: If this is 4, the sprite will be sliced into a 4×4 grid.</p>",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_x",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the x axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice_x",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the x axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "slice_y",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the y axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "dice_y",
          "description": "Same as <code>slice</code> or <code>dice</code> above, but this specifies only how many slices there are on the y axis.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the sprite. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if size is not given. Width of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if size is not given. Height of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "shift",
          "description": "In tiles. util.by_pixel() can be used to divide the shift by 32 which is the usual pixel height/width of 1 tile in normal resolution. Note that 32 pixel tile height/width is not enforced anywhere - any other tile height or width is also possible.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the sprite on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "This property is only used by sprites used in <a href=\"/Prototype/UtilitySprites\" title=\"Prototype/UtilitySprites\">Prototype/UtilitySprites</a> that have the \"icon\" flag.<br>If this is set to true, the game will generate an icon shadow (using signed distance fields) for the sprite.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "name": "PT_SpriteType",
      "link": "/Types/Sprite",
      "description": "<p>Specifies one picture that can be used in the game.</p><p>When there is more than one sprite or <a href=\"/Types/Animation\" title=\"Types/Animation\">animation</a> frame with the same source file and dimensions/position in the game, they all share the same memory.</p>"
    },
    {
      "properties": [
        {
          "name": "art_style",
          "description": "The visualization is chosen based on the <a href=\"/Prototype/Module#art_style\" title=\"Prototype/Module\">Prototype/Module#art_style</a>, meaning if module art style == beacon module visualization art style then this visualization is chosen. Vanilla uses \"vanilla\" here.",
          "type": "string",
          "optional": false
        },
        {
          "name": "use_for_empty_slots",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tier_offset",
          "type": "PT_int32",
          "default": "0",
          "optional": true
        },
        {
          "name": "slots",
          "description": "The outer array contains the different slots, the inner array contains the different layers for those slots (with different tints etc).",
          "type": "PT_BeaconModuleVisualization[][]",
          "optional": true
        }
      ],
      "name": "PT_BeaconModuleVisualizations",
      "link": "/Types/BeaconModuleVisualizations",
      "description": "Used by <a href=\"/Types/BeaconGraphicsSet\" title=\"Types/BeaconGraphicsSet\">Types/BeaconGraphicsSet</a> (<a href=\"/Prototype/Beacon\" title=\"Prototype/Beacon\">Prototype/Beacon</a>)."
    },
    {
      "properties": [
        {
          "name": "default",
          "type": "PT_MapSettingsSteeringDefault",
          "optional": false
        },
        {
          "name": "moving",
          "type": "PT_MapSettingsSteeringMoving",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsSteering",
      "link": "/Prototype/MapSettings#steering"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_vector[]",
          "optional": true
        }
      ],
      "name": "PT_CraftingMachineShiftAnimationWaypoints",
      "link": "/Prototype/CraftingMachine#shift_animation_waypoints"
    },
    {
      "properties": [
        {
          "name": "projectile",
          "description": "Name of a <a href=\"/Prototype/Projectile\" title=\"Prototype/Projectile\">Prototype/Projectile</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "starting_speed",
          "description": "Starting speed in tiles per tick.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "starting_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "direction_deviation",
          "description": "Maximum deviation of the projectile from source orientation, in +/- ( x radians / 2). Example: 3.14 radians -> +/- (180° / 2), meaning up to 90° deviation in either direction of rotation.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "range_deviation",
          "description": "In tiles. Post-deviation range may exceed max_range or be less than min_range.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_range",
          "type": "PT_double",
          "default": "1000",
          "optional": true
        },
        {
          "name": "min_range",
          "type": "PT_double",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_ProjectileTriggerDelivery",
      "link": "/Types/ProjectileTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "frames",
          "description": "Sizes of all <code>frames</code> arrays must be the same.",
          "type": "PT_vector[]",
          "optional": false
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "optional": true
        }
      ],
      "name": "PT_AnimatedVectorRotation",
      "link": "/Prototype/AnimatedVector#rotations"
    },
    {
      "properties": [
        {
          "name": "destroy_when_commands_fail",
          "description": "If enabled, units that repeatedly fail to succeed at commands will be destroyed.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "allow_try_return_to_spawner",
          "description": "If enabled, units that have nothing else to do will attempt to return to a spawner.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "do_separation",
          "description": "If enabled, units will try to separate themselves from nearby friendly units.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "path_resolution_modifier",
          "description": "Must be between -8 and 8.",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_UnitAISettings",
      "link": "/Types/UnitAISettings",
      "description": "Used by <a href=\"/Prototype/Unit\" title=\"Prototype/Unit\">Prototype/Unit</a>."
    },
    {
      "properties": [
        {
          "name": "idle",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "idle_with_gun",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "running",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "running_with_gun",
          "description": "Must contain exactly 18 directions, so all of the combination of gun direction and moving direction can be covered. Some of these variations are used in reverse to save space. You can use the character animation in the base game for reference.",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "mining_with_tool",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "flipped_shadow_running_with_gun",
          "description": "flipped_shadow_running_with_gun must be nil or contain exactly 18 directions, so all of the combination of gun direction and moving direction can be covered. Some of these variations are used in reverse to save space. You can use the character animation in the base game for reference. flipped_shadow_running_with_gun has to have same frame count as running_with_gun.",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "armors",
          "description": "The names of the armors this animation data is used for. Don't define this if you want the animations to be used for the player without armor.",
          "type": "string[]",
          "optional": true
        }
      ],
      "name": "PT_CharacterArmorAnimation",
      "link": "/Types/CharacterArmorAnimation"
    },
    {
      "properties": [
        {
          "name": "count",
          "description": "Frame count.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "picture",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the tile sprite.",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "scale",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "line_length",
          "type": "PT_uint32",
          "optional": true
        }
      ],
      "name": "PT_TileSprite",
      "link": "/Types/TileSprite",
      "description": "Used by <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a>."
    },
    {
      "properties": [
        {
          "name": "radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "explosion",
          "description": "Name of an entity.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_DestroyCliffsTriggerEffectItem",
      "link": "/Types/DestroyCliffsTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "tiles",
          "description": "Each CreateParticleTriggerEffectItem needs the extra mandatory property tiles, which is a table (array) of string which is the name of a tile.",
          "type": "string[]",
          "optional": false
        },
        {
          "name": "actions",
          "description": "Alternatively, instead of specifying the CreateParticleTriggerEffectItem directly in the table with the <code>tiles</code> property, a <code>actions</code> property that is an array of CreateParticleTriggerEffectItem can be specified in the table with the <code>tiles</code> property.",
          "type": "PT_CreateParticleTriggerEffectItem[]",
          "optional": true
        },
        {
          "name": "use_as_default",
          "description": "Furthermore, the table with the <code>tiles</code> property can contain a <code>use_as_default</code> property which is a boolean value. <code>use_as_default</code> defaults to false. When it is set to true, the trigger(s) defined in that table are the default triggers for tiles that don't have an associated footstep particle trigger (don't show up in one of the \"tiles\" lists).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_CreateParticleTriggerEffectItem",
      "name": "PT_FootstepTriggerEffectListValue",
      "link": "/Types/FootprintParticle"
    },
    {
      "properties": [
        {
          "name": "width_in_frames",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "height_in_frames",
          "description": "Mandatory when <a class=\"mw-selflink selflink\">Types/Stripe</a> is used in <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a>, optional when it is used in <a href=\"/Types/RotatedAnimation\" title=\"Types/RotatedAnimation\">Types/RotatedAnimation</a> and then it defaults to <a href=\"/Types/RotatedAnimation#direction_count\" title=\"Types/RotatedAnimation\">Types/RotatedAnimation#direction_count</a>.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "filename",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "x",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "type": "PT_uint32",
          "default": "0",
          "optional": false
        }
      ],
      "name": "PT_Stripe",
      "link": "/Types/Stripe",
      "description": "Used as an alternative way to specify animations."
    },
    {
      "properties": [
        {
          "name": "distance",
          "type": "PT_float",
          "optional": false
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_PushBackTriggerEffectItem",
      "link": "/Types/PushBackTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "show_details_in_recipe_tooltip",
          "description": "When hovering over a recipe in the crafting menu the recipe tooltip will be shown. An additional item tooltip will be shown for every product, as a separate tooltip, if the item tooltip has a description and/or properties to show and if show_details_in_recipe_tooltip is true.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "parent": "PT_ItemProductPrototype:PT_ProductPrototype",
      "name": "PT_ProductPrototypeItem",
      "link": "/Types/ProductPrototype"
    },
    {
      "properties": [
        {
          "name": "stream",
          "description": "Name of a <a href=\"/Prototype/FluidStream\" title=\"Prototype/FluidStream\">Prototype/FluidStream</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "source_offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_StreamTriggerDelivery",
      "link": "/Types/StreamTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "icon",
          "description": "Path to the icon file.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "icons",
          "description": "The rendering order of the individual icons follows the table (array) order: Later added icons (higher index) get drawn on top of previously added icons (lower index). Can't be an empty table.",
          "type": "PT_IconData[]",
          "optional": true
        },
        {
          "name": "icon_size",
          "description": "Mandatory if <code>icon_size</code> is not specified inside all instances of <a href=\"/Types/IconData\" title=\"Types/IconData\">Types/IconData</a> inside <code>icons</code>. The size of the square icon, in pixels, e.g. 32 for a 32px by 32px icon.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "icon_mipmaps",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_IconSpecification",
      "link": "/Types/IconSpecification",
      "description": "<p>Specifies the icon of an entity/item/technology/recipe etc. The properties are specified directly in the prototype, not in another sub-property.</p><p>Either <code>icons</code> and optionally <code>icon_size</code>, or both <code>icon</code> and <code>icon_size</code> have to be specified. If both <code>icons</code> and <code>icon</code> are defined, <code>icon</code> is ignored.</p>"
    },
    {
      "properties": [
        {
          "name": "range",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": true
        },
        {
          "name": "reaction_modifier",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "damage_type",
          "description": "Name of a <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageType</a>.",
          "type": "string",
          "optional": true
        }
      ],
      "name": "PT_AttackReactionItem",
      "link": "/Types/AttackReactionItem",
      "description": "Used by <a href=\"/Types/AttackReaction\" title=\"Types/AttackReaction\">Types/AttackReaction</a>."
    },
    {
      "properties": [
        {
          "name": "icon",
          "description": "Path to the icon file.",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "icon_size",
          "description": "Mandatory if <code>icon_size</code> is not specified outside of <code>icons</code>. The size of the square icon, in pixels, e.g. 32 for a 32px by 32px icon.",
          "type": "PT_SpriteSizeType",
          "optional": false
        },
        {
          "name": "tint",
          "description": "Tint of the icon.",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "shift",
          "description": "Used to offset the icon \"layer\" from the overall icon.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Default for items/recipes: (32/icon_size)<br>Default for technologies: (256/icon_size)<br>When set, specifies the scale of the icon on the GUI scale. Scale 2 means that the icon will be 2 times bigger on screen (and more pixelated). ",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "icon_mipmaps",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_IconData",
      "link": "/Types/IconData",
      "description": "Data of one icon \"layer\" for the <code>icons</code> property of the <a href=\"/Types/IconSpecification\" title=\"Types/IconSpecification\">Types/IconSpecification</a>."
    },
    {
      "properties": [
        {
          "name": "source_effects",
          "type": "PT_TriggerEffect",
          "optional": true
        },
        {
          "name": "target_effects",
          "type": "PT_TriggerEffect",
          "optional": true
        }
      ],
      "name": "PT_TriggerDeliveryBase",
      "link": "/Types/TriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "The name of a <a href=\"/Prototype/Fluid\" title=\"Prototype/Fluid\">Prototype/Fluid</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "probability",
          "description": "Value between 0 and 1, 0 for 0% chance and 1 for 100% chance.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "probability",
          "description": "Value between 0 and 1, 0 for 0% chance and 1 for 100% chance.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "amount",
          "description": "Cannot be < 0. If this is present, <code>amount_min</code> and <code>amount_max</code> are not loaded.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "amount_min",
          "description": "<p>Mandatory if <code>amount</code> is not specified.</p><p>May not be < 0.</p>",
          "type": "PT_MaterialAmountType",
          "optional": true
        },
        {
          "name": "amount_max",
          "description": "<p>Mandatory if <code>amount</code> is not specified.</p><p>If set to a number that is less than <code>amount_min</code>, the game will use <code>amount_min</code> internally.</p>",
          "type": "PT_MaterialAmountType",
          "optional": true
        },
        {
          "name": "temperature",
          "description": "Sets the temperature of the fluid product.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "catalyst_amount",
          "description": "Amount that should not be affected by productivity modules (not yielded from bonus production) and should not be included in the fluid production statistics.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "fluidbox_index",
          "description": "Used to specify which fluidbox this product should use on the machine. It will only use this one fluidbox.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_FluidProductPrototype",
      "link": "/Types/FluidProductPrototype"
    },
    {
      "properties": [
        {
          "name": "count",
          "description": "Frame count.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "picture",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the tile transition sprite.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "tall",
          "description": "If this is true, the shift of the tile transition sprite is set to {0, 0.5}.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "scale",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_TileTransitionSprite",
      "link": "/Types/TileTransitionSprite",
      "description": "Used by <a href=\"/Types/TileTransitions\" title=\"Types/TileTransitions\">Types/TileTransitions</a> which is used by <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a>."
    },
    {
      "properties": [
        {
          "name": "direction_in",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "direction_out",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "back_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "front_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "direction_in_side_loading",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "direction_out_side_loading",
          "type": "PT_Sprite4Way",
          "optional": true
        }
      ],
      "name": "PT_UndergroundBeltStructure",
      "link": "/Prototype/UndergroundBelt#structure"
    },
    {
      "properties": [
        {
          "name": "main",
          "type": "PT_TileVariantsMain",
          "optional": false
        },
        {
          "name": "material_background",
          "description": "Width and height are given by the game, setting them will not have an effect. Width and height are calculated from the expected size (32) and the scale. So, for HR tiles at a size of 64x64, the scale needs to be 0.5.",
          "type": "PT_TileSprite",
          "optional": true
        }
      ],
      "parent": "PT_TileTransitions",
      "name": "PT_TileVariants",
      "link": "/Prototype/Tile#variants"
    },
    {
      "properties": [
        {
          "name": "buffer_capacity",
          "description": "Optional. How much power the entity holds.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "usage_priority",
          "type": "PT_ElectricUsagePriority",
          "optional": false
        },
        {
          "name": "input_flow_limit",
          "description": "How fast the energy can flow into the entity. 0 means 0.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "output_flow_limit",
          "description": "How fast the energy can flow out of the entity. 0 means 0.",
          "type": "PT_Energy",
          "optional": true
        },
        {
          "name": "drain",
          "description": "How much energy the entity will always \"drain\" from the network, even when not in use.",
          "type": "PT_Energy",
          "optional": true
        }
      ],
      "parent": "PT_EnergySourceBase",
      "prototype": "PT_EnergySource",
      "name": "PT_EnergySourceElectric",
      "link": "/Types/EnergySource"
    },
    {
      "properties": [
        {
          "name": "enabled",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "max_expansion_distance",
          "description": "Distance in chunks from the furthest base around. This prevents expansions from reaching too far into the player's territory.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "friendly_base_influence_radius",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "enemy_building_influence_radius",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "building_coefficient",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "other_base_coefficient",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "neighbouring_chunk_coefficient",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "neighbouring_base_chunk_coefficient",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_colliding_tiles_coefficient",
          "description": "A chunk has to have at most this much percent unbuildable tiles for it to be considered a candidate. This is to avoid chunks full of water to be marked as candidates.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "settler_group_min_size",
          "description": "Size of the group that goes to build new base (the game interpolates between min size and max size based on evolution factor).",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "settler_group_max_size",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "min_expansion_cooldown",
          "description": "Ticks to expand to a single position for a base is used. Cooldown is calculated as follows: <code>cooldown = lerp(max_expansion_cooldown, min_expansion_cooldown, -e^2 + 2 * e)</code> where lerp is the linear interpolation function, and e is the current evolution factor.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_expansion_cooldown",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsEnemyExpansion",
      "link": "/Prototype/MapSettings#enemy_expansion"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "name": "PT_BoilerPatch",
      "link": "/Prototype/Boiler#mode"
    },
    {
      "properties": [
        {
          "name": "[1]",
          "description": "<p>The first member states at which <a href=\"/Time#Days\" title=\"Time\">time of the day</a> the <a href=\"#Second_member\">LUT</a> should be used.</p><p>If the current game time is between two values defined in the color lookup that have different LUTs, the color is interpolated to create a smooth transition. (Sharp transition can be achieved by having the two values differing only by a small fraction.)</p><p>Only one inner array means that the LUT will be used all the time, regardless of the value of the first member.</p>",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "[2]",
          "description": "The second member is a lookup table (LUT) for the color which maps the original color to a position in the sprite where is the replacement color is found.",
          "type": "string",
          "optional": false
        }
      ],
      "name": "PT_DaytimeColorLookupTableValue",
      "link": "Types/DaytimeColorLookupTable",
      "description": "The first member of the inner array must be a <a href=\"/Types/double\" title=\"Types/double\">double</a>, second member of the inner array must be a <a href=\"/Types/FileName\" title=\"Types/FileName\">FileName</a> or \"identity\". The file pointed to by the filename must be a sprite of size 256×16 or 16×256."
    },
    {
      "properties": [
        {
          "name": "action",
          "type": "PT_Trigger",
          "optional": false
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_NestedTriggerEffectItem",
      "link": "/Types/NestedTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "left",
          "description": "Min value 6, max value 15 - Min value 6 to compensate for shadows",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "top",
          "description": "Min value 3, max value 15",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "right",
          "description": "Min value 3, max value 15",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "bottom",
          "description": "Min value 4, max value 15 - Min value 4 to compensate for tall entities like electric poles",
          "type": "PT_uint8",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsEntityRendererSearchBoxLimits",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "north",
          "description": "Optional. If omitted and neither <a href=\"#sheets\">#sheets</a> or <a href=\"#sheet\">#sheet</a> are present, the game will not look for any other directions and instead try to load the whole definition as one <a href=\"/Types/Sprite\" title=\"Types/Sprite\">Types/Sprite</a> and apply it to all directions.",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "sheets",
          "description": "Optional. If given, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet[]",
          "optional": true
        },
        {
          "name": "sheet",
          "description": "Optional. If given, and <a href=\"#sheets\">#sheets</a> isnt present, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet",
          "optional": true
        }
      ],
      "name": "PT_Sprite4WayValue",
      "link": "/Types/Sprite4Way"
    },
    {
      "properties": [
        {
          "name": "direction_in",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "direction_out",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "back_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "front_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        }
      ],
      "name": "PT_LoaderStructure",
      "link": "/Prototype/Loader1x2#structure"
    },
    {
      "properties": [
        {
          "name": "r",
          "description": "red value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "g",
          "description": "green value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "b",
          "description": "blue value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "a",
          "description": "alpha value - transparency",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "[1]",
          "description": "red value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "[2]",
          "description": "green value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "[3]",
          "description": "blue value",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "[4]",
          "description": "alpha value - transparency",
          "type": "PT_float",
          "default": "1",
          "optional": true
        }
      ],
      "name": "PT_Color",
      "link": "/Types/Color",
      "description": "<p>Table of red, green, blue, and alpha float values between 0 and 1. All values are optional, default optional value for colors is 0, for alpha 1. Alternatively, values can be from 0-255, they are interpreted as such if at least one value is > 1.</p><p>Color allows the short-hand notation of passing an array of exactly 3 or 4 numbers.</p><p>The game usually expects colors to be in pre-multiplied form (color channels are pre-multiplied by alpha).</p>"
    },
    {
      "properties": [
        {
          "name": "animation_set",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "east_index",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "west_index",
          "type": "PT_uint8",
          "default": "2",
          "optional": true
        },
        {
          "name": "north_index",
          "type": "PT_uint8",
          "default": "3",
          "optional": true
        },
        {
          "name": "south_index",
          "type": "PT_uint8",
          "default": "4",
          "optional": true
        },
        {
          "name": "starting_south_index",
          "type": "PT_uint8",
          "default": "13",
          "optional": true
        },
        {
          "name": "ending_south_index",
          "type": "PT_uint8",
          "default": "14",
          "optional": true
        },
        {
          "name": "starting_west_index",
          "type": "PT_uint8",
          "default": "15",
          "optional": true
        },
        {
          "name": "ending_west_index",
          "type": "PT_uint8",
          "default": "16",
          "optional": true
        },
        {
          "name": "starting_north_index",
          "type": "PT_uint8",
          "default": "17",
          "optional": true
        },
        {
          "name": "ending_north_index",
          "type": "PT_uint8",
          "default": "18",
          "optional": true
        },
        {
          "name": "starting_east_index",
          "type": "PT_uint8",
          "default": "19",
          "optional": true
        },
        {
          "name": "ending_east_index",
          "type": "PT_uint8",
          "default": "20",
          "optional": true
        },
        {
          "name": "ending_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "ends_with_stopper",
          "type": "PT_Sprite4Way",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_TransportBeltConnectableBeltAnimationSet",
      "link": "/Prototype/TransportBeltConnectable#belt_animation_set"
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "notes",
          "type": "PT_ProgrammableSpeakerInstrumentNote[]",
          "optional": false
        }
      ],
      "name": "PT_ProgrammableSpeakerInstrument",
      "link": "/Prototype/ProgrammableSpeaker#instruments"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "east",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "south",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "west",
          "type": "PT_AnimationType",
          "optional": false
        }
      ],
      "name": "PT_AnimationSidesMandatory",
      "link": "/Prototype/Boiler#fire"
    },
    {
      "properties": [
        {
          "name": "minimum_intensity",
          "description": "Brightness of the light in the range [0, 1] where 0 is no light and 1 is the maximum light.",
          "type": "PT_float",
          "default": "0.2",
          "optional": true
        },
        {
          "name": "maximum_intensity",
          "description": "Brightness of the light in the range [0, 1] where 0 is no light and 1 is the maximum light.",
          "type": "PT_float",
          "default": "0.8",
          "optional": true
        },
        {
          "name": "derivation_change_frequency",
          "type": "PT_float",
          "default": "0.3",
          "optional": true
        },
        {
          "name": "derivation_change_deviation",
          "type": "PT_float",
          "default": "0.06",
          "optional": true
        },
        {
          "name": "border_fix_speed",
          "type": "PT_float",
          "default": "0.02",
          "optional": true
        },
        {
          "name": "minimum_light_size",
          "description": "The radius of the light in tiles. Note, that the light gets darker near the edges, so the effective size of the light seems to be smaller.",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "light_intensity_to_size_coefficient",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "color",
          "description": "Color of the light.",
          "type": "PT_Color",
          "optional": true
        }
      ],
      "name": "PT_LightFlickeringDefinition",
      "link": "/Types/LightFlickeringDefinition",
      "description": "Specifies the light flicker. Note that this defaults to \"showing a white light\" instead of the usually expected \"showing nothing\"."
    },
    {
      "properties": [
        {
          "name": "north",
          "description": "<p>Optional. If omitted, the game will not look for any other directions and instead try to load the whole definition as one <a href=\"/Types/RotatedAnimation\" title=\"Types/RotatedAnimation\">Types/RotatedAnimation</a> and apply it to all directions.</p><p>If north is present, but no other directions are present, the north rotated animation is used for all directions.</p>",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "east",
          "description": "If east is present, but west is not present, the east rotated animation is used for the west direction.",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "south",
          "type": "PT_RotatedAnimation",
          "optional": false
        },
        {
          "name": "west",
          "type": "PT_RotatedAnimation",
          "optional": false
        }
      ],
      "name": "PT_RotatedAnimation4WayValue",
      "link": "/Types/RotatedAnimation"
    },
    {
      "properties": [
        {
          "name": "tile_collision_mask",
          "type": "PT_CollisionMask",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_InvokeTileEffectTriggerEffectItem",
      "link": "/Types/InvokeTileEffectTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "trunk",
          "description": "If <code>shadow</code> is not specified, this has to have one more frame than <code>leaves</code>.",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "leaves",
          "type": "PT_AnimationType",
          "optional": false
        },
        {
          "name": "leaf_generation",
          "type": "PT_CreateParticleTriggerEffectItem",
          "optional": false
        },
        {
          "name": "branch_generation",
          "type": "PT_CreateParticleTriggerEffectItem",
          "optional": false
        },
        {
          "name": "shadow",
          "description": "Shadow must have 1 less frame_count than <code>leaves</code> (shadow.frame_count = leaves.frame_count + 1).",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "disable_shadow_distortion_beginning_at_frame",
          "description": "Only loaded if <code>shadow</code> is present. Defaults to shadow.frame_count - 1.",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "normal",
          "description": "Normal must have the same frame_count as <code>leaves</code> (normal.frame_count = leaves.frame_count).",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "water_reflection",
          "type": "PT_WaterReflectionDefinition",
          "optional": true
        }
      ],
      "name": "PT_TreePrototypeVariation",
      "link": "/Types/TreePrototypeVariation",
      "description": "Graphics definition for a <a href=\"/Prototype/Tree\" title=\"Prototype/Tree\">Prototype/Tree</a>."
    },
    {
      "properties": [
        {
          "name": "min_group_gathering_time",
          "description": "Pollution triggered group waiting time is a random time between min and max gathering time",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_group_gathering_time",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_wait_time_for_late_members",
          "description": "After the gathering is finished the group can still wait for late members, but it doesn't accept new ones anymore.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_group_radius",
          "description": "Limits for group radius (calculated by number of numbers).",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "min_group_radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_member_speedup_when_behind",
          "description": "When a member falls behind the group he can speedup up till this much of his regular speed.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_member_slowdown_when_ahead",
          "description": "When a member gets ahead of its group, it will slow down to at most this factor of its speed.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_group_slowdown_factor",
          "description": "When members of a group are behind, the entire group will slow down to at most this factor of its max speed.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_group_member_fallback_factor",
          "description": "If a member falls behind more than this times the group radius, the group will slow down to max_group_slowdown_factor.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "member_disown_distance",
          "description": "If a member falls behind more than this time the group radius, it will be removed from the group.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "tick_tolerance_when_member_arrives",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_gathering_unit_groups",
          "description": "Maximum number of automatically created unit groups gathering for attack at any time.",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "max_unit_group_size",
          "description": "Maximum size of an attack unit group. This only affects automatically-created unit groups; manual groups created through the API are unaffected.",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsSteeringUnitGroup",
      "link": "/Prototype/MapSettings#unit_group"
    },
    {
      "properties": [
        {
          "name": "radius",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "separation_factor",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "separation_force",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "force_unit_fuzzy_goto_behavior",
          "description": "Used only for special \"to look good\" purposes (like in trailer)",
          "type": "PT_bool",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsSteeringMoving",
      "link": "/Prototype/MapSettings#steering"
    },
    {
      "properties": [
        {
          "name": "recipe_difficulty",
          "description": "A <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/defines.html#defines.difficulty_settings\">defines.difficulty_settings.recipe_difficulty</a>.",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "technology_difficulty",
          "description": "A <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/defines.html#defines.difficulty_settings\">defines.difficulty_settings.technology_difficulty</a>.",
          "type": "PT_uint8",
          "optional": false
        },
        {
          "name": "technology_price_multiplier",
          "description": "Must be >= 0.001 and <= 1000.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "research_queue_setting",
          "type": "PT_MapSettingsDifficultySettingsResearchQueueSetting",
          "optional": true
        }
      ],
      "name": "PT_MapSettingsDifficultySettings",
      "link": "/Prototype/MapSettings#difficulty_settings"
    },
    {
      "properties": [
        {
          "name": "source_direction_count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "source_offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_BaseAttackParameters",
      "prototype": "PT_AttackParameters",
      "name": "PT_BeamAttackParameters",
      "link": "/Types/BeamAttackParameters"
    },
    {
      "properties": [
        {
          "name": "warmup_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "warmup2_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "attacking_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "cooldown_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "prepared_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "back_to_walk_frame_sequence",
          "description": "Indices of frames from the attack parameter animation.",
          "type": "PT_uint16[]",
          "optional": false
        },
        {
          "name": "warmup_animation_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "attacking_animation_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "cooldown_animation_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "prepared_animation_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "back_to_walk_animation_speed",
          "type": "PT_float",
          "optional": false
        }
      ],
      "name": "PT_UnitAlternativeAttackingFrameSequence",
      "link": "/Prototype/Unit#alternative_attacking_frame_sequence"
    },
    {
      "properties": [
        {
          "name": "types",
          "description": "Name or names of <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageTypes</a>.",
          "type": "string|string[]",
          "optional": false
        },
        {
          "name": "whitelist",
          "description": "Whether this is a whitelist or a blacklist of damage types. Defaults to being a blacklist.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_DamageTypeFiltersValue",
      "link": "/Types/DamageTypeFilters"
    },
    {
      "properties": [
        {
          "name": "points",
          "description": "Only used when when using <code>type</code> \"manual\". Each inner array is a \"position\" inside width×height of the equipment. Each positions that is defined is a filled squares of the equipment shape. {0, 0} is the upper left corner of the equipment.",
          "type": "PT_uint32[][]",
          "optional": false
        }
      ],
      "parent": "PT_EquipmentShapeBase",
      "prototype": "PT_EquipmentShape",
      "name": "PT_EquipmentShapeManual",
      "link": "/Types/EquipmentShape"
    },
    {
      "properties": [
        {
          "name": "filename",
          "description": "Supported sound file formats are `.ogg`, `.wav` and `.voc`.",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "volume",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "preload",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "speed",
          "description": "Speed must be >= 1 / 64. This sets both min and max speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "min_speed",
          "description": "Not loaded if speed is present. Speed must be >= 1 / 64.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "max_speed",
          "description": "Mandatory if min_speed is present, otherwise not loaded. Must be >= min_speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        }
      ],
      "name": "PT_SoundValue2",
      "link": "/Types/Sound"
    },
    {
      "properties": [
        {
          "name": "aggregation",
          "type": "PT_SoundAggregation",
          "optional": true
        },
        {
          "name": "allow_random_repeat",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "audible_distance_modifier",
          "description": "Modifies how far a sound can be heard. Must be between 0 and 1 (inclusive).",
          "type": "PT_double",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "variations",
          "type": "PT_SoundValue2[]",
          "optional": true
        },
        {
          "name": "filename",
          "description": "Mandatory if <code>variations</code> is not given.<br>Supported sound file formats are `.ogg`, `.wav` and `.voc`.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "volume",
          "description": "Only loaded if <code>variations</code> is not given.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "preload",
          "description": "Only loaded if <code>variations</code> is not given.",
          "type": "PT_bool",
          "optional": true
        },
        {
          "name": "speed",
          "description": "Only loaded if <code>variations</code> is not given. Speed must be >= 1 / 64. This sets both min and max speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "min_speed",
          "description": "Only loaded if <code>variations</code> is not given. Not loaded if speed is present. Speed must be >= 1 / 64.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        },
        {
          "name": "max_speed",
          "description": "Only loaded if <code>variations</code> is not given. Mandatory if min_speed is present, otherwise not loaded. Must be >= min_speed.",
          "type": "PT_float",
          "default": "1.0",
          "optional": true
        }
      ],
      "name": "PT_SoundValue1",
      "link": "/Types/Sound"
    },
    {
      "properties": [
        {
          "name": "particle_name",
          "description": "Name of a <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "initial_height",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "offset_deviation",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "show_in_tooltip",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tile_collision_mask",
          "type": "PT_CollisionMask",
          "optional": true
        },
        {
          "name": "offsets",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "initial_height_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "initial_vertical_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "initial_vertical_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "frame_speed",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "frame_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "tail_length",
          "description": "Silently capped to a maximum of 100.",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "tail_length_deviation",
          "description": "Silently capped to a maximum of 100.",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "tail_width",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "rotate_offsets",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateParticleTriggerEffectItem",
      "link": "/Types/CreateParticleTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "uses_stack",
          "description": "Whether using the capsule consumes an item from the stack.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "prototype": "PT_CapsuleAction",
      "name": "PT_ThrowCapsuleAction",
      "link": "/Types/ThrowCapsuleAction"
    },
    {
      "properties": [
        {
          "name": "sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "is_whole_box",
          "description": "Whether this is a complete box or just the top left corner. If this is true, <code>side_length</code> and <code>side_height</code> must be present. Otherwise <code>max_side_length</code> must be present.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "side_length",
          "description": "Only read if <code>is_whole_box</code> is true.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "side_height",
          "description": "Only read if <code>is_whole_box</code> is true.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "max_side_length",
          "description": "Only read if <code>is_whole_box</code> is false.",
          "type": "PT_double",
          "optional": true
        }
      ],
      "name": "PT_BoxSpecification",
      "link": "/Types/BoxSpecification"
    },
    {
      "properties": [
        {
          "name": "type",
          "description": "Name of a <a href=\"/Prototype/Fluid\" title=\"Prototype/Fluid\">Prototype/Fluid</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "damage_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "name": "PT_StreamAttackParametersFluid",
      "link": "/Types/StreamAttackParameters#fluids"
    },
    {
      "properties": [
        {
          "name": "emissions_per_minute",
          "description": "The pollution an entity emits per minute at full energy consumption. <code>emissions_per_minute</code> is exactly the value that is shown in the entity tooltip.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "render_no_power_icon",
          "description": "Optional. Whether to render the Electricity-icon-red.png icon on the entity if it is low on power. Also applies to Fuel-icon-red.png when using a burner energy source.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "render_no_network_icon",
          "description": "Optional. Whether to render the Electricity-icon-unplugged.png icon on the entity if it is not connected to a electric network.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "prototype": "PT_EnergySource",
      "name": "PT_EnergySourceBase",
      "link": "/Types/EnergySource"
    },
    {
      "properties": [
        {
          "name": "sound",
          "type": "PT_SoundType",
          "optional": false
        },
        {
          "name": "min_distance",
          "description": "Negative values are silently clamped to 0.",
          "type": "PT_float",
          "default": "0",
          "optional": false
        },
        {
          "name": "max_distance",
          "description": "Negative values are silently clamped to 0.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "volume_modifier",
          "description": "Negative values are silently clamped to 0.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "audible_distance_modifier",
          "description": "Negative values are silently clamped to 0.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "play_on_target_position",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_PlaySoundTriggerEffectItem",
      "link": "/Types/PlaySoundTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "led_red",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "led_green",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "led_blue",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "led_light",
          "type": "PT_LightDefinition",
          "optional": false
        },
        {
          "name": "connector_main",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "connector_shadow",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "wire_pins",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "wire_pins_shadow",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "led_blue_off",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "blue_led_light_offset",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "red_green_led_light_offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "name": "PT_CircuitConnectorSprites",
      "link": "/Types/CircuitConnectorSprites"
    },
    {
      "properties": [
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "fadeout",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "synced_fadeout",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "constant_speed",
          "description": "Whether the animations are always played at the same speed, not adjusted to the machine speed.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "always_draw",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "animated_shift",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "align_to_waypoint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Used to determine render order for sprites with the same <code>render_layer</code> in the same position. Sprites with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "optional": true
        },
        {
          "name": "draw_as_sprite",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_as_light",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "effect",
          "type": "PT_WorkingVisualisationEffect",
          "optional": true
        },
        {
          "name": "apply_recipe_tint",
          "type": "PT_BeaconGraphicsSetApplymoduleTint",
          "optional": true
        },
        {
          "name": "apply_tint",
          "description": "<p>Either \"resource-color\", \"input-fluid-base-color\", \"input-fluid-flow-color\", \"status\" or \"none\". Used by <a href=\"/Prototype/CraftingMachine\" title=\"Prototype/CraftingMachine\">Prototype/CraftingMachine</a> (\"status\" only) and <a href=\"/Prototype/MiningDrill\" title=\"Prototype/MiningDrill\">Prototype/MiningDrill</a>.</p><ul><li>For \"status\" on CraftingMachine, the colors are specified via <a href=\"/Prototype/CraftingMachine#status_colors\" title=\"Prototype/CraftingMachine\">Prototype/CraftingMachine#status_colors</a>.</li><li>For \"status\" on MiningDrill, the colors are specified via <a href=\"/Types/MiningDrillGraphicsSet#status_colors\" title=\"Types/MiningDrillGraphicsSet\">Types/MiningDrillGraphicsSet#status_colors</a>.</li><li>For \"resource-color\", the colors are specified via <a href=\"/Prototype/ResourceEntity#mining_visualisation_tint\" title=\"Prototype/ResourceEntity\">Prototype/ResourceEntity#mining_visualisation_tint</a>.</li></ul>",
          "type": "PT_WorkingVisualisationApplyTint",
          "optional": true
        },
        {
          "name": "north_animation",
          "description": "Either these animations for the directions are loaded (though they are still optional), or <code>animation</code> is loaded.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "west_animation",
          "description": "Either these animations for the directions are loaded (though they are still optional), or <code>animation</code> is loaded.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "south_animation",
          "description": "Either these animations for the directions are loaded (though they are still optional), or <code>animation</code> is loaded.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "east_animation",
          "description": "Either these animations for the directions are loaded (though they are still optional), or <code>animation</code> is loaded.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "animation",
          "description": "If this is present, this is loaded, otherwise the animation properties for each direction are loaded. ",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "north_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "west_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "south_position",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "east_position",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "name": "PT_WorkingVisualisation",
      "link": "/Types/WorkingVisualisation",
      "description": "Used by crafting machines to display different graphics when the machine is running."
    },
    {
      "properties": [
        {
          "name": "layers",
          "type": "PT_SoundType[]",
          "optional": false
        }
      ],
      "name": "PT_LayeredSoundValue",
      "link": "/Types/LayeredSound"
    },
    {
      "properties": [
        {
          "name": "type",
          "type": "PT_SignalColorMappingType",
          "optional": false
        },
        {
          "name": "name",
          "description": "The name of a circuit network signal, it has to have the type that is specified in this definition. For example <code>name = \"iron-plate\"</code> would only work with <code>type = \"item\"</code>, and <code>type = \"fluid\"</code> would need a fluid signal as the name, for example <code>\"crude-oil\"</code> or <code>\"water\"</code>.",
          "type": "string",
          "optional": false
        }
      ],
      "name": "PT_SignalIDConnector",
      "link": "/Types/SignalIDConnector",
      "description": "Refers to an existing circuit network signal."
    },
    {
      "properties": [
        {
          "name": "item",
          "description": "The item to spawn.",
          "type": "string",
          "optional": false
        },
        {
          "name": "probability",
          "description": "0 is 0% and 1 is 100%. Must be > 0.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "count_min",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "count_max",
          "description": "Must be > 0.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "name": "PT_LootValue",
      "link": "/Types/LightDefinition",
      "description": "Type for loot for Prototype/EntityWithHealth: The loot is generated when the entity is killed."
    },
    {
      "properties": [
        {
          "name": "single",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "straight_vertical",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "straight_horizontal",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_right_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "corner_left_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "cornt_uper_left_down",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_right",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ending_left",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "filling",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "water_connection_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        },
        {
          "name": "gate_connection_patch",
          "type": "PT_Sprite4Way",
          "optional": true
        }
      ],
      "name": "PT_WallPictures",
      "link": "/Prototype/Wall#pictures"
    },
    {
      "properties": [
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "rotation_shift",
          "type": "PT_RealOrientation",
          "optional": true
        }
      ],
      "parent": "PT_Basic",
      "prototype": "PT_LightDefinition",
      "name": "PT_LightDefinitionOriented",
      "link": "/Types/LightDefinition",
      "description": "Type for placeable_by for entities: Item that when placed creates this entity."
    },
    {
      "properties": [
        {
          "name": "tile_name",
          "description": "Name of a <a href=\"/Prototype/Tile\" title=\"Prototype/Tile\">Prototype/Tile</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "apply_projection",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tile_collision_mask",
          "type": "PT_CollisionMask",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_SetTileTriggerEffectItem",
      "link": "/Types/SetTileTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "tile",
          "description": "Name of a tile.",
          "type": "string",
          "optional": false
        },
        {
          "name": "alpha",
          "type": "PT_float",
          "optional": false
        }
      ],
      "name": "PT_FireFlameBurntPatchAlphaVariations",
      "link": "/Prototype/FireFlame#burnt_patch_alpha_variations"
    },
    {
      "properties": [
        {
          "name": "max_movement_distance",
          "type": "PT_float",
          "default": "-1",
          "optional": true
        },
        {
          "name": "max_movement_distance_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "inherit_movement_distance_from_projectile",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "cycle_while_moving",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_CreateEntityTriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateExplosionTriggerEffectItem",
      "link": "/Types/CreateExplosionTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "width",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "height",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "prototype": "PT_EquipmentShape",
      "name": "PT_EquipmentShapeBase",
      "link": "/Types/EquipmentShape"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "north_east",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "south_east",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "south_west",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "north_west",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "sheets",
          "description": "If given, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet[]",
          "optional": true
        },
        {
          "name": "sheet",
          "description": "If given, and #sheets isnt present, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet",
          "optional": true
        }
      ],
      "name": "PT_Sprite8Way",
      "link": "/Types/Sprite8Way"
    },
    {
      "properties": [
        {
          "name": "west_to_east",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "north_to_south",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "east_to_west",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "south_to_north",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "west_to_north",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "north_to_east",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "east_to_south",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "south_to_west",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "west_to_south",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "north_to_west",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "east_to_north",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "south_to_east",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "west_to_none",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "none_to_east",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "north_to_none",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "none_to_south",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "east_to_none",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "none_to_west",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "south_to_none",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        },
        {
          "name": "none_to_north",
          "type": "PT_OrientedCliffPrototype",
          "optional": false
        }
      ],
      "name": "PT_CliffOrientations",
      "link": "/Prototype/Cliff#orientations"
    },
    {
      "properties": [
        {
          "name": "filter_enabled",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerItem",
      "name": "PT_DirectTriggerItem",
      "link": "/Types/DirectTriggerItem"
    },
    {
      "properties": [
        {
          "name": "consumption",
          "type": "PT_EffectConsumption",
          "optional": true
        },
        {
          "name": "speed",
          "type": "PT_EffectConsumption",
          "optional": true
        },
        {
          "name": "productivity",
          "type": "PT_EffectConsumption",
          "optional": true
        },
        {
          "name": "pollution",
          "type": "PT_EffectConsumption",
          "optional": true
        }
      ],
      "name": "PT_Effect",
      "link": "/Types/Effect"
    },
    {
      "properties": [
        {
          "name": "initial_height",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "speed_multiplier",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_multiplier_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_CreateEntityTriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateSmokeTriggerEffectItem",
      "link": "/Types/CreateSmokeTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "type",
          "description": "Specification of the type. Name of a <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageType</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "decrease",
          "description": "The <a href=\"/Damage#Decrease.2C_or_.22flat.22_resistance\" title=\"Damage\">flat resistance</a> to the given damage type. (Higher is better)",
          "type": "PT_float",
          "default": "0",
          "optional": false
        },
        {
          "name": "percent",
          "description": "The <a href=\"/Damage#Percentage_resistance\" title=\"Damage\">percentage resistance</a> to the given damage type. (Higher is better)",
          "type": "PT_float",
          "default": "0",
          "optional": false
        }
      ],
      "name": "PT_Resistances",
      "link": "/Types/Resistances",
      "description": "Resistances to certain types of attacks from enemy, and physical damage. See <a href=\"/Damage\" title=\"Damage\">Damage</a>."
    },
    {
      "properties": [
        {
          "name": "entity_flags",
          "description": "Only prototypes with these flags are affected by the trigger item.",
          "type": "PT_EntityPrototypeFlags",
          "optional": true
        },
        {
          "name": "ignore_collision_condition",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "trigger_target_mask",
          "type": "PT_TriggerTargetMask",
          "optional": true
        },
        {
          "name": "repeat_count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "probability",
          "description": "Must be greater than 0 and less than or equal to 1.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "collision_mask",
          "description": "Only prototypes with these collision masks are affected by the trigger item.",
          "type": "PT_CollisionMask",
          "optional": true
        },
        {
          "name": "action_delivery",
          "type": "PT_TriggerDelivery|PT_TriggerDelivery[]",
          "optional": true
        },
        {
          "name": "force",
          "description": "Only entities meeting the force condition are affected by the trigger item.",
          "type": "PT_ForceCondition",
          "optional": true
        }
      ],
      "name": "PT_TriggerItem",
      "link": "/Types/TriggerItem"
    },
    {
      "properties": [
        {
          "name": "copper",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "red",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "green",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "name": "PT_WirePosition",
      "link": "/Types/WirePosition",
      "description": "Used by <a href=\"/Types/WireConnectionPoint\" title=\"Types/WireConnectionPoint\">Types/WireConnectionPoint</a>."
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "east",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "south",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "west",
          "type": "PT_vector",
          "optional": false
        }
      ],
      "name": "PT_StreamAttackParametersGunCenterShift",
      "link": "/Types/StreamAttackParameters#gun_center_shift"
    },
    {
      "properties": [
        {
          "name": "picture",
          "type": "PT_Sprite4Way",
          "optional": false
        },
        {
          "name": "window_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "fluid_background",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "flow_sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "gas_flow",
          "type": "PT_AnimationType",
          "optional": false
        }
      ],
      "name": "PT_StorageTankPictures",
      "link": "/Prototype/StorageTank#pictures"
    },
    {
      "properties": [
        {
          "name": "mining_time",
          "description": "How long it takes to mine this object.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "results",
          "description": "The items that are returned when this object is mined.",
          "type": "PT_ProductPrototype[]",
          "optional": true
        },
        {
          "name": "result",
          "description": "<p>Only loaded if <code>results</code> was not found. Which item is dropped when this is mined.</p><p>Cannot be empty. If you want the entity to not be minable, don't specify the minable properties, if you want it to be minable with no result item, don't specify the result at all.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "fluid_amount",
          "description": "The amount of fluid that is used up when this object is mined. If this is > 0, this object cannot be mined by hand.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "mining_particle",
          "description": "Name of a <a href=\"/Prototype/Particle\" title=\"Prototype/Particle\">Prototype/Particle</a>. Which set of particles to use.",
          "type": "string",
          "optional": true
        },
        {
          "name": "required_fluid",
          "description": "Name of a <a href=\"/Prototype/Fluid\" title=\"Prototype/Fluid\">Prototype/Fluid</a>. The fluid that is used up when this object is mined.",
          "type": "string",
          "optional": true
        },
        {
          "name": "count",
          "description": "Only loaded if results was not found. How many of result are dropped.",
          "type": "PT_uint16",
          "default": "1",
          "optional": true
        },
        {
          "name": "mining_trigger",
          "type": "PT_Trigger",
          "optional": true
        }
      ],
      "name": "PT_MinableProperties",
      "link": "/Types/MinableProperties",
      "description": "The mining properties of objects. For formulas for the mining time, see <a href=\"/Mining\" title=\"Mining\">mining</a>."
    },
    {
      "properties": [
        {
          "name": "projectile",
          "description": "Name of a <a href=\"/Prototype/ArtilleryProjectile\" title=\"Prototype/ArtilleryProjectile\">Prototype/ArtilleryProjectile</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "starting_speed",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "starting_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "direction_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "range_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "trigger_fired_artillery",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_ArtilleryTriggerDelivery",
      "link": "/Types/ArtilleryTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "collision_bounding_box",
          "type": "PT_BoundingBox",
          "optional": false
        },
        {
          "name": "pictures",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "fill_volume",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "name": "PT_OrientedCliffPrototype",
      "link": "/Types/OrientedCliffPrototype",
      "description": "Used by <a href=\"/Prototype/Cliff\" title=\"Prototype/Cliff\">Prototype/Cliff</a>."
    },
    {
      "properties": [
        {
          "name": "idle",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "no_minable_resources",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "full_output",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "insufficient_input",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "disabled",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "no_power",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "working",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "low_power",
          "type": "PT_Color",
          "optional": true
        }
      ],
      "name": "PT_CraftingMachineStatusColors",
      "link": "/Prototype/CraftingMachine#status_colors"
    },
    {
      "properties": [
        {
          "name": "fuel_inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "burnt_inventory_size",
          "type": "PT_ItemStackIndex",
          "default": "0",
          "optional": true
        },
        {
          "name": "smoke",
          "description": "Array of 1 or more smoke sources.",
          "type": "PT_SmokeSource[]",
          "optional": true
        },
        {
          "name": "light_flicker",
          "type": "PT_LightFlickeringDefinition",
          "optional": true
        },
        {
          "name": "effectivity",
          "description": "1 means 100% effectivity. Must be greater than 0. Multiplier of the energy output.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "fuel_category",
          "description": "The energy source can be used with fuel from this <a href=\"/Prototype/FuelCategory\" title=\"Prototype/FuelCategory\">fuel category</a>. For a list on built-in categories, see <a href=\"/Data.raw#fuel-category\" title=\"Data.raw\">Data.raw#fuel-category</a>.",
          "type": "string",
          "default": "chemical",
          "optional": true
        },
        {
          "name": "fuel_categories",
          "description": "Same as above, only one of them can exist. For a list on built-in categories, see <a href=\"/Data.raw#fuel-category\" title=\"Data.raw\">Data.raw#fuel-category</a>.",
          "type": "string[]",
          "optional": true
        }
      ],
      "parent": "PT_EnergySourceBase",
      "prototype": "PT_EnergySource",
      "name": "PT_EnergySourceBurner",
      "link": "/Types/EnergySource"
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "timeout",
          "type": "PT_uint32",
          "default": "1200",
          "optional": true
        },
        {
          "name": "play_sound_on_failure",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "uses_stack",
          "description": "Whether using the capsule consumes an item from the stack.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "prototype": "PT_CapsuleAction",
      "name": "PT_DestroyCliffsCapsuleAction",
      "link": "/Types/DestroyCliffsCapsuleAction",
      "description": "Used by <a href=\"/Types/CapsuleAction\" title=\"Types/CapsuleAction\">Types/CapsuleAction</a>."
    },
    {
      "properties": [
        {
          "name": "fluid_box",
          "description": "All standard fluid box configurations are acceptable, but the type must be \"input\" or \"input-output\" to function correctly. Scale_fluid_usage, fluid_usage_per_tick or a filter on the fluidbox must be set to be able to calculate the fluid usage of the energy source.",
          "type": "PT_FluidBox",
          "optional": false
        },
        {
          "name": "smoke",
          "description": "Array of 1 or more smoke sources.",
          "type": "PT_SmokeSource[]",
          "optional": true
        },
        {
          "name": "light_flicker",
          "type": "PT_LightFlickeringDefinition",
          "optional": true
        },
        {
          "name": "effectivity",
          "description": "1 means 100% effectivity. Must be greater than 0. Multiplier of the energy output.",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "burns_fluid",
          "description": "Optional. If set to true, the energy source will calculate power based on the fluid's fuel_value entry, else it will calculate based on fluid temperature, like <a href=\"/Prototype/Generator\" title=\"Prototype/Generator\">Prototype/Generator</a>.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "scale_fluid_usage",
          "description": "If set to true, the energy source will consume as much fluid as required to produce the desired power, if set to false it will consume as much as it is allowed to, wasting any excess.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "fluid_usage_per_tick",
          "description": "The number of fluid units the energy source uses per tick. If used with scale_fluid_usage, this specifies the maximum. If this value is not set, scale_energy_usage = false and a fluid box filter is set, the game will attempt to calculate this value from the fluid box filter's fluid's fuel_value or heat_capacity and the entity's energy_usage. If burns_fluid is false, maximum_temperature will also be used. If the attempt of the game to calculate this value fails ( scale_energy_usage = false and a fluid box filter is set), then scale_energy_usage will be forced to true, to prevent the energy source from being an infinite fluid sink.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/90613\">[1]</a>",
          "type": "PT_double",
          "default": "0",
          "optional": true
        },
        {
          "name": "maximum_temperature",
          "description": "If it is specified while scale_fluid_usage = false and fluid_usage_per_tick is not specified, the game will use this value to calculate fluid_usage_per_tick.",
          "type": "PT_double",
          "optional": true
        }
      ],
      "parent": "PT_EnergySourceBase",
      "name": "PT_EnergySourceFluid",
      "link": "/Types/EnergySource"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "The item used to place this entity.",
          "type": "string",
          "optional": true
        },
        {
          "name": "count",
          "description": "How many items are used to place one of this entity. Can't be larger than the stack size of the item.",
          "type": "PT_uint32",
          "optional": true
        }
      ],
      "name": "PT_ItemToPlace",
      "link": "/Types/ItemToPlace",
      "description": "Type for placeable_by for entities: Item that when placed creates this entity."
    },
    {
      "properties": [
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "secondary_draw_order",
          "description": "Used to determine render order for sprites with the same <code>render_layer</code> in the same position. Sprites with a higher <code>secondary_draw_order</code> are drawn on top.",
          "type": "PT_int8",
          "optional": true
        },
        {
          "name": "draw_as_sprite",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "draw_as_light",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "apply_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "always_draw",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "animation",
          "type": "PT_AnimationType",
          "optional": true
        }
      ],
      "name": "PT_AnimationElement",
      "link": "/Types/AnimationElement",
      "description": "Used by <a href=\"/Types/BeaconGraphicsSet\" title=\"Types/BeaconGraphicsSet\">Types/BeaconGraphicsSet</a> (<a href=\"/Prototype/Beacon\" title=\"Prototype/Beacon\">Prototype/Beacon</a>)."
    },
    {
      "properties": [
        {
          "name": "effect_id",
          "description": "The effect_id that will be provided in <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#on_script_trigger_effect\">on_script_trigger_effect</a>.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_ScriptTriggerEffectItem",
      "link": "/Types/ScriptTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "standup_base",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "standup_top",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "standup_shadow",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "connector",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "connector_shadow",
          "type": "PT_AnimationType",
          "optional": true
        }
      ],
      "name": "PT_PumpConnectorGraphicsValue",
      "link": "/Types/PumpConnectorGraphics"
    },
    {
      "properties": [
        {
          "name": "sheet",
          "type": "PT_SpriteVariationsSheet",
          "optional": true
        }
      ],
      "name": "PT_SpriteVariationsValue",
      "link": "/Types/SpriteVariations"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "name": "PT_MiningDrillGraphicsSetCircuitConnectorLayer",
      "link": "/Types/MiningDrillGraphicsSet#circuit_connector_layer"
    },
    {
      "properties": [
        {
          "name": "evolution_factor",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "spawn_weight",
          "description": "Must be >= 0.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "name": "PT_SpawnPointValue",
      "link": "/Types/SpawnPoint"
    },
    {
      "properties": [
        {
          "name": "beam",
          "description": "Name of a <a href=\"/Prototype/Beam\" title=\"Prototype/Beam\">Prototype/Beam</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "add_to_shooter",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "max_length",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "duration",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "source_offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "parent": "PT_TriggerDeliveryBase",
      "prototype": "PT_TriggerDelivery",
      "name": "PT_BeamTriggerDelivery",
      "link": "/Types/BeamTriggerDelivery"
    },
    {
      "properties": [
        {
          "name": "train_stop_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "stopped_manually_controlled_train_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "stopped_manually_controlled_train_without_passenger_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "signal_reserved_by_circuit_network_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_in_station_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_in_station_with_no_other_valid_stops_in_schedule",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_arriving_to_station_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_arriving_to_signal_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_waiting_at_signal_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_waiting_at_signal_tick_multiplier_penalty",
          "description": "Must be >= 0.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "train_with_no_path_penalty",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "train_auto_without_schedule_penalty",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsTrainPathFinding",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "filename",
          "description": "Technically optional, but path to sprite cannot be empty.",
          "type": "PT_FileName",
          "optional": false
        },
        {
          "name": "frames",
          "description": "Specifies how many of the directions of the SpriteNWay are filled up with this sheet.",
          "type": "PT_uint32",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the SpriteNWaySheet.",
          "type": "PT_SpriteNWaySheet",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the sprite. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType|PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of the picture in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the sprite in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "shift",
          "description": "In tiles. util.by_pixel() can be used to divide the shift by 32 which is the usual pixel height/width of 1 tile in normal resolution. Note that 32 pixel tile height/width is not enforced anywhere - any other tile height or width is also possible.",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the sprite on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "name": "PT_SpriteNWaySheet",
      "link": "/Types/SpriteNWaySheet",
      "description": "Used in <a href=\"/Types/Sprite4Way\" title=\"Types/Sprite4Way\">Types/Sprite4Way</a> and <a href=\"/Types/Sprite8Way\" title=\"Types/Sprite8Way\">Types/Sprite8Way</a>"
    },
    {
      "properties": [
        {
          "name": "north",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_AnimationType",
          "optional": true
        }
      ],
      "name": "PT_AnimationSidesOptional",
      "link": "/Prototype/Boiler#fire"
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "sound",
          "type": "PT_SoundType",
          "optional": false
        }
      ],
      "name": "PT_ProgrammableSpeakerInstrumentNote",
      "link": "/Prototype/ProgrammableSpeaker#instruments"
    },
    {
      "properties": [
        {
          "name": "side",
          "description": "This or side_mask needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "side_mask",
          "description": "This or side needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "inner_corner",
          "description": "This or inner_corner_mask needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "inner_corner_mask",
          "description": "This or inner_corner needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "outer_corner",
          "description": "This or outer_corner_mask needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "outer_corner_mask",
          "description": "This or outer_corner needs to be specified if <code>empty_transitions</code> is not true.",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "empty_transitions",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "side_background",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "side_background_mask",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "side_effect_map",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "side_weights",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "inner_corner_background",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "inner_corner_background_mask",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "inner_corner_effect_map",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "inner_corner_weights",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "outer_corner_background",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "outer_corner_background_mask",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "outer_corner_effect_map",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "outer_corner_weights",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "u_transition",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "u_transition_mask",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "u_transition_background",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "u_transition_background_mask",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "u_transition_effect_map",
          "type": "PT_TileTransitionSprite",
          "optional": true
        },
        {
          "name": "u_transition_weights",
          "type": "PT_float[]",
          "optional": true
        },
        {
          "name": "o_transition",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "o_transition_mask",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "o_transition_background",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "o_transition_background_mask",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "o_transition_effect_map",
          "type": "PT_TileSprite",
          "optional": true
        },
        {
          "name": "water_patch",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "effect_mask",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "layer",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "overlay_layer_group",
          "type": "PT_TileLayerGroup",
          "optional": true
        },
        {
          "name": "background_layer_group",
          "type": "PT_TileLayerGroup",
          "optional": true
        },
        {
          "name": "overlay_layer_offset",
          "type": "PT_int8",
          "optional": true
        },
        {
          "name": "masked_overlay_layer_offset",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        },
        {
          "name": "background_layer_offset",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        },
        {
          "name": "masked_background_layer_offset",
          "type": "PT_int8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_effect_color_to_overlay",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "offset_background_layer_by_tile_layer",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_TileTransitions",
      "link": "/Types/TileTransitions",
      "description": "Used for tile graphics."
    },
    {
      "properties": [
        {
          "name": "metals",
          "description": "Must have between 1 and 4 variations.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "backplates",
          "description": "Must have same number of variations as <code>metals</code>.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "ties",
          "description": "Must have between 1 and 4 variations.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "stone_path",
          "description": "Must have between 1 and 4 variations.",
          "type": "PT_SpriteVariations",
          "optional": false
        },
        {
          "name": "stone_path_background",
          "description": "Must have less or equal than 4 variations.",
          "type": "PT_SpriteVariations",
          "optional": true
        },
        {
          "name": "segment_visualisation_middle",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "segment_visualisation_ending_front",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "segment_visualisation_ending_back",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "segment_visualisation_continuing_front",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "segment_visualisation_continuing_back",
          "type": "PT_SpriteType",
          "optional": true
        }
      ],
      "name": "PT_RailPieceLayers",
      "link": "/Types/RailPieceLayers",
      "description": "Used for graphics by <a href=\"/Prototype/Rail\" title=\"Prototype/Rail\">Prototype/Rails</a> and <a href=\"/Prototype/RailRemnants\" title=\"Prototype/RailRemnants\">Prototype/RailRemnants</a>."
    },
    {
      "properties": [
        {
          "name": "north",
          "description": "Size of the table must be 6 or more. Each value of the table is a mapping of <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a>. The following strings are recognized: <code>standup_base</code>, <code>standup_top</code>, <code>standup_shadow</code>, <code>connector</code>, <code>connector_shadow</code>.",
          "type": "PT_PumpConnectorGraphicsValue[]",
          "optional": false
        },
        {
          "name": "west",
          "description": "Size of the table must be 6 or more. Each value of the table is a mapping of <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a>. The following strings are recognized: <code>standup_base</code>, <code>standup_top</code>, <code>standup_shadow</code>, <code>connector</code>, <code>connector_shadow</code>.",
          "type": "PT_PumpConnectorGraphicsValue[]",
          "optional": false
        },
        {
          "name": "south",
          "description": "Size of the table must be 6 or more. Each value of the table is a mapping of <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a>. The following strings are recognized: <code>standup_base</code>, <code>standup_top</code>, <code>standup_shadow</code>, <code>connector</code>, <code>connector_shadow</code>.",
          "type": "PT_PumpConnectorGraphicsValue[]",
          "optional": false
        },
        {
          "name": "east",
          "description": "Size of the table must be 6 or more. Each value of the table is a mapping of <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a>. The following strings are recognized: <code>standup_base</code>, <code>standup_top</code>, <code>standup_shadow</code>, <code>connector</code>, <code>connector_shadow</code>.",
          "type": "PT_PumpConnectorGraphicsValue[]",
          "optional": false
        }
      ],
      "name": "PT_PumpConnectorGraphics",
      "link": "/Types/PumpConnectorGraphics",
      "description": "A mapping of arrays of mappings of <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animations</a> to all 4 directions of the pump connection (to a fluid wagon)."
    },
    {
      "properties": [
        {
          "name": "bonus",
          "description": "Precision is ignored beyond two decimals - 17.567 results in 17.56 etc.",
          "type": "PT_double",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_EffectConsumption",
      "link": "/Types/Effect#consumption"
    },
    {
      "properties": [
        {
          "name": "unit",
          "type": "PT_TechnologyUnit",
          "optional": false
        },
        {
          "name": "effects",
          "description": "List of effects of the technology (applied when the technology is researched).",
          "type": "PT_ModifierPrototype[]",
          "optional": true
        },
        {
          "name": "enabled",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "hidden",
          "description": "Hides the technology from the tech screen.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "ignore_tech_cost_multiplier",
          "description": "Controls whether the technology cost ignores the tech cost multiplier set in the <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/Concepts.html#DifficultySettings\">DifficultySettings</a>, e.g. 4 for the default expensive difficulty.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "max_level",
          "description": "\"infinite\" for infinite technologies, otherwise uint.",
          "type": "PT_uint32|string",
          "optional": true
        },
        {
          "name": "prerequisites",
          "description": "List of technologies needed to be researched before this one can be researched.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "upgrade",
          "description": "When set to true, and the technology contains several levels, only the relevant one is displayed in the technology screen.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "visible_when_disabled",
          "description": "Controls whether the technology is shown in the tech GUI when it is disabled (enabled = false).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_TechnologyData",
      "link": "/Prototypes/Technology"
    },
    {
      "properties": [
        {
          "name": "sticker",
          "description": "Name of the <a href=\"/Prototype/Sticker\" title=\"Prototype/Sticker\">Prototype/Sticker</a> that should be created.",
          "type": "string",
          "optional": false
        },
        {
          "name": "show_in_tooltip",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "trigger_created_entity",
          "description": "If this is true, <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#on_trigger_created_entity\">on_trigger_created_entity</a> is raised when the entity is created.",
          "type": "PT_bool",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateStickerTriggerEffectItem",
      "link": "/Types/CreateStickerTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "radius",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "from_render_layer",
          "type": "PT_RenderLayer",
          "optional": true
        },
        {
          "name": "to_render_layer",
          "type": "PT_RenderLayer",
          "optional": true
        },
        {
          "name": "include_soft_decoratives",
          "description": "Soft decoratives are decoratives with <a href=\"/Prototype/Decorative#grows_through_rail_path\" title=\"Prototype/Decorative\">Prototype/Decorative#grows_through_rail_path</a> = true.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "include_decals",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "invoke_decorative_trigger",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "decoratives_with_trigger_only",
          "description": "If true, destroys only decoratives that have a <a href=\"/Prototype/Decorative#trigger_effect\" title=\"Prototype/Decorative\">Prototype/Decorative#trigger_effect</a> set.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_DestroyDecorativesTriggerEffectItem",
      "link": "/Types/DestroyDecorativesTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "localised_name",
          "type": "PT_LocalisedString",
          "optional": false
        },
        {
          "name": "matrix",
          "description": "4 arrays of 4-length float arrays, essentially a 4x4 matrix",
          "type": "PT_float[][]",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsColorFilter",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "range",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "width",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "range_effects",
          "type": "PT_TriggerEffect",
          "optional": false
        }
      ],
      "parent": "PT_Item",
      "prototype": "PT_Trigger",
      "name": "PT_LineTriggerItem",
      "link": "/Types/LineTriggerItem"
    },
    {
      "properties": [
        {
          "name": "variation_count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "repeat_count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "line_length",
          "description": "Default is the value of <code>variation_count</code>.",
          "type": "PT_uint32",
          "optional": true
        }
      ],
      "parent": "PT_SpriteType",
      "name": "PT_SpriteVariationsSheet",
      "link": "/Types/SpriteVariations"
    },
    {
      "properties": [
        {
          "name": "attack_parameters",
          "type": "PT_AttackParameters",
          "optional": false
        },
        {
          "name": "uses_stack",
          "description": "Whether using the capsule consumes an item from the stack.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        }
      ],
      "prototype": "PT_CapsuleAction",
      "name": "PT_UseOnSelfCapsuleAction",
      "link": "/Types/UseOnSelfCapsuleAction"
    },
    {
      "properties": [
        {
          "name": "enabled",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "diffusion_ratio",
          "description": "Amount that is diffused to neighboring chunks",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "min_to_diffuse",
          "description": "This much pollution units must be on the chunk to start diffusing",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "ageing",
          "description": "Constant modifier a percentage of 1; the pollution eaten by a chunks tiles",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "expected_max_per_chunk",
          "description": "Anything bigger than this is visualised as this value",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "min_to_show_per_chunk",
          "description": "Anything lower than this (but > 0) is visualised as this value",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "min_pollution_to_damage_trees",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_with_max_forest_damage",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_restored_per_tree_damage",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_per_tree_damage",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "max_pollution_to_restore_trees",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "enemy_attack_pollution_consumption_modifier",
          "type": "PT_double",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsPollution",
      "link": "/Prototype/MapSettings#pollution"
    },
    {
      "properties": [
        {
          "name": "north",
          "description": "Optional. If omitted, the game will not look for any other directions and instead try to load the whole definition as one <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a> and apply it to all directions.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "east",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "south",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "west",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "sheets",
          "description": "Optional. If given, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet[]",
          "optional": true
        },
        {
          "name": "sheet",
          "description": "Optional. If given, and #sheets isnt present, this is used instead of any other properties that may be present.",
          "type": "PT_SpriteNWaySheet",
          "optional": true
        }
      ],
      "name": "PT_Animation4WayValue",
      "link": "/Types/Animation4Way"
    },
    {
      "properties": [
        {
          "name": "unit",
          "description": "The name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "spawn_points",
          "description": "Array of evolution and probability info. The evolution_factor must be ascending from entry to entry.",
          "type": "PT_SpawnPoint[]",
          "optional": false
        }
      ],
      "name": "PT_UnitSpawnDefinition",
      "link": "/Types/UnitSpawnDefinition",
      "description": "The definition of a spawnable unit for a <a href=\"/Prototype/EnemySpawner\" title=\"Prototype/EnemySpawner\">Prototype/EnemySpawner</a>. It can be specified as a table with named or numbered keys, but not a mix of both."
    },
    {
      "properties": [
        {
          "name": "count",
          "description": "How many units are needed. Must be larger than 0. May not be specified if count_formula is specified.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "count_formula",
          "description": "Formula that specifies how many units are needed per level of the infinite technology. May not be specified if count is specified. The formula is executed following the BODMAS order.",
          "type": "string",
          "optional": true
        },
        {
          "name": "time",
          "description": "How much time is needed per one unit, in lab with crafting speed 1 it is the number of seconds.",
          "type": "PT_double",
          "optional": true
        },
        {
          "name": "ingredients",
          "description": "list of ingredients needed for one unit of research. The item types must all be <a href=\"/Prototype/Tool\" title=\"Prototype/Tool\">tools</a>.",
          "type": "PT_IngredientPrototype[]",
          "optional": true
        }
      ],
      "name": "PT_TechnologyUnit",
      "link": "/Prototype/Technology#unit"
    },
    {
      "properties": [
        {
          "name": "module_slots",
          "description": "The number of module slots in this entity.",
          "type": "PT_ItemStackIndex",
          "default": "0",
          "optional": true
        },
        {
          "name": "module_info_max_icons_per_row",
          "description": "Default: width of entity selection box / 0.75",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "module_info_max_icon_rows",
          "description": "Default: width of entity selection box / 1.5",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "module_info_icon_shift",
          "description": "Default: {0, 0.7}",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "module_info_icon_scale",
          "type": "PT_float",
          "default": "0.5",
          "optional": true
        },
        {
          "name": "module_info_separation_multiplier",
          "type": "PT_float",
          "default": "1.1",
          "optional": true
        },
        {
          "name": "module_info_multi_row_initial_height_modifier",
          "type": "PT_float",
          "default": "-0.1",
          "optional": true
        }
      ],
      "name": "PT_ModuleSpecification",
      "link": "/Types/ModuleSpecification",
      "description": "The number of module slots in this entity, and their icon positions."
    },
    {
      "properties": [
        {
          "name": "layers",
          "description": "<p>If this property is present, all Animation definitions have to be placed as entries in the array, and they will all be loaded from there. Each item (Animation definition) in the array may also have the <code>layers</code> property.</p><p>If this property is present, all other properties are ignored and the mandatory properties do not have to be defined.</p><p>Layers may not be an empty table.</p>",
          "type": "PT_AnimationType[]",
          "optional": true
        },
        {
          "name": "hr_version",
          "description": "If this property exists and high resolution sprites are turned on, its contents are used to load the Animation.",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "filename",
          "description": "Mandatory if <code>\"stripes\"</code> is not specified. ",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "priority",
          "type": "PT_SpritePriority",
          "default": "medium",
          "optional": true
        },
        {
          "name": "flags",
          "type": "PT_SpriteFlags",
          "optional": true
        },
        {
          "name": "size",
          "description": "<p>The width and height of the one frame. If this is an array, the first member of the array is the width and the second is the height. Otherwise the size is both width and height.</p><p>Width and height may only be in the range of 0-8192.</p>",
          "type": "PT_SpriteSizeType[]|PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "width",
          "description": "Mandatory if <code>size</code> is not given. Width of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "height",
          "description": "Mandatory if <code>size</code> is not given. Height of one frame in pixels, from 0-8192.",
          "type": "PT_SpriteSizeType",
          "optional": true
        },
        {
          "name": "x",
          "description": "Horizontal position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "y",
          "description": "Vertical position of the animation in the source file in pixels.",
          "type": "PT_SpriteSizeType",
          "default": "0",
          "optional": true
        },
        {
          "name": "position",
          "description": "Loaded only when <code>x</code> and <code>y</code> are both 0. The first member of the array is x and the second is y.",
          "type": "PT_SpriteSizeType[]",
          "optional": true
        },
        {
          "name": "shift",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "scale",
          "description": "Values different than 1 specify the scale of the animation on default zoom. Scale 2 means that the picture will be 2 times bigger on screen (and more pixelated).",
          "type": "PT_double",
          "default": "1",
          "optional": true
        },
        {
          "name": "mipmap_count",
          "description": "Only loaded if this is an icon (has flag \"group=icon\" or \"group=gui\").<br>Note: mipmap_count doesn't make sense in animation, as it is not possible to layout mipmaps in a way, that would load correctly both the animation and the mipmaps (besides animations with just one frame).<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=549058#p549058\">[2]</a>",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "apply_runtime_tint",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "tint",
          "type": "PT_Color",
          "optional": true
        },
        {
          "name": "blend_mode",
          "type": "PT_BlendMode",
          "default": "normal",
          "optional": true
        },
        {
          "name": "load_in_minimal_mode",
          "description": "Minimal mode is entered when mod loading fails. You are in it when you see the gray box after (part of) the loading screen that tells you a mod error (<a rel=\"nofollow\" class=\"external text\" href=\"https://cdn.discordapp.com/attachments/340530709712076801/532315796626472972/unknown.png\">Example</a>). If you are a modder, you can just ignore this property.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "premul_alpha",
          "description": "Whether alpha should be premultiplied.",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "generate_sdf",
          "description": "Unused.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "run_mode",
          "type": "PT_AnimationRunMode",
          "default": "forward",
          "optional": true
        },
        {
          "name": "frame_count",
          "description": "Can't be 0.",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "animation_speed",
          "description": "Once the specified number of pictures is loaded, other pictures are loaded on other line. This is to allow having longer animations in matrix, to avoid pictures with too big width. The game engine limits the width of any input picture to 2048px, so it is compatible with most graphics cards.",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_advance",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "repeat_count",
          "description": "Can't be 0.",
          "type": "PT_uint8",
          "default": "1",
          "optional": true
        },
        {
          "name": "dice",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "dice_x",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "dice_y",
          "type": "PT_uint8",
          "optional": true
        },
        {
          "name": "frame_sequence",
          "type": "PT_AnimationFrameSequence",
          "optional": true
        },
        {
          "name": "stripes",
          "type": "PT_Stripe[]",
          "optional": true
        }
      ],
      "parent": "PT_DrawAsAddition",
      "name": "PT_AnimationType",
      "link": "/Types/Animation",
      "description": "<p>Specifies animation that can be used in the game.</p><p>Note that if any frame of the animation is specified from the same source as any other <a href=\"/Types/Sprite\" title=\"Types/Sprite\">Types/Sprite</a> or frame of other animation, it will be shared.</p>"
    },
    {
      "properties": [
        {
          "name": "down",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "up",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "left",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "right",
          "type": "PT_SpriteType",
          "optional": false
        }
      ],
      "name": "PT_PipeToGroundPictures",
      "link": "/Prototype/PipeToGround#pictures"
    },
    {
      "properties": [
        {
          "name": "east_to_north_index",
          "type": "PT_uint8",
          "default": "5",
          "optional": true
        },
        {
          "name": "north_to_east_index",
          "type": "PT_uint8",
          "default": "6",
          "optional": true
        },
        {
          "name": "west_to_north_index",
          "type": "PT_uint8",
          "default": "7",
          "optional": true
        },
        {
          "name": "north_to_west_index",
          "type": "PT_uint8",
          "default": "8",
          "optional": true
        },
        {
          "name": "south_to_east_index",
          "type": "PT_uint8",
          "default": "9",
          "optional": true
        },
        {
          "name": "east_to_south_index",
          "type": "PT_uint8",
          "default": "10",
          "optional": true
        },
        {
          "name": "south_to_west_index",
          "type": "PT_uint8",
          "default": "11",
          "optional": true
        },
        {
          "name": "west_to_south_index",
          "type": "PT_uint8",
          "default": "12",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectableBeltAnimationSet",
      "name": "PT_TransportBeltBeltAnimationSet",
      "link": "/Prototype/TransportBelt#belt_animation_set"
    },
    {
      "properties": [
        {
          "name": "cluster_count",
          "description": "Must be at least 2.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "distance",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "distance_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Item",
      "prototype": "PT_Trigger",
      "name": "PT_ClusterTriggerItem",
      "link": "/Types/ClusterTriggerItem"
    },
    {
      "properties": [
        {
          "name": "begin_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "middle_sound",
          "type": "PT_SoundType",
          "optional": true
        },
        {
          "name": "end_sound",
          "type": "PT_SoundType",
          "optional": true
        }
      ],
      "name": "PT_CyclicSound",
      "link": "/Types/CyclicSound"
    },
    {
      "properties": [
        {
          "name": "x",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "y",
          "type": "PT_float",
          "optional": false
        }
      ],
      "name": "PT_PositionValue",
      "link": "/Types/PositionValue"
    },
    {
      "properties": [
        {
          "name": "artillery_range",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "worker_robots",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "character",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "follower_robots",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "research_speed",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "inserter",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "stack_inserter",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "turret_attack",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "mining_productivity",
          "type": "PT_Order",
          "optional": false
        },
        {
          "name": "train_braking_force",
          "type": "PT_Order",
          "optional": false
        }
      ],
      "name": "PT_UtilityConstantsBonusGuiOrdering",
      "link": "/Prototype/UtilityConstants"
    },
    {
      "properties": [
        {
          "name": "enabled",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "time_factor",
          "description": "Percentual increase in the evolution factor for every second (60 ticks)",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "destroy_factor",
          "description": "Percentual increase in the evolution factor for every destroyed spawner",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "pollution_factor",
          "description": "Percentual increase in the evolution factor for 1 pollution unit",
          "type": "PT_double",
          "optional": false
        }
      ],
      "name": "PT_MapSettingsEnemyEvolution",
      "link": "/Prototype/MapSettings#enemy_evolution"
    },
    {
      "properties": [
        {
          "name": "name",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "offset",
          "type": "PT_vector",
          "optional": true
        }
      ],
      "name": "PT_ExplosionDefinitionValue",
      "link": "/Types/ExplosionDefinition"
    },
    {
      "properties": [
        {
          "name": "projectile_center",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "projectile_creation_distance",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "shell_particle",
          "type": "PT_CircularParticleCreationSpecification",
          "optional": true
        },
        {
          "name": "projectile_creation_parameters",
          "type": "PT_CircularParticleCreationSpecification",
          "optional": true
        },
        {
          "name": "projectile_orientation_offset",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_BaseAttackParameters",
      "prototype": "PT_AttackParameters",
      "name": "PT_ProjectileAttackParameters",
      "link": "/Types/ProjectileAttackParameters"
    },
    {
      "properties": [
        {
          "name": "sprite",
          "type": "PT_SpriteType",
          "optional": false
        },
        {
          "name": "distance",
          "description": "Must be > 0.",
          "type": "PT_double",
          "default": "0",
          "optional": false
        },
        {
          "name": "offset",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "draw_in_cursor",
          "type": "PT_bool",
          "default": "true",
          "optional": false
        },
        {
          "name": "draw_on_selection",
          "type": "PT_bool",
          "default": "true",
          "optional": false
        }
      ],
      "name": "PT_RadiusVisualisationSpecification",
      "link": "/Types/RadiusVisualisationSpecification",
      "description": "Sprite to be shown around the entity when it is selected/held in the cursor."
    },
    {
      "properties": [
        {
          "name": "initial_ground_flame_count",
          "type": "PT_uint8",
          "optional": true
        }
      ],
      "parent": "PT_CreateEntityTriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateFireTriggerEffectItem",
      "link": "/Types/CreateFireTriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "repeat_count",
          "type": "PT_uint16",
          "default": "1",
          "optional": true
        },
        {
          "name": "repeat_count_deviation",
          "type": "PT_uint16",
          "default": "0",
          "optional": true
        },
        {
          "name": "probability",
          "description": "Must be greater than 0 and less than or equal to 1.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "affects_target",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "show_in_tooltip",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "damage_type_filters",
          "description": "Guaranteed to work with <a href=\"/Prototype/EntityWithHealth#damaged_trigger_effect\" title=\"Prototype/EntityWithHealth\">Prototype/EntityWithHealth#damaged_trigger_effect</a> and <a href=\"/Prototype/EntityWithHealth#dying_trigger_effect\" title=\"Prototype/EntityWithHealth\">Prototype/EntityWithHealth#dying_trigger_effect</a>, unknown if it works with other properties that use <a href=\"/Types/TriggerEffect\" title=\"Types/TriggerEffect\">Types/TriggerEffect</a>.",
          "type": "PT_DamageTypeFilters",
          "optional": true
        }
      ],
      "name": "PT_TriggerEffectItem",
      "link": "/Types/TriggerEffectItem"
    },
    {
      "properties": [
        {
          "name": "wire",
          "type": "PT_WirePosition",
          "optional": true
        },
        {
          "name": "shadow",
          "type": "PT_WirePosition",
          "optional": true
        }
      ],
      "name": "PT_WireConnectionPoint",
      "link": "/Types/WireConnectionPoint",
      "description": "Definition of a point where circuit network wires can be connected to an entity."
    },
    {
      "properties": [
        {
          "name": "straight_rail_horizontal",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "straight_rail_vertical",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "straight_rail_diagonal_left_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "straight_rail_diagonal_right_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "straight_rail_diagonal_right_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "straight_rail_diagonal_left_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_vertical_left_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_vertical_right_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_vertical_right_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_vertical_left_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_horizontal_left_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_horizontal_right_top",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_horizontal_right_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "curved_rail_horizontal_left_bottom",
          "type": "PT_RailPieceLayers",
          "optional": false
        },
        {
          "name": "rail_endings",
          "type": "PT_Sprite8Way",
          "optional": false
        }
      ],
      "name": "PT_RailRemnantsPictures",
      "link": "/Prototype/RailRemnants#pictures"
    },
    {
      "properties": [
        {
          "name": "smoke_name",
          "description": "Name of a <a href=\"/Prototype/TrivialSmoke\" title=\"Prototype/TrivialSmoke\">Prototype/TrivialSmoke</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "offset_deviation",
          "type": "PT_BoundingBox",
          "optional": true
        },
        {
          "name": "offsets",
          "type": "PT_vector[]",
          "optional": true
        },
        {
          "name": "initial_height",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "max_radius",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed",
          "type": "PT_vector",
          "optional": true
        },
        {
          "name": "speed_multiplier",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_multiplier_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "starting_frame_speed_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "speed_from_center_deviation",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_TriggerEffectItem",
      "prototype": "PT_TriggerEffectValue",
      "name": "PT_CreateTrivialSmokeEffectItem",
      "link": "/Types/CreateTrivialSmokeEffectItem",
      "description": "Extends <a href=\"/Types/TriggerEffectItem\" title=\"Types/TriggerEffectItem\">Types/TriggerEffectItem</a>."
    },
    {
      "properties": [
        {
          "name": "fluid_consumption",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "gun_barrel_length",
          "type": "PT_float",
          "default": "0.0",
          "optional": true
        },
        {
          "name": "projectile_creation_parameters",
          "type": "PT_CircularProjectileCreationSpecification",
          "optional": true
        },
        {
          "name": "gun_center_shift",
          "type": "PT_vector|PT_StreamAttackParametersGunCenterShift",
          "optional": true
        },
        {
          "name": "fluids",
          "description": "Controls which fluids can fuel this stream attack and their potential damage bonuses.",
          "type": "PT_StreamAttackParametersFluid[]",
          "optional": true
        }
      ],
      "parent": "PT_BaseAttackParameters",
      "prototype": "PT_AttackParameters",
      "name": "PT_StreamAttackParameters",
      "link": "/Types/StreamAttackParameters"
    },
    {
      "properties": [
        {
          "name": "flare",
          "description": "Name of <a href=\"/Prototype/ArtilleryFlare\" title=\"Prototype/ArtilleryFlare\">Prototype/ArtilleryFlare</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "play_sound_on_failure",
          "type": "PT_bool",
          "default": "true",
          "optional": false
        }
      ],
      "prototype": "PT_CapsuleAction",
      "name": "PT_ArtilleryRemoteCapsuleAction",
      "link": "/Types/ArtilleryRemoteCapsuleAction",
      "description": "Used by <a href=\"/Types/CapsuleAction\" title=\"Types/CapsuleAction\">Types/CapsuleAction</a>."
    },
    {
      "properties": [
        {
          "name": "inventory_size",
          "description": "Must be > 0.",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "gui_mode",
          "description": "Players that can access the GUI to change the link ID. Possible options: \"all\", \"none\", \"admins\".",
          "type": "PT_GuiMode",
          "default": "all",
          "optional": true
        },
        {
          "name": "picture",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "scale_info_icons",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_LinkedContainer",
      "link": "/Prototype/LinkedContainer",
      "description": "A container that shares its inventory with containers with the same <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.link_id\">link_id</a>, which can be set via the GUI. The link IDs are per prototype and force, so only containers with the <b>same ID</b>, <b>same prototype name</b> and <b>same force</b> will share inventories."
    },
    {
      "properties": [
        {
          "name": "structure",
          "type": "PT_UndergroundBeltStructure",
          "optional": false
        },
        {
          "name": "allow_blueprint_connection",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_clone_connection",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "allow_side_loading",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "structure_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        }
      ],
      "parent": "PT_TransportBeltConnectable",
      "prototype": "Prototype",
      "name": "PT_LinkedBelt",
      "link": "/Prototype/LinkedBelt",
      "description": "A belt that can be connected to a belt anywhere else, including on a different surface, see <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/LuaEntity.html#LuaEntity.connect_linked_belts\">connect_linked_belts</a> and other runtime functions."
    },
    {
      "properties": [
        {
          "name": "graphics_set",
          "type": "PT_SpiderLegGraphicsSet",
          "optional": false
        },
        {
          "name": "initial_movement_speed",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "minimal_step_size",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "movement_acceleration",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "movement_based_position_selection_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "part_length",
          "description": "Must be larger than 0.",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "target_position_randomisation_distance",
          "type": "PT_double",
          "optional": false
        },
        {
          "name": "walking_sound_volume_modifier",
          "type": "PT_double",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_EntityWithHealth",
      "prototype": "Prototype",
      "name": "PT_SpiderLeg",
      "link": "/Prototype/SpiderLeg",
      "description": "Used by <a href=\"/Types/SpiderLegSpecification\" title=\"Types/SpiderLegSpecification\">Types/SpiderLegSpecification</a> for <a href=\"/Prototype/SpiderVehicle\" title=\"Prototype/SpiderVehicle\">Prototype/SpiderVehicle</a>, also known as <a href=\"/Spidertron\" title=\"Spidertron\">spidertron</a>."
    },
    {
      "properties": [
        {
          "name": "automatic_weapon_cycling",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "burner",
          "description": "Must be a burner energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "energy_source",
          "description": "Can also be a void energy source.",
          "type": "PT_EnergySource",
          "optional": true
        },
        {
          "name": "chain_shooting_cooldown_modifier",
          "description": "This is applied whenever the spider shoots (manual and automatic targeting), <code>automatic_weapon_cycling</code> is true and the next gun in line (which is then selected) has ammo.<br>When all of the above is the case, the chain_shooting_cooldown_modifier is a multiplier on the remaining shooting cooldown: <code>cooldown = (remaining_cooldown × chain_shooting_cooldown_modifier)</code>. chain_shooting_cooldown_modifier is intended to be in the range of 0 to 1. This means that setting chain_shooting_cooldown_modifier to 0 reduces the remaining shooting cooldown to 0 while a chain_shooting_cooldown_modifier of 1 does not affect the remaining shooting cooldown at all.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "chunk_exploration_radius",
          "type": "PT_uint32",
          "optional": false
        },
        {
          "name": "graphics_set",
          "type": "PT_SpiderVehicleGraphicsSet",
          "optional": false
        },
        {
          "name": "height",
          "description": "The height of the spider affects the shooting height and the drawing of the graphics and lights.",
          "type": "PT_float",
          "optional": false
        },
        {
          "name": "inventory_size",
          "type": "PT_ItemStackIndex",
          "optional": false
        },
        {
          "name": "movement_energy_consumption",
          "type": "PT_Energy",
          "optional": false
        },
        {
          "name": "spider_engine",
          "type": "PT_SpiderEnginePrototype",
          "optional": false
        },
        {
          "name": "guns",
          "description": "The guns this spider vehicle uses.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "torso_rotation_speed",
          "description": "The orientation of the torso of the spider affects the shooting direction and the drawing of the graphics and lights.",
          "type": "PT_float",
          "default": "1",
          "optional": true
        },
        {
          "name": "trash_inventory_size",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_Vehicle",
      "prototype": "Prototype",
      "name": "PT_SpiderVehicle",
      "link": "/Prototype/SpiderVehicle",
      "description": "The <a href=\"/Spidertron\" title=\"Spidertron\">spidertron</a>."
    },
    {
      "properties": [
        {
          "name": "automatic_weapon_cycling",
          "type": "PT_bool",
          "optional": false
        },
        {
          "name": "icon_color_indicator_masks",
          "description": "The property for the file path is <code>icon_color_indicator_masks</code> instead of icon.",
          "type": "PT_IconData[]",
          "optional": false
        },
        {
          "name": "icon_color_indicator_mask",
          "type": "PT_IconData",
          "optional": false
        },
        {
          "name": "icon_size",
          "type": "PT_SpriteSizeType",
          "optional": false
        }
      ],
      "parent": "PT_Item",
      "prototype": "Prototype",
      "name": "PT_SpidertronRemote",
      "link": "/Prototype/SpidertronRemote",
      "description": "The <a href=\"/Spidertron_remote\" title=\"Spidertron remote\">spidertron remote</a>. This remote can only be connected to entities of type <a href=\"/Prototype/SpiderVehicle\" title=\"Prototype/SpiderVehicle\">Prototype/SpiderVehicle</a>."
    },
    {
      "properties": [
        {
          "name": "draw_as_glow",
          "description": "<p>Only one of <code>draw_as_shadow</code>, <code>draw_as_glow</code> and <code>draw_as_light</code> can be true. <code>draw_as_glow</code> takes precedence over <code>draw_as_light</code>.</p><p>Draws first as a normal sprite, and again as a light layer.<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/91682\">[1]</a></sup></p>",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "draw_as_light",
          "description": "Only one of <code>draw_as_shadow</code>, <code>draw_as_glow</code> and <code>draw_as_light</code> can be true.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "draw_as_shadow",
          "description": "Only one of <code>draw_as_shadow</code>, <code>draw_as_glow</code> and <code>draw_as_light</code> can be true. <code>draw_as_shadow</code> takes precedence over <code>draw_as_glow</code> and <code>draw_as_light</code>.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "name": "PT_DrawAsAddition"
    },
    {
      "properties": [
        {
          "name": "category",
          "description": "Name of a <a href=\"/Prototype/TipsAndTricksItemCategory\" title=\"Prototype/TipsAndTricksItemCategory\">Prototype/TipsAndTricksItemCategory</a>, used for the sorting of this tips and tricks entry. Tips and trick entries are sorted first by category and then by their <code>order</code> within that category.",
          "type": "string",
          "optional": true
        },
        {
          "name": "dependencies",
          "description": "An array of names of other tips and tricks items. This tips and tricks entry is only shown to the player once they have marked all dependencies as read.",
          "type": "string[]",
          "optional": true
        },
        {
          "name": "image",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "indent",
          "description": "The tips and tricks entry is indented by <code>indent</code>×6 spaces.",
          "type": "PT_uint8",
          "default": "0",
          "optional": true
        },
        {
          "name": "is_title",
          "description": "Whether the tip title on the left in the tips and tricks GUI should use the \"title_tip_item\" style (semi bold font).",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "simulation",
          "type": "PT_SimulationDefinition",
          "optional": true
        },
        {
          "name": "skip_trigger",
          "description": "Condition for never showing the tip notification to the player.",
          "type": "PT_TipTrigger",
          "optional": true
        },
        {
          "name": "starting_status",
          "type": "PT_TipStatus",
          "default": "locked",
          "optional": true
        },
        {
          "name": "tag",
          "description": "String to add in front of the tips and trick entries name. Can be anything, the base game tends to use <a href=\"/Rich_text\" title=\"Rich text\">rich text</a> tags for items, e.g. <code>[item=wooden-chest]</code> here.",
          "type": "string",
          "optional": true
        },
        {
          "name": "trigger",
          "description": "Condition for when the tip notification should be shown to the player.",
          "type": "PT_TipTrigger",
          "optional": true
        },
        {
          "name": "tutorial",
          "description": "Name of a <a href=\"/Prototype/Tutorial\" title=\"Prototype/Tutorial\">Prototype/Tutorial</a>.",
          "type": "string",
          "optional": true
        }
      ],
      "parent": "PT_PrototypeBase",
      "prototype": "Prototype",
      "name": "PT_TipsAndTricksItem",
      "link": "/Prototype/TipsAndTricksItem",
      "description": "A tips and tricks entry."
    },
    {
      "properties": [
        {
          "name": "name",
          "type": "string",
          "optional": false
        },
        {
          "name": "order",
          "description": "Tips and trick categories are sorted by <code>order</code>, and then the tips and tips entries are sorted by their own order within those categories.",
          "type": "PT_Order",
          "optional": false
        }
      ],
      "prototype": "Prototype",
      "name": "PT_TipsAndTricksItemCategory",
      "link": "/Prototype/TipsAndTricksItemCategory",
      "description": "A <a href=\"/Prototype/TipsAndTricksItem\" title=\"Prototype/TipsAndTricksItem\">Prototype/TipsAndTricksItem</a> category, used for sorting of tips and tricks entries: Tips and trick entries are sorted first by category and then by their order within that category."
    },
    {
      "properties": [
        {
          "name": "save",
          "description": "The save file that is used for this simulation. If not given and <code>generate_map</code> is true, a map gets generated by the game. ",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "init_file",
          "description": "This code is run as a (silent) console command inside the simulation when it is first initialized. Since this is run as a console command, the restrictions of console commands apply, e.g. <code>require</code> is not available<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://lua-api.factorio.com/latest/Libraries.html\">[1]</a></sup>.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "init",
          "description": "<p>Only loaded if <code>init_file</code> is not present.</p><p>This code is run as a (silent) console command inside the simulation when it is first initialized. Since this is run as a console command, the restrictions of console commands apply, e.g. <code>require</code> is not available<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://lua-api.factorio.com/latest/Libraries.html\">[2]</a></sup>.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "update_file",
          "description": "This code is run as a (silent) console command inside the simulation every time the simulation is updated. Since this is run as a console command, the restrictions of console commands apply, e.g. <code>require</code> is not available<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://lua-api.factorio.com/latest/Libraries.html\">[3]</a></sup>.",
          "type": "PT_FileName",
          "optional": true
        },
        {
          "name": "update",
          "description": "<p>Only loaded if <code>update_file</code> is not present.</p><p>This code is run as a (silent) console command inside the simulation every time the simulation is updated. Since this is run as a console command, the restrictions of console commands apply, e.g. <code>require</code> is not available<sup><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://lua-api.factorio.com/latest/Libraries.html\">[4]</a></sup>.</p>",
          "type": "string",
          "optional": true
        },
        {
          "name": "init_update_count",
          "description": "Amount of ticks that this simulation should run for before the simulation is shown to the player. These updates happen after init/init_file has been run and at the highest possible rate (> 60 UPS).",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "length",
          "description": "How long this simulation takes. In the main menu simulations, another simulation will start after this simulation ends.",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "generate_map",
          "description": "If <code>save</code> is not given and this is true, a map gets generated by the game for use in the simulation.",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "checkboard",
          "description": "If this is true, the map of the simulation is set to be a lab-tile checkerboard in the area of {{-20, -15},{20, 15}} when the scenario is first initialized (before init/init_file run).",
          "type": "PT_bool",
          "default": "true",
          "optional": true
        },
        {
          "name": "volume_modifier",
          "description": "Multiplier for the simulation volume set by the player in the sound settings.",
          "type": "PT_float",
          "optional": true
        },
        {
          "name": "override_volume",
          "description": "If true, overrides the simulation volume set by the player in the sound settings, simply setting the volume modifier to 1. ",
          "type": "PT_bool",
          "optional": true
        }
      ],
      "name": "PT_SimulationDefinition",
      "link": "/Types/SimulationDefinition",
      "description": "Used by <a href=\"/Prototype/TipsAndTricksItem\" title=\"Prototype/TipsAndTricksItem\">Prototype/TipsAndTricksItem</a> and by main menu simulations (<a href=\"/Prototype/UtilityConstants\" title=\"Prototype/UtilityConstants\">Prototype/UtilityConstants</a>)."
    },
    {
      "properties": [
        {
          "name": "military_target",
          "description": "The name of the simple entity with force prototype that gets enemies interested in attacking the spider vehicle when nobody is in it.",
          "type": "string",
          "optional": false
        },
        {
          "name": "legs",
          "type": "PT_SpiderLegSpecification|PT_SpiderLegSpecification[]",
          "optional": false
        }
      ],
      "name": "PT_SpiderEnginePrototype",
      "link": "/Types/SpiderEnginePrototype",
      "description": "Used by <a href=\"/Prototype/SpiderVehicle\" title=\"Prototype/SpiderVehicle\">Prototype/SpiderVehicle</a>."
    },
    {
      "properties": [
        {
          "name": "joint_turn_offset",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "joint",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "joint_shadow",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "upper_part",
          "type": "PT_SpiderLegPart",
          "optional": true
        },
        {
          "name": "lower_part",
          "type": "PT_SpiderLegPart",
          "optional": true
        },
        {
          "name": "upper_part_shadow",
          "type": "PT_SpiderLegPart",
          "optional": true
        },
        {
          "name": "lower_part_shadow",
          "type": "PT_SpiderLegPart",
          "optional": true
        },
        {
          "name": "upper_part_water_reflection",
          "type": "PT_SpiderLegPart",
          "optional": true
        },
        {
          "name": "lower_part_water_reflection",
          "type": "PT_SpiderLegPart",
          "optional": true
        }
      ],
      "name": "PT_SpiderLegGraphicsSet",
      "link": "/Types/SpiderLegGraphicsSet",
      "description": "Used to specify the graphics for <a href=\"/Prototype/SpiderLeg\" title=\"Prototype/SpiderLeg\">Prototype/SpiderLeg</a>."
    },
    {
      "properties": [
        {
          "name": "base_animation",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_base_animation",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "animation",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "shadow_animation",
          "type": "PT_RotatedAnimation",
          "optional": true
        },
        {
          "name": "base_render_layer",
          "type": "PT_RenderLayer",
          "default": "higher-object-under",
          "optional": true
        },
        {
          "name": "render_layer",
          "type": "PT_RenderLayer",
          "default": "wires-above",
          "optional": true
        },
        {
          "name": "autopilot_destination_visualisation_render_layer",
          "type": "PT_RenderLayer",
          "default": "object",
          "optional": true
        },
        {
          "name": "light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "eye_light",
          "type": "PT_LightDefinition",
          "optional": true
        },
        {
          "name": "autopilot_destination_on_map_visualisation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "autopilot_destination_queue_on_map_visualisation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "autopilot_destination_visualisation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "autopilot_destination_queue_visualisation",
          "type": "PT_AnimationType",
          "optional": true
        },
        {
          "name": "autopilot_path_visualisation_line_width",
          "type": "PT_AnimationType",
          "default": "0.125",
          "optional": true
        },
        {
          "name": "autopilot_path_visualisation_on_map_line_width",
          "type": "PT_AnimationType",
          "default": "2.0",
          "optional": true
        },
        {
          "name": "light_positions",
          "type": "PT_vector[][]",
          "optional": true
        }
      ],
      "name": "PT_SpiderVehicleGraphicsSet",
      "link": "/Types/SpiderVehicleGraphicsSet",
      "description": "Used to specify the graphics for <a href=\"/Prototype/SpiderVehicle\" title=\"Prototype/SpiderVehicle\">Prototype/SpiderVehicle</a>."
    },
    {
      "properties": [
        {
          "name": "triggers",
          "description": "Array of other tip triggers, if at least one of them is fulfilled, this tip trigger is considered fulfilled.",
          "type": "PT_TipTrigger[]",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_OrTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "triggers",
          "description": "Array of other tip triggers, if all of them are fulfilled, this tip trigger is considered fulfilled.",
          "type": "PT_TipTrigger[]",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_AndTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "triggers",
          "description": "Array of other tip triggers.",
          "type": "PT_TipTrigger[]",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_SequenceTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [],
      "prototype": "PT_TipTrigger",
      "name": "PT_DependenciesMetTipTrigger",
      "link": "/Types/TipTrigger",
      "description": "This tip trigger is considered fulfilled when the dependencies of the <a href=\"/Prototype/TipsAndTricksItem\" title=\"Prototype/TipsAndTricksItem\">Prototype/TipsAndTricksItem</a> are fulfilled."
    },
    {
      "properties": [
        {
          "name": "ticks",
          "type": "PT_uint32",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_TimeElapsedTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "technology",
          "description": "Name of a <a href=\"/Prototype/Technology\" title=\"Prototype/Technology\">Prototype/Technology</a>.",
          "type": "string",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_ResearchTechnologyTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "recipe",
          "description": "Name of a <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a>.",
          "type": "string",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_UnlockedRecipeTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "item",
          "description": "Name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "consecutive",
          "description": "Can only be used with <code>event_type</code> \"crafting-finished\". ",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "event_type",
          "type": "PT_CraftItemTipTriggerEventType",
          "optional": false
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_CraftItemTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "1",
          "optional": true
        },
        {
          "name": "entity",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "match_type_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "build_by_dragging",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_BuildEntityTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_ManualTransferTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "transfer",
          "type": "PT_StackTransferTipTriggerTransfer",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_StackTransferTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "transfer",
          "type": "PT_EntityTransferTipTriggerTransfer",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_EntityTransferTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "recipe",
          "description": "Name of a <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "machine",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "consecutive",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        },
        {
          "name": "uses_fluid",
          "description": "Default: any (= it does not matter)",
          "type": "PT_bool",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_SetRecipeTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_LimitChestTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_UsePipetteTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "logistic_chest_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_SetLogisticRequestTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_UseConfirmTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_LowPowerTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "source",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "target",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "match_type_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_PasteEntitySettingsTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        },
        {
          "name": "source",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "target",
          "description": "Name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>.",
          "type": "string",
          "optional": true
        },
        {
          "name": "match_type_only",
          "type": "PT_bool",
          "default": "false",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_FastReplaceTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "count",
          "type": "PT_uint32",
          "default": "0",
          "optional": true
        }
      ],
      "prototype": "PT_TipTrigger",
      "name": "PT_GroupAttackTipTrigger",
      "link": "/Types/TipTrigger"
    },
    {
      "properties": [
        {
          "name": "leg",
          "description": "Name of a <a href=\"/Prototype/SpiderLeg\" title=\"Prototype/SpiderLeg\">Prototype/SpiderLeg</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "mount_position",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "ground_position",
          "type": "PT_vector",
          "optional": false
        },
        {
          "name": "blocking_legs",
          "description": "The 1-based indices of the legs that should block this leg's movement.",
          "type": "PT_uint32[]",
          "optional": false
        },
        {
          "name": "leg_hit_the_ground_trigger",
          "type": "PT_TriggerEffect",
          "optional": true
        }
      ],
      "name": "PT_SpiderLegSpecification",
      "link": "/Types/SpiderLegSpecification",
      "description": "Used by <a href=\"/Types/SpiderEnginePrototype\" title=\"Types/SpiderEnginePrototype\">Types/SpiderEnginePrototype</a> for <a href=\"/Prototype/SpiderVehicle\" title=\"Prototype/SpiderVehicle\">Prototype/SpiderVehicle</a>."
    },
    {
      "properties": [
        {
          "name": "top_end",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "middle",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "bottom_end",
          "type": "PT_SpriteType",
          "optional": true
        },
        {
          "name": "middle_offset_from_top",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "middle_offset_from_bottom",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "top_end_length",
          "type": "PT_float",
          "default": "0",
          "optional": true
        },
        {
          "name": "bottom_end_length",
          "type": "PT_float",
          "default": "0",
          "optional": true
        }
      ],
      "name": "PT_SpiderLegPart",
      "link": "/Types/SpiderLegPart",
      "description": "Used by <a href=\"/Types/SpiderLegGraphicsSet\" title=\"Types/SpiderLegGraphicsSet\">Types/SpiderLegGraphicsSet</a> for <a href=\"/Prototype/SpiderLeg\" title=\"Prototype/SpiderLeg\">Prototype/SpiderLeg</a>."
    },
    {
      "properties": [
        {
          "name": "infer_icon",
          "description": "If set to false, use the icon from the <a href=\"/Prototype/UtilitySprites\" title=\"Prototype/UtilitySprites\">utility sprites</a> for this technology effect icon.",
          "type": "PT_bool",
          "default": "0",
          "optional": true
        },
        {
          "name": "use_icon_overlay_constant",
          "description": "If set to false, do not draw the small \"constant\" icon over the technology effect icon. ",
          "type": "PT_bool",
          "default": "0",
          "optional": true
        }
      ],
      "parent": "PT_IconSpecification",
      "name": "PT_ModifierPrototypeParent",
      "link": "/Types/ModifierPrototype",
      "description": "Parent for the prototype \"ModifierPrototype\""
    },
    {
      "properties": [
        {
          "name": "modifier",
          "description": "Modification value. This value will be added to the variable it modifies.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_SimpleModifierPrototype",
      "link": "/Types/SimpleModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "turret_id",
          "description": "Prototype name of the <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">entity</a> that is affected.",
          "type": "string",
          "optional": false
        },
        {
          "name": "modifier",
          "description": "Modification value. This will be added to the current turret attack modifier upon researching.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_TurretAttackModifierPrototype",
      "link": "/Types/TurretAttackModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "ammo_category",
          "description": "Prototype name of the <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">ammunition category</a> that is affected.",
          "type": "string",
          "optional": false
        },
        {
          "name": "modifier",
          "description": "Modification value. This will be added to the current ammo damage modifier upon researching.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_AmmoDamageModifierPrototype",
      "link": "/Types/AmmoDamageModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "item",
          "description": "Name of a <a href=\"/Prototype/Item\" title=\"Prototype/Item\">Prototype/Item</a>.",
          "type": "string",
          "optional": false
        },
        {
          "name": "count",
          "description": "Must be > 0.",
          "type": "PT_ItemCountType",
          "default": "1",
          "optional": true
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_GiveItemModifierPrototype",
      "link": "/Types/GiveItemModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "ammo_category",
          "description": "Prototype name of the <a href=\"/Prototype/AmmoCategory\" title=\"Prototype/AmmoCategory\">ammunition category</a> that is affected.",
          "type": "string",
          "optional": false
        },
        {
          "name": "modifier",
          "description": "Modification value. This will be added to the current gun speed modifier upon researching.",
          "type": "PT_double",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_GunSpeedModifierPrototype",
      "link": "/Types/GunSpeedModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "recipe",
          "description": "Prototype name of the <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">recipe</a> that is unlocked upon researching.",
          "type": "string",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_UnlockRecipeModifierPrototype",
      "link": "/Types/UnlockRecipeModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "modifier",
          "description": "The value this modifier will have upon researching.",
          "type": "PT_bool",
          "optional": false
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_BoolModifierPrototype",
      "link": "/Types/BoolModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    },
    {
      "properties": [
        {
          "name": "effect_description",
          "type": "PT_LocalisedString",
          "optional": true
        }
      ],
      "parent": "PT_Parent",
      "prototype": "PT_ModifierPrototype",
      "name": "PT_NothingModifierPrototype",
      "link": "/Types/NothingModifierPrototype",
      "description": "Extends <a href=\"/Types/ModifierPrototype\" title=\"Types/ModifierPrototype\">Types/ModifierPrototype</a>."
    }
  ],
  "aliases": [
    {
      "other": "string[]",
      "name": "PT_LocalisedString",
      "link": "/Types/LocalisedString"
    },
    {
      "other": "PT_DamageTypeFiltersValue|string|string[]",
      "name": "PT_DamageTypeFilters",
      "link": "/Types/DamageTypeFilters",
      "description": "Either a dictionary (<a href=\"/Types/table\" title=\"Types/table\">Types/table</a>) with the below properties, an array (<a href=\"/Types/table\" title=\"Types/table\">Types/table</a>) of names of <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageTypes</a> (<a href=\"/Types/string\" title=\"Types/string\">Types/strings</a>), or one name of a <a href=\"/Prototype/DamageType\" title=\"Prototype/DamageType\">Prototype/DamageType</a> (<a href=\"/Types/string\" title=\"Types/string\">Types/string</a>)."
    },
    {
      "other": "PT_double",
      "name": "PT_MaterialAmountType",
      "link": "/Types/MaterialAmountType"
    },
    {
      "other": "PT_SoundType|PT_TileBuildSoundValue",
      "name": "PT_TileBuildSound",
      "link": "/Types/Tile#build_sound"
    },
    {
      "other": "number",
      "name": "PT_int16",
      "link": "/Types/int16",
      "description": "16 bit signed number. The range is -32,768 to 32,767 or [-2^15, 2^15 - 1]."
    },
    {
      "other": "PT_int32",
      "name": "PT_int",
      "link": "/Types/int"
    },
    {
      "other": "number",
      "name": "PT_uint32",
      "link": "/Types/uint32",
      "description": "32 bit unsigned number. The range is [0, 2^32-1] or [0, 4294967295] or approximately 4 billion 294 million."
    },
    {
      "other": "PT_FootstepTriggerEffectListValue[]",
      "name": "PT_FootstepTriggerEffectList",
      "link": "/Types/FootstepTriggerEffectList"
    },
    {
      "other": "string",
      "name": "PT_Order",
      "link": "/Types/Order",
      "description": "<p>The order property is a <b>simple</b> <a href=\"/Types/string\" title=\"Types/string\">string</a>. When the game needs to sort prototypes, it looks at their order properties and sorts those alphabetically. A prototype with an order string of \"a\" will be listed before other prototypes with order string \"b\" or \"c\". The \"-\" or \"[]\" structures that can be found in vanilla order strings <i>do not</i> have any special meaning.</p><p>When the game compares two prototypes (of the same type) if the order strings aren't equal they're <a href=\"http://en.wikipedia.org/wiki/Lexicographical_order\" class=\"extiw\" title=\"wikipedia:Lexicographical order\">lexicographically compared</a> to determine if a given prototype is shown before or after another. If the order strings are equal then the game falls back to comparing the prototype names to determine order.</p>"
    },
    {
      "other": "PT_SoundValue1|PT_SoundValue2[]",
      "name": "PT_SoundType",
      "link": "/Types/Sound"
    },
    {
      "other": "PT_int16",
      "name": "PT_SpriteSizeType",
      "link": "/Types/SpriteSizeType"
    },
    {
      "other": "PT_Position[]",
      "name": "PT_BoundingBox",
      "link": "/Types/BoundingBox",
      "description": "<p>BoundingBox is set of two Types/Position. BoundingBoxes are typically centered around the position of an entity.</p><p>The first position is assumed to be leftTop, the second position is assumed to be rightBottom. A third member may be added, a Types/float that represents the orientation, however it does not seem to be used.</p>"
    },
    {
      "other": "PT_RotatedAnimation|PT_RotatedAnimation[]",
      "name": "PT_RotatedAnimationVariations",
      "link": "/Types/RotatedAnimationVariations"
    },
    {
      "other": "number",
      "name": "PT_int32",
      "link": "/Types/int32",
      "description": "32 bit signed number. The range is [-2^31, 2^31 - 1] or [-2147483648, 2147483647] or approximately 2 billion 147 million."
    },
    {
      "other": "PT_LootValue[]",
      "name": "PT_Loot",
      "link": "/Types/Loot"
    },
    {
      "other": "PT_LayeredSoundValue|PT_SoundType",
      "name": "PT_LayeredSound",
      "link": "/Types/LayeredSound"
    },
    {
      "other": "number[]|PT_PositionValue",
      "name": "PT_Position",
      "link": "/Types/Position",
      "description": "<p>Coordinates of a tile in a map. Positions may be specified either as a dictionary with x, y as keys, or simply as an array with two elements.</p><p>The coordinates are fixed size int: 32 bit with 8 bits reserved for sub 1 precision, this means that it's smallest value step is 1/2^8 = 0.00390625.</p>"
    },
    {
      "other": "number",
      "name": "PT_double",
      "link": "/Types/double"
    },
    {
      "other": "PT_SpriteType[]|PT_SpriteType|PT_SpriteVariationsValue",
      "name": "PT_SpriteVariations",
      "link": "/Types/SpriteVariations"
    },
    {
      "other": "table",
      "name": "PT_vector",
      "link": "/Types/vector",
      "description": "A vector is a two-element array containing the x and y components. Unlike Positions, vectors don't use the x, y keys. Positive x goes towards east, positive y goes towards south."
    },
    {
      "other": "PT_AnimationType[]|PT_AnimationVariationValue",
      "name": "PT_AnimationVariations",
      "description": ""
    },
    {
      "other": "number",
      "name": "PT_int8",
      "link": "/Types/int8",
      "description": "8-bit signed integer. Possible values are –128 to 127. "
    },
    {
      "other": "PT_uint16[]",
      "name": "PT_AnimationFrameSequence",
      "link": "/Types/AnimationFrameSequence",
      "description": "<p>This is a list of 1-based frame indices into the spritesheet. The actual length of the animation will then be the length of the frame_sequence (times <code>repeat_count</code>, times two if <code>run_mode</code> is \"forward-then-backward\"). There is a limit for (actual) animation length of 255 frames.</p><p>Indices can be used in any order, repeated or not used at all. Unused frames are not loaded into VRAM at all, frames referenced multiple times are loaded just once.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/53202\">[1]</a></p>"
    },
    {
      "other": "number",
      "name": "PT_uint16",
      "link": "/Types/uint16",
      "description": "16 bit unsigned number. The range is [0, 2^16-1] or [0, 65535]"
    },
    {
      "other": "PT_DaytimeColorLookupTableValue[]",
      "name": "PT_DaytimeColorLookupTable",
      "link": "/Types/DaytimeColorLookupTable"
    },
    {
      "other": "string",
      "name": "PT_Energy",
      "link": "/Types/Energy",
      "description": "<p>Uses <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> to specify the amount of electric energy in joules or electric energy per time in watts.</p><p>Internally, the input in Watt or <code>Joule/second</code> is always converted into Joule/tick or <code>Joule/(1/60)second</code>, using the following formula: <code>Power in Joule/tick = Power in Watt&nbsp;/&nbsp;60</code> (<a href=\"/Units#Power\" title=\"Units\">Units#Power</a>).</p>"
    },
    {
      "other": "string",
      "name": "PT_FileName",
      "link": "/Types/FileName",
      "description": "Slash (/) is always used as directory delimiter."
    },
    {
      "other": "table",
      "name": "PT_NoiseExpression",
      "link": "/Types/NoiseExpression",
      "description": "<p>A fragment of a functional program used to generate coherent noise, probably for purposes related to terrain generation.</p><p>Noise expressions can be provided as table literals or built using functions in the <a rel=\"nofollow\" class=\"external text\" href=\"https://github.com/wube/factorio-data/blob/master/core/lualib/noise.lua\">built-in <code>noise</code> library</a>. The built-in noise library allows writing much more concise code, so its usage will be shown in most examples on this page.<br><a rel=\"nofollow\" class=\"external text\" href=\"https://github.com/wube/factorio-data/blob/master/core/lualib/noise.lua#L272\"><code>noise.define_noise_function</code></a> allows noise expressions to be defined using a shorthand that's a subset of Lua (see <a href=\"#Example_definition\">example definition</a> for an example and its literal equivalent).</p><p><b>Types/NoiseExpression</b> is used by <a href=\"/Prototype/NamedNoiseExpression#expression\" title=\"Prototype/NamedNoiseExpression\">NamedNoiseExpressionPrototype::expression</a>, <a href=\"/Types/AutoplaceSpecification#Properties_for_Expression-based_AutoplaceSpecifications\" title=\"Types/AutoplaceSpecification\">AutoplaceSpecification::probability_expression</a> and <a href=\"/Types/AutoplaceSpecification#Properties_for_Expression-based_AutoplaceSpecifications\" title=\"Types/AutoplaceSpecification\">AutoplaceSpecification::richness_expression</a>.</p>"
    },
    {
      "other": "PT_double[]|PT_SpawnPointValue",
      "name": "PT_SpawnPoint",
      "link": "/Types/SpawnPoint",
      "description": "The definition of a evolution and probability weights for a spawnable unit (<a href=\"/Types/UnitSpawnDefinition\" title=\"Types/UnitSpawnDefinition\">Types/UnitSpawnDefinition</a>) for a <a href=\"/Prototype/EnemySpawner\" title=\"Prototype/EnemySpawner\">Prototype/EnemySpawner</a>. It can be specified as a table with named or numbered keys, but not a mix of both."
    },
    {
      "other": "number",
      "name": "PT_uint8",
      "link": "/Types/uint8",
      "description": "8-bit unsigned integer. Possible values are 0 to 255."
    },
    {
      "other": "PT_AttackReactionItem[]",
      "name": "PT_AttackReaction",
      "link": "/Types/AttackReaction"
    },
    {
      "other": "PT_RotatedAnimation4WayValue|PT_RotatedAnimation",
      "name": "PT_RotatedAnimation4Way",
      "link": "/Types/RotatedAnimation4Way",
      "description": "A map of rotated animations for all 4 directions of the entity, or one <a href=\"/Types/RotatedAnimation\" title=\"Types/RotatedAnimation\">Types/RotatedAnimation</a> that is used for all directions."
    },
    {
      "other": "PT_uint16",
      "name": "PT_ItemStackIndex",
      "link": "/Types/ItemStackIndex"
    },
    {
      "other": "string[]",
      "name": "PT_TriggerTargetMask",
      "link": "/Types/TriggerTargetMask"
    },
    {
      "other": "table[]",
      "name": "PT_CircularProjectileCreationSpecification",
      "link": "/Types/CircularProjectileCreationSpecification",
      "description": "An <a href=\"/Types/table\" title=\"Types/table\">array</a> of arrays. The first member of the inner arrays is a <a href=\"/Types/RealOrientation\" title=\"Types/RealOrientation\">Types/RealOrientation</a>, the second member is a <a href=\"/Types/vector\" title=\"Types/vector\">Types/vector</a>."
    },
    {
      "other": "number",
      "name": "PT_uint64",
      "link": "/Types/uint64",
      "description": "64 bit unsigned number."
    },
    {
      "other": "PT_uint32",
      "name": "PT_ItemCountType",
      "link": "/Types/ItemCountType"
    },
    {
      "other": "number",
      "name": "PT_RealOrientation",
      "link": "/Types/RealOrientation",
      "description": "Specified by a <a href=\"/Types/float\" title=\"Types/float\">Types/float</a> between 0 and 1, including 0 and excluding 1."
    },
    {
      "other": "string|PT_ExplosionDefinitionValue",
      "name": "PT_ExplosionDefinition",
      "link": "/Types/ExplosionDefinition",
      "description": "Used by <a href=\"/Prototype/EntityWithHealth#dying_explosion\" title=\"Prototype/EntityWithHealth\">Prototype/EntityWithHealth#dying_explosion</a>. This is either a <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> that is the name of a <a href=\"/Prototype/Entity\" title=\"Prototype/Entity\">Prototype/Entity</a>, or a table with the below properties."
    },
    {
      "other": "PT_SpriteType|PT_Sprite4WayValue[]",
      "name": "PT_Sprite4Way",
      "link": "/Types/Sprite4Way"
    },
    {
      "other": "number",
      "name": "PT_float",
      "link": "/Types/float"
    },
    {
      "other": "PT_Animation4WayValue|PT_AnimationType",
      "name": "PT_Animation4Way",
      "link": "/Types/Animation4Way",
      "description": "A map of animations for all 4 directions of the entity, or one <a href=\"/Types/Animation\" title=\"Types/Animation\">Types/Animation</a> that is used for all directions."
    },
    {
      "other": "PT_TriggerEffectValue|PT_TriggerEffectValue[]",
      "name": "PT_TriggerEffect",
      "link": "/Types/TriggerEffect"
    },
    {
      "other": "PT_SpriteFlagsValue[]",
      "name": "PT_SpriteFlags",
      "link": "/Types/SpriteFlags"
    },
    {
      "other": "PT_EffectTypeLimitationValue[]",
      "name": "PT_EffectTypeLimitation",
      "link": "/Types/EffectTypeLimitation",
      "description": "A <a href=\"/Types/table\" title=\"Types/table\">list</a> of module effects or just one module effect as a string. Modules with other effects cannot be used on the machine. This means that both effects from modules and from surrounding beacons are restricted to the listed effects. If <code>allowed_effects</code> is set to <code>nil</code>, the machine cannot be affected by modules or beacons."
    },
    {
      "other": "PT_CollisionMaskValue[]",
      "name": "PT_CollisionMask",
      "link": "/Types/CollisionMask"
    },
    {
      "other": "PT_EntityPrototypeFlagsValue[]",
      "name": "PT_EntityPrototypeFlags",
      "link": "/Types/EntityPrototypeFlags"
    },
    {
      "other": "PT_ItemPrototypeFlagsValue[]",
      "name": "PT_ItemPrototypeFlags",
      "link": "/Types/ItemPrototypeFlags"
    },
    {
      "other": "PT_SelectionToolSelectionModeValue[]",
      "name": "PT_SelectionToolSelectionMode",
      "link": "/Types/SelectionTool#selection_mode"
    },
    {
      "other": "boolean",
      "name": "PT_bool",
      "link": "/Types/bool"
    }
  ],
  "strings": [
    {
      "value": {
        "whitelist": "",
        "blacklist": ""
      },
      "name": "PT_WhitelistBlacklist"
    },
    {
      "value": {
        "zero": "",
        "water": "",
        "water-overlay": "",
        "ground": "",
        "top": ""
      },
      "name": "PT_TileLayerGroup",
      "link": "/Prototype/Tile#layer_group"
    },
    {
      "value": {
        "automatic": "",
        "true": "",
        "false": ""
      },
      "name": "PT_EntityRemoveDecoratives",
      "link": "/Prototype/Entity#remove_decoratives"
    },
    {
      "value": {
        "center-to-center": "",
        "bounding-box-to-bounding-box": ""
      },
      "name": "PT_BaseAttackParametersRangeMode",
      "link": "/Types/BaseAttackParameters#range_mdoe"
    },
    {
      "value": {
        "shoot": "",
        "throw": "",
        "consume": "",
        "activate": ""
      },
      "name": "PT_BaseAttackParametersActivationType",
      "link": "/Types/BaseAttackParameters#activation_type"
    },
    {
      "value": {
        "heat-water-inside": "",
        "output-to-separate-pipe": ""
      },
      "name": "PT_BoilerMode",
      "link": "/Prototype/Boiler#mode"
    },
    {
      "value": {
        "all": "",
        "enemy": "",
        "ally": "",
        "friend": "",
        "not-friend": "",
        "same": "",
        "not-same": ""
      },
      "name": "PT_ForceCondition",
      "link": "/Types/ForceCondition"
    },
    {
      "value": {
        "primary-input": "As input used for the most important machines, currently used for laser turrets.",
        "primary-output": "",
        "secondary-input": "As input used for all other machines.",
        "secondary-output": "As output used in steam generators.",
        "tertiary": "As input/output used for accumulators, to collect the overproduction or provide energy when neither primary/secondary output can't.",
        "solar": "Can only be used by <a href=\"/Prototype/SolarPanel\" title=\"Prototype/SolarPanel\">Prototype/SolarPanel</a>, will be ignored otherwise.",
        "lamp": "Can only be used by <a href=\"/Prototype/Lamp\" title=\"Prototype/Lamp\">Prototype/Lamp</a>, will be ignored otherwise."
      },
      "name": "PT_ElectricUsagePriority",
      "link": "/Types/ElectricUsagePriority",
      "description": "Used to specify priority of energy usage in the <a href=\"/Electric_system\" title=\"Electric system\">Electric network</a>."
    },
    {
      "value": {
        "primary": "",
        "secondary": "",
        "tertiary": "",
        "quaternary": "",
        "none": ""
      },
      "name": "PT_BeaconGraphicsSetApplymoduleTint",
      "link": "/Types/BeaconGraphicsSet#apply_module_tint"
    },
    {
      "value": {
        "normal": "The result color is determined with the following formula: <code>Result = Active_RGB * Active_Alpha + Background_RGB * ( 1 - Active_Alpha )</code>",
        "additive": "The result color is determined with the following formula: <code>Result = Active_RGB + Background_RGB</code>",
        "additive-soft": "The result color is determined with the following formula: <code>Result = Active_RGB * ( 1 - Background_RGB ) + Background_RGB</code>",
        "multiplicative": "The result color is determined with the following formula: <code>Result = Active_RGB * Background_RGB</code>",
        "overwrite": "The result color is determined with the following formula: <code>Result = Active_RGBA or Background_RGBA</code>"
      },
      "name": "PT_BlendMode",
      "link": "/Types/BlendMode"
    },
    {
      "value": {
        "resource-color": "",
        "input-fluid-base-color": "",
        "input-fluid-flow-color": "",
        "status": "",
        "none": ""
      },
      "name": "PT_WorkingVisualisationApplyTint",
      "link": "/Types/WorkingVisualisation#apply_tint"
    },
    {
      "value": {
        "default": "Items are inserted into this item-with-inventory only if they match the whitelist defined in the prototype for the item and whitelist is used.",
        "never": "Items are never inserted into this item-with-inventory except explicitly by the player or script.",
        "always": "All items first try to be inserted into this item-with-inventory.",
        "when_manually_filtered": "When the inventory contains filters that match the item-to-be-inserted then try to put it into this item before the inventory this item resides in."
      },
      "name": "PT_ItemWithInventoryInsertionPriorityMode",
      "link": "/Prototype/ItemWithInventory#insertion_priority_mode"
    },
    {
      "value": {
        "research-technology": "",
        "build-entity": "",
        "craft-item": "",
        "manual-transfer": ""
      },
      "name": "PT_TutorialTriggerType",
      "link": "/Prototype/Tutorial#trigger"
    },
    {
      "value": {
        "lua": "",
        "spawn-item": "",
        "toggle-personal-roboport": "",
        "toggle-personal-logistic-requests": "",
        "toggle-equipment-movement-bonus": ""
      },
      "name": "PT_CustomInputAction",
      "link": "/Prototype/CustomInput#action"
    },
    {
      "value": {
        "entity": "",
        "position": "",
        "direction": ""
      },
      "name": "PT_AmmoTypeTargetType",
      "link": "/Types/AmmoType#target_type"
    },
    {
      "value": {
        "all": "",
        "none": "",
        "admins": ""
      },
      "name": "PT_GuiMode",
      "link": "/Prototype/InfinityContainer#gui_mode"
    },
    {
      "value": {
        "enemy": "",
        "player": "",
        "neutral": ""
      },
      "name": "PT_AutoplaceSpecificationForce",
      "link": "/Types/AutoplaceSpecification#force"
    },
    {
      "value": {
        "input": "",
        "input-output": "",
        "output": ""
      },
      "name": "PT_PipeConnectionDefinitionType",
      "link": "/Types/PipeConnectionDefinition#production_type"
    },
    {
      "value": {
        "flicker": "",
        "uranium-glow": "",
        "none": ""
      },
      "name": "PT_WorkingVisualisationEffect",
      "link": "/Types/WorkingVisualisation#effect"
    },
    {
      "value": {
        "game-effect": "",
        "gui-effect": "",
        "ambient": "",
        "environment": "",
        "walking": "",
        "alert": "",
        "wind": ""
      },
      "name": "PT_SoundCategory",
      "link": "/Prototype/Sound#category"
    },
    {
      "value": {
        "left": "",
        "center": "",
        "right": ""
      },
      "name": "PT_LampGlowRenderMode",
      "link": "/Prototype/Lamp#glow_render_mode"
    },
    {
      "value": {
        "extra-high-no-scale": "",
        "extra-high": "",
        "high": "",
        "medium": "",
        "low": "",
        "very-low": "",
        "no-atlas": ""
      },
      "name": "PT_SpritePriority",
      "link": "/Types/SpritePriority",
      "description": "This sets the \"caching priority\" of a sprite, so deciding priority of it being included in VRAM instead of streaming it and is therefore a purely technical value.<a rel=\"nofollow\" class=\"external autonumber\" href=\"https://forums.factorio.com/viewtopic.php?p=437380#p437380\">[1]</a><a rel=\"nofollow\" class=\"external autonumber\" href=\"https://www.factorio.com/blog/post/fff-264\">[2]</a> The possible values are listed below."
    },
    {
      "value": {
        "distance-from-collision-box": "",
        "distance-from-center": ""
      },
      "name": "PT_AreaTriggerItemCollisionMode",
      "link": "/Types/AreaTriggerItem#collision_mode"
    },
    {
      "value": {
        "default": "",
        "red": "",
        "green": "",
        "blue": ""
      },
      "name": "PT_ShortcutStyle",
      "link": "/Prototype/Shortcut#style"
    },
    {
      "value": {
        "virtual": "",
        "item": "",
        "fluid": ""
      },
      "name": "PT_SignalColorMappingType",
      "link": "/Types/SignalColorMapping#type"
    },
    {
      "value": {
        "toggle-alt-mode": "",
        "undo": "",
        "copy": "",
        "cut": "",
        "paste": "",
        "import-string": "",
        "toggle-personal-roboport": "",
        "toggle-equipment-movement-bonus": "",
        "spawn-item": "",
        "lua": ""
      },
      "name": "PT_ShortcutAction",
      "link": "/Prototype/Shortcut#action"
    },
    {
      "value": {
        "water-tile": "",
        "ground-tile": "",
        "tile-transition": "",
        "decals": "",
        "lower-radius-visualization": "",
        "radius-visualization": "",
        "transport-belt-integration": "",
        "resource": "",
        "building-smoke": "",
        "decorative": "",
        "ground-patch": "",
        "ground-patch-higher": "",
        "ground-patch-higher2": "",
        "remnants": "",
        "floor": "",
        "transport-belt": "",
        "transport-belt-endings": "",
        "floor-mechanics-under-corpse": "",
        "corpse": "",
        "floor-mechanics": "",
        "item": "",
        "lower-object": "",
        "transport-belt-circuit-connector": "",
        "lower-object-above-shadow": "",
        "object": "",
        "higher-object-under": "",
        "higher-object-above": "",
        "item-in-inserter-hand": "",
        "wires": "",
        "wires-above": "",
        "entity-info-icon": "",
        "entity-info-icon-above": "",
        "explosion": "",
        "projectile": "",
        "smoke": "",
        "air-object": "",
        "air-entity-info-icon": "",
        "light-effect": "",
        "selection-box": "",
        "higher-selection-box": "",
        "collision-selection-box": "",
        "arrow": "",
        "cursor": ""
      },
      "name": "PT_RenderLayer",
      "link": "/Types/RenderLayer"
    },
    {
      "value": {
        "left": "",
        "center": "",
        "right": ""
      },
      "name": "PT_TextAlignment",
      "link": "/Prototype/FlyingText#text_alignment"
    },
    {
      "value": {
        "none": "The associated script event will fire when satisfied and pass through to normal game events (default).",
        "game-only": "The associated script event will fire when satisfied and block game events that conflict with the key sequence. Actions that are processed regardless of game paused state cannot be blocked."
      },
      "name": "PT_ConsumingType",
      "link": "/Types/ConsumingType",
      "description": "A <a href=\"/Types/string\" title=\"Types/string\">Types/string</a> that defines which other inputs a <a href=\"/Prototype/CustomInput\" title=\"Prototype/CustomInput\">Prototype/CustomInput</a> consumes."
    },
    {
      "value": {
        "passive-provider": "",
        "active-provider": "",
        "storage": "",
        "buffer": "",
        "requester": ""
      },
      "name": "PT_LogisticContainerLogisticMode",
      "link": "/Prototype/LogisticContainer#logistic_mode"
    },
    {
      "value": {
        "early-game": "",
        "main-track": "",
        "interlude": "",
        "late-game": "",
        "menu-track": ""
      },
      "name": "PT_AmbientSoundTrackType",
      "link": "/Prototype/AmbientSound#track_type"
    },
    {
      "value": {
        "forward": "",
        "backward": "",
        "forward-then-backward": ""
      },
      "name": "PT_AnimationRunMode",
      "link": "/Prototype/Animation#run_mode"
    },
    {
      "value": {
        "straight": "",
        "turn": ""
      },
      "name": "PT_RailRemnantsBendingType",
      "link": "/Prototype/RailRemnants#bending_type"
    },
    {
      "value": {
        "arrow": "",
        "i-beam": "",
        "crosshair": "",
        "wait-arrow": "",
        "size-all": "",
        "no": "",
        "hand": ""
      },
      "name": "PT_MouseCursorSystemCursor",
      "link": "/Prototype/MouseCursor#system_cursor"
    },
    {
      "value": {
        "None": "",
        "input": "",
        "input-output": "",
        "output": ""
      },
      "name": "PT_FluidBoxProductionType",
      "link": "/Types/FluidBox#production_type"
    },
    {
      "value": {
        "resource": "",
        "terrain": "",
        "enemy": ""
      },
      "name": "PT_AutoplaceControlCategory",
      "link": "/Prototype/AutoplaceControl#category"
    },
    {
      "value": {
        "always": "",
        "after-victory": "",
        "never": ""
      },
      "name": "PT_MapSettingsDifficultySettingsResearchQueueSetting",
      "link": "/Prototype/MapSettings#difficulty_settings"
    },
    {
      "value": {
        "locked": "The tip is hidden.",
        "optional": "Same as \"locked\".",
        "dependencies-not-met": "The <a href=\"/Prototype/TipsAndTricksItem#trigger\" title=\"Prototype/TipsAndTricksItem\">trigger</a> for the tip was already met, but the tip is still hidden because of dependencies.",
        "unlocked": "Not suggested by trigger yet, but visible in the window. This is also the state that tips are left in when the /unlock-tips command is used in-game. ",
        "suggested": "The dependencies and triggers are met, the game suggests the tip.",
        "not-to-be-suggested": "",
        "completed-without-tutorial": "The tip is considered completed, shows the checkmark in the GUI.",
        "completed": "The tip is considered completed, shows the checkmark in the GUI."
      },
      "name": "PT_TipStatus",
      "link": "/Prototype/TipStatus"
    },
    {
      "value": {
        "entity": "The normal entity selection box. Yellow by default.",
        "not-allowed": "The selection box used when specifying colliding entities. Red by default.",
        "electricity": "The selection box used to specify electric poles an entity is connected to. Light blue by default.",
        "pair": "Light blue by default.",
        "copy": "The selection box used when doing entity copy-paste. Green by default.",
        "train-visualization": "White by default.",
        "logistics": "Light blue by default.",
        "blueprint-snap-rectangle": "Green by default."
      },
      "name": "PT_CursorBoxType",
      "link": "/Types/CursorBoxType"
    },
    {
      "value": {
        "crafting-of-single-item-ordered": "",
        "crafting-of-multiple-items-ordered": "",
        "crafting-finished": ""
      },
      "name": "PT_CraftItemTipTriggerEventType",
      "link": "/Types/TipTrigger"
    },
    {
      "value": {
        "stack": "",
        "inventory": "",
        "whole-inventory": ""
      },
      "name": "PT_StackTransferTipTriggerTransfer",
      "link": "/Types/TipTrigger"
    },
    {
      "value": {
        "in": "",
        "out": ""
      },
      "name": "PT_EntityTransferTipTriggerTransfer",
      "link": "/Types/TipTrigger"
    },
    {
      "value": {
        "no-crop": "The sprite won't be automatically cropped.",
        "not-compressed": "",
        "always-compressed": "",
        "mipmap": "",
        "linear-minification": "",
        "linear-magnification": "",
        "linear-mip-level": "",
        "alpha-mask": "",
        "no-scale": "",
        "mask": "<p>When this flag is set, it will automatically set these flags:</p><ul><li>\"group=none\"</li></ul>",
        "icon": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"no-crop\"</li><li>\"no-scale\"</li><li>\"mipmap\"</li><li>\"linear-minification\"</li><li>\"linear-magnification\"</li><li>\"linear-mip-level\"</li><li>\"not-compressed\"</li><li>\"group=icon\"</li></ul>",
        "gui": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"no-crop\"</li><li>\"no-scale\"</li><li>\"mipmap\"</li><li>\"linear-minification\"</li><li>\"linear-magnification\"</li><li>\"linear-mip-level\"</li><li>\"not-compressed\"</li><li>\"group=gui\"</li></ul>",
        "gui-icon": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"no-crop\"</li><li>\"no-scale\"</li><li>\"mipmap\"</li><li>\"linear-minification\"</li><li>\"linear-magnification\"</li><li>\"not-compressed\"</li><li>\"group=icon\"</li></ul>",
        "light": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"mipmap\"</li><li>\"linear-mip-level\"</li><li>\"linear-minification\"</li><li>\"linear-magnification\"</li><li>\"group=none\"</li></ul>",
        "terrain": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"mipmap\"</li><li>\"linear-mip-level\"</li><li>\"linear-minification\"</li><li>\"no-crop\"</li><li>\"group=terrain\"</li></ul>",
        "terrain-effect-map": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"mipmap\"</li><li>\"linear-mip-level\"</li><li>\"linear-minification\"</li><li>\"no-crop\"</li><li>\"terrain-effect-map\" (internal group flag)</li></ul>",
        "shadow": "",
        "smoke": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"mipmap\"</li><li>\"linear-minification\"</li><li>\"linear-magnification\"</li><li>\"group=smoke\"</li></ul>",
        "decal": "<p>When this flag is set, it will internally set these flags:</p><ul><li>\"group=decal\"</li></ul>",
        "low-object": "",
        "trilinear-filtering": "",
        "group=none": "",
        "group=terrain": "",
        "group=shadow": "",
        "group=smoke": "",
        "group=decal": "",
        "group=low-object": "",
        "group=gui": "",
        "group=icon": "",
        "group=icon-background": "",
        "compressed": "Deprecated flag that does nothing but is kept to prevent \"unknown sprite flag\" errors."
      },
      "name": "PT_SpriteFlagsValue",
      "link": "/Types/SpriteFlags"
    },
    {
      "value": {
        "speed": "Modules that increase or decrease the machine's speed.",
        "productivity": "Modules that make the machine produce bonus items.",
        "consumption": "Modules that increase or decrease the machine's energy consumption.",
        "pollution": "Modules that make the machine produce more or less pollution. "
      },
      "name": "PT_EffectTypeLimitationValue",
      "link": "/Types/EffectTypeLimitation",
      "description": "A <a href=\"/Types/table\" title=\"Types/table\">list</a> of module effects or just one module effect as a string. Modules with other effects cannot be used on the machine. This means that both effects from modules and from surrounding beacons are restricted to the listed effects. If <code>allowed_effects</code> is set to <code>nil</code>, the machine cannot be affected by modules or beacons."
    },
    {
      "value": {
        "ground-tile": "",
        "water-tile": "",
        "resource-layer": "",
        "doodad-layer": "",
        "floor-layer": "",
        "item-layer": "",
        "ghost-layer": "",
        "object-layer": "",
        "player-layer": "",
        "train-layer": "",
        "rail-layer": "",
        "transport-belt-layer": "",
        "layer-13": "",
        "layer-14": "",
        "layer-15": "",
        "layer-16": "",
        "layer-17": "",
        "layer-18": "",
        "layer-19": "",
        "layer-20": "",
        "layer-21": "",
        "layer-22": "",
        "layer-23": "",
        "layer-24": "",
        "layer-25": "",
        "layer-26": "",
        "layer-27": "",
        "layer-28": "",
        "layer-29": "",
        "layer-30": "",
        "layer-31": "",
        "layer-32": "",
        "layer-33": "",
        "layer-34": "",
        "layer-35": "",
        "layer-36": "",
        "layer-37": "",
        "layer-38": "",
        "layer-39": "",
        "layer-40": "",
        "layer-41": "",
        "layer-42": "",
        "layer-43": "",
        "layer-44": "",
        "layer-45": "",
        "layer-46": "",
        "layer-47": "",
        "layer-48": "",
        "layer-49": "",
        "layer-50": "",
        "layer-51": "",
        "layer-52": "",
        "layer-53": "",
        "layer-54": "",
        "layer-55": "",
        "not-colliding-with-itself": "Any 2 entities that both have this option enabled on their prototype and have an identical collision mask layers list will not collide. Other collision mask options are not included in the identical layer list check. This does mean that 2 different prototypes with the same collision mask layers and this option enabled will not collide.",
        "consider-tile-transitions": "Uses the prototypes position rather than its collision box when doing collision checks with tile prototypes. Allows the prototype to overlap colliding tiles up until its center point. This is only respected for character movement and cars driven by players.",
        "colliding-with-tiles-only": "Any prototype with this collision option will only be checked for collision with other prototype's collision masks if they are a tile."
      },
      "name": "PT_CollisionMaskValue",
      "link": "/Types/CollisionMask"
    },
    {
      "value": {
        "not-rotatable": "Can't be rotated before or after placing.",
        "placeable-player": "placeable neutral/player/enemy determine the default force when placing entities in the map editor and using the *AUTO* option for the force.",
        "placeable-neutral": "placeable neutral/player/enemy determine the default force when placing entities in the map editor and using the *AUTO* option for the force.",
        "placeable-enemy": "placeable neutral/player/enemy determine the default force when placing entities in the map editor and using the *AUTO* option for the force.",
        "placeable-off-grid": "placeable-off-grid refers to the fact that most entities are placed on an invisible 'grid' within the world, entities with the placeable-off-grid flag do not have to line up with this grid (like trees and land-mines)",
        "player-creation": "Makes it possible for the biter AI to target the entity as a distraction. Makes it possible to blueprint, deconstruct, and repair the entity (can be turned off again using the specific flags). Enables smoke to be created automatically when building the entity. If the entity does not have <a href=\"/Prototype/Entity#map_color\" title=\"Prototype/Entity\">Prototype/Entity#map_color</a> set, \"player-creation\" makes the entity appear on the map/minimap with the default color specified in the <a href=\"/Prototype/UtilityConstants\" title=\"Prototype/UtilityConstants\">Prototype/UtilityConstants</a>.",
        "building-direction-8-way": "Uses 45 degree angle increments when selecting direction.",
        "filter-directions": "Used to automatically detect the proper direction, if possible. Used by base with the pump, train stop, and train signal.",
        "fast-replaceable-no-build-while-moving": "Fast replace will not apply when building while moving.",
        "breaths-air": "This is used to specify that the entity breathes air, and so is affected by poison (currently <a href=\"/Poison_capsule\" title=\"Poison capsule\">poison capsules</a> are the only source).",
        "not-repairable": "Used to specify that the entity can not be 'healed' by repair-packs (or construction robots with repair packs)",
        "not-on-map": "The entity does not get drawn on the map.",
        "not-blueprintable": "The entity can't be used in blueprints.",
        "not-deconstructable": "The entity can't be deconstructed.",
        "hidden": "Hides the entity from the bonus GUI (button above the map) and from the made in property of recipe tooltips.",
        "hide-alt-info": "Hides the alt-info of an entity in alt-mode, for example the recipe icon.",
        "fast-replaceable-no-cross-type-while-moving": "Do not fast replace over other entity types when building while moving.",
        "no-gap-fill-while-building": "",
        "not-flammable": "Do not apply fire stickers to the entity.",
        "no-automated-item-removal": "Prevents inserters and loaders from taking items from this entity.",
        "no-automated-item-insertion": "Prevents inserters and loaders from inserting items into this entity.",
        "no-copy-paste": "",
        "not-selectable-in-game": "Disallows selection of the entity even when a selection box is specified for other reasons. For example, selection boxes are used to determine the size of outlines to be shown when highlighting entities inside electric pole ranges.",
        "not-upgradable": "The entity can't be selected by the <a href=\"/Upgrade_planner\" title=\"Upgrade planner\">upgrade planner</a>.",
        "not-in-kill-statistics": "The entity is not shown in the kill statistics."
      },
      "name": "PT_EntityPrototypeFlagsValue",
      "link": "/Types/EntityPrototypeFlags"
    },
    {
      "value": {
        "draw-logistic-overlay": "Whether the logistics areas of roboports should be drawn when holding this item. Used for example by the <a href=\"/Deconstruction_planner\" title=\"Deconstruction planner\">deconstruction planner</a>.",
        "hidden": "Item will not appear in lists of all items such as those for logistics requests, filters, etc.",
        "always-show": "Always show the item in selection lists (item filter, logistic request etc.) even when locked recipe for that item is present.",
        "hide-from-bonus-gui": "Item will not appear in the bonus gui.",
        "hide-from-fuel-tooltip": "Item will not appear in the tooltips shown when hovering over a burner inventory with the fuel category the item is in.",
        "not-stackable": "The item can never be stacked. Additionally, the item does not show an item count when in the cursor.<br>This also prevents the item from stacking in assembling machine input slots, which otherwise can exceed the item stack size if required by the recipe. ",
        "can-extend-inventory": "Has no effect.",
        "primary-place-result": "Item will be preferred by construction bots when building the entity specified by the item's <a href=\"/Prototype/Item#place_result\" title=\"Prototype/Item\">place_result</a>.",
        "mod-openable": "Only works for <a href=\"/Prototype/SelectionTool\" title=\"Prototype/SelectionTool\">Prototype/SelectionTool</a> and derived classes.<br>This property corresponds to the following event in the lua api: <a rel=\"nofollow\" class=\"external text\" href=\"https://lua-api.factorio.com/latest/events.html#on_mod_item_opened\">defines.events.on_mod_item_opened</a>",
        "only-in-cursor": "Item is deleted when removed from the cursor by pressing <code>Q</code> (clear cursor). Used for example by the copy paste tools. ",
        "spawnable": "Item is able to be spawned by a <a href=\"/Prototype/Shortcut\" title=\"Prototype/Shortcut\">Prototype/Shortcut</a> or <a href=\"/Prototype/CustomInput\" title=\"Prototype/CustomInput\">Prototype/CustomInput</a>."
      },
      "name": "PT_ItemPrototypeFlagsValue",
      "link": "/Types/ItemPrototypeFlags"
    },
    {
      "value": {
        "blueprint": "The normal rules for acceptable entities in blueprints",
        "deconstruct": "The normal rules for acceptable entities for deconstruction",
        "cancel-deconstruct": "The normal rules for acceptable entities for cancel deconstruction",
        "items": "Item entities",
        "trees": "Trees",
        "buildable-type": "Buildable entities as defined by the game",
        "nothing": "Nothing",
        "items-to-place": "The entity has an item that builds the entity",
        "any-entity": "Any entity",
        "any-tile": "Any tile",
        "same-force": "The entity force matches that of the player doing the selection",
        "not-same-force": "The entity force does not match that of the player doing the selection",
        "friend": "The entity force is friend to that of the player doing the selection",
        "enemy": "The entity force is enemy to that of the player doing the selection",
        "upgrade": "The normal rules for acceptable entities in upgrade planners",
        "cancel-upgrade": "The normal rules for acceptable entities for cancel upgrade",
        "downgrade": "The normal rules for acceptable entities for downgrade ",
        "entity-with-health": "",
        "entity-with-force": "",
        "entity-with-owner": "",
        "avoid-rolling-stock": "The entity is not a <a href=\"/Prototype/RollingStock\" title=\"Prototype/RollingStock\">Prototype/RollingStock</a>"
      },
      "name": "PT_SelectionToolSelectionModeValue",
      "link": "/Types/SelectionTool#selection_mode"
    }
  ],
  "prototypes": [
    {
      "value": {
        "container": "PT_Container",
        "map-gen-presets": "PT_MapGenPresets",
        "artillery-wagon": "PT_ArtilleryWagon",
        "achievement": "PT_Achievement",
        "heat-interface": "PT_HeatInterface",
        "deconstructible-tile-proxy": "PT_DeconstructibleTileProxy",
        "dont-use-entity-in-energy-production-achievement": "PT_DontUseEntityInEnergyProductionAchievement",
        "finish-the-game-achievement": "PT_FinishTheGameAchievement",
        "rocket-silo": "PT_RocketSilo",
        "ammo-turret": "PT_AmmoTurret",
        "entity-ghost": "PT_EntityGhost",
        "character": "PT_Character",
        "trivial-smoke": "PT_TrivialSmoke",
        "fire": "PT_FireFlame",
        "fluid": "PT_Fluid",
        "optimized-particle": "PT_Particle",
        "burner-generator": "PT_BurnerGenerator",
        "item": "PT_Item",
        "train-path-achievement": "PT_TrainPathAchievement",
        "module": "PT_Module",
        "dont-build-entity-achievement": "PT_DontBuildEntityAchievement",
        "rail-signal": "PT_RailSignal",
        "animation": "PT_Animation",
        "item-request-proxy": "PT_ItemRequestProxy",
        "god-controller": "PT_GodController",
        "rocket-silo-rocket": "PT_RocketSiloRocket",
        "roboport-equipment": "PT_RoboportEquipment",
        "transport-belt": "PT_TransportBelt",
        "wind-sound": "PT_WindSound",
        "simple-entity-with-owner": "PT_SimpleEntityWithOwner",
        "programmable-speaker": "PT_ProgrammableSpeaker",
        "corpse": "PT_Corpse",
        "leaf-particle": "PT_LeafParticle",
        "build-entity-achievement": "PT_BuildEntityAchievement",
        "train-stop": "PT_TrainStop",
        "gun": "PT_Gun",
        "storage-tank": "PT_StorageTank",
        "electric-energy-interface": "PT_ElectricEnergyInterface",
        "power-switch": "PT_PowerSwitch",
        "selection-tool": "PT_SelectionTool",
        "cliff": "PT_Cliff",
        "pipe-to-ground": "PT_PipeToGround",
        "module-category": "PT_ModuleCategory",
        "virtual-signal": "PT_VirtualSignal",
        "movement-bonus-equipment": "PT_MovementBonusEquipment",
        "underground-belt": "PT_UndergroundBelt",
        "character-corpse": "PT_CharacterCorpse",
        "decider-combinator": "PT_DeciderCombinator",
        "boiler": "PT_Boiler",
        "stream": "PT_FluidStream",
        "deconstruct-with-robots-achievement": "PT_DeconstructWithRobotsAchievement",
        "mining-tool": "PT_MiningTool",
        "simple-entity": "PT_SimpleEntity",
        "sprite": "PT_Sprite",
        "unit-spawner": "PT_EnemySpawner",
        "particle": "PT_EntityParticle",
        "pump": "PT_Pump",
        "straight-rail": "PT_StraightRail",
        "repair-tool": "PT_RepairTool",
        "tile-ghost": "PT_TileGhost",
        "flame-thrower-explosion": "PT_FlameThrowerExplosion",
        "curved-rail": "PT_CurvedRail",
        "editor-controller": "PT_EditorController",
        "turret": "PT_Turret",
        "sticker": "PT_Sticker",
        "utility-sounds": "PT_UtilitySounds",
        "assembling-machine": "PT_AssemblingMachine",
        "item-with-inventory": "PT_ItemWithInventory",
        "mining-drill": "PT_MiningDrill",
        "arithmetic-combinator": "PT_ArithmeticCombinator",
        "combat-robot": "PT_CombatRobot",
        "inserter": "PT_Inserter",
        "roboport": "PT_Roboport",
        "loader-1x1": "PT_Loader1x1",
        "spectator-controller": "PT_SpectatorController",
        "rail-planner": "PT_RailPlanner",
        "radar": "PT_Radar",
        "kill-achievement": "PT_KillAchievement",
        "utility-constants": "PT_UtilityConstants",
        "autoplace-control": "PT_AutoplaceControl",
        "fish": "PT_Fish",
        "smoke-with-trigger": "PT_SmokeWithTrigger",
        "artillery-projectile": "PT_ArtilleryProjectile",
        "projectile": "PT_Projectile",
        "mouse-cursor": "PT_MouseCursor",
        "font": "PT_Font",
        "dont-craft-manually-achievement": "PT_DontCraftManuallyAchievement",
        "beam": "PT_Beam",
        "resource-category": "PT_ResourceCategory",
        "map-settings": "PT_MapSettings",
        "belt-immunity-equipment": "PT_BeltImmunityEquipment",
        "trigger-target-type": "PT_TriggerTargetType",
        "flying-text": "PT_FlyingText",
        "combat-robot-count": "PT_CombatRobotCountAchievement",
        "cargo-wagon": "PT_CargoWagon",
        "furnace": "PT_Furnace",
        "produce-achievement": "PT_ProduceAchievement",
        "land-mine": "PT_LandMine",
        "arrow": "PT_Arrow",
        "tile-effect": "PT_TileEffect",
        "loader": "PT_Loader1x2",
        "item-subgroup": "PT_ItemSubGroup",
        "sound": "PT_Sound",
        "fluid-wagon": "PT_FluidWagon",
        "night-vision-equipment": "PT_NightVisionEquipment",
        "rail-remnants": "PT_RailRemnants",
        "highlight-box": "PT_HighlightBoxEntity",
        "lab": "PT_Lab",
        "recipe-category": "PT_RecipeCategory",
        "fuel-category": "PT_FuelCategory",
        "particle-source": "PT_ParticleSource",
        "item-with-label": "PT_ItemWithLabel",
        "damage-type": "PT_DamageType",
        "solar-panel": "PT_SolarPanel",
        "utility-sprites": "PT_UtilitySprites",
        "ammo-category": "PT_AmmoCategory",
        "locomotive": "PT_Locomotive",
        "tile": "PT_Tile",
        "construction-robot": "PT_ConstructionRobot",
        "constant-combinator": "PT_ConstantCombinator",
        "pipe": "PT_Pipe",
        "player-port": "PT_PlayerPort",
        "infinity-pipe": "PT_InfinityPipe",
        "resource": "PT_ResourceEntity",
        "generator-equipment": "PT_GeneratorEquipment",
        "optimized-decorative": "PT_Decorative",
        "construct-with-robots-achievement": "PT_ConstructWithRobotsAchievement",
        "tree": "PT_Tree",
        "gui-style": "PT_GuiStyle",
        "upgrade-item": "PT_UpgradeItem",
        "tool": "PT_Tool",
        "market": "PT_Market",
        "blueprint": "PT_BlueprintItem",
        "electric-turret": "PT_ElectricTurret",
        "unit": "PT_Unit",
        "beacon": "PT_Beacon",
        "armor": "PT_Armor",
        "solar-panel-equipment": "PT_SolarPanelEquipment",
        "energy-shield-equipment": "PT_EnergyShieldEquipment",
        "rocket-silo-rocket-shadow": "PT_RocketSiloRocketShadow",
        "fluid-turret": "PT_FluidTurret",
        "accumulator": "PT_Accumulator",
        "deconstruction-item": "PT_DeconstructionItem",
        "ambient-sound": "PT_AmbientSound",
        "artillery-turret": "PT_ArtilleryTurret",
        "noise-expression": "PT_NamedNoiseExpression",
        "capsule": "PT_Capsule",
        "offshore-pump": "PT_OffshorePump",
        "reactor": "PT_Reactor",
        "research-achievement": "PT_ResearchAchievement",
        "recipe": "PT_Recipe",
        "custom-input": "PT_CustomInput",
        "generator": "PT_Generator",
        "produce-per-hour-achievement": "PT_ProducePerHourAchievement",
        "noise-layer": "PT_NoiseLayer",
        "artillery-flare": "PT_ArtilleryFlare",
        "logistic-container": "PT_LogisticContainer",
        "shortcut": "PT_Shortcut",
        "player-damaged-achievement": "PT_PlayerDamagedAchievement",
        "car": "PT_Car",
        "item-entity": "PT_ItemEntity",
        "item-with-tags": "PT_ItemWithTags",
        "tutorial": "PT_Tutorial",
        "speech-bubble": "PT_SpeechBubble",
        "equipment-grid": "PT_EquipmentGrid",
        "infinity-container": "PT_InfinityContainer",
        "battery-equipment": "PT_BatteryEquipment",
        "ammo": "PT_AmmoItem",
        "item-with-entity-data": "PT_ItemWithEntityData",
        "smoke": "PT_SimpleSmoke",
        "deliver-by-robots-achievement": "PT_DeliverByRobotsAchievement",
        "heat-pipe": "PT_HeatPipe",
        "lamp": "PT_Lamp",
        "technology": "PT_Technology",
        "splitter": "PT_Splitter",
        "equipment-category": "PT_EquipmentCategory",
        "logistic-robot": "PT_LogisticRobot",
        "item-group": "PT_ItemGroup",
        "active-defense-equipment": "PT_ActiveDefenseEquipment",
        "explosion": "PT_Explosion",
        "electric-pole": "PT_ElectricPole",
        "blueprint-book": "PT_BlueprintBook",
        "simple-entity-with-force": "PT_SimpleEntityWithForce",
        "gate": "PT_Gate",
        "group-attack-achievement": "PT_GroupAttackAchievement",
        "wall": "PT_Wall",
        "rail-chain-signal": "PT_RailChainSignal",
        "copy-paste-tool": "PT_CopyPasteTool",
        "linked-container": "PT_LinkedContainer",
        "spider-leg": "PT_SpiderLeg",
        "spider-vehicle": "PT_SpiderVehicle",
        "spidertron-remote": "PT_SpidertronRemote",
        "tips-and-tricks-item": "PT_TipsAndTricksItem",
        "tips-and-tricks-item-category": "PT_TipsAndTricksItemCategory",
        "linked-belt": "PT_LinkedBelt"
      },
      "name": "Prototype"
    },
    {
      "value": {
        "damage": "PT_DamageTriggerEffectItem",
        "create-entity": "PT_CreateEntityTriggerEffectItem",
        "create-explosion": "PT_CreateExplosionTriggerEffectItem",
        "create-fire": "PT_CreateFireTriggerEffectItem",
        "create-smoke": "PT_CreateSmokeTriggerEffectItem",
        "create-trivial-smoke": "PT_CreateTrivialSmokeEffectItem",
        "create-particle": "PT_CreateParticleTriggerEffectItem",
        "create-sticker": "PT_CreateStickerTriggerEffectItem",
        "create-decorative": "PT_CreateDecorativesTriggerEffectItem",
        "nested-result": "PT_NestedTriggerEffectItem",
        "play-sound": "PT_PlaySoundTriggerEffectItem",
        "push-back": "PT_PushBackTriggerEffectItem",
        "destroy-cliffs": "PT_DestroyCliffsTriggerEffectItem",
        "show-explosion-on-chart": "PT_ShowExplosionOnChartTriggerEffectItem",
        "insert-item": "PT_InsertItemTriggerEffectItem",
        "script": "PT_ScriptTriggerEffectItem",
        "set-tile": "PT_SetTileTriggerEffectItem",
        "invoke-tile-trigger": "PT_InvokeTileEffectTriggerEffectItem",
        "destroy-decoratives": "PT_DestroyDecorativesTriggerEffectItem",
        "camera-effect": "PT_CameraEffectTriggerEffectItem"
      },
      "name": "PT_TriggerEffectValue",
      "link": "/Types/SpriteVariations"
    },
    {
      "value": {
        "instant": "PT_InstantTriggerDelivery",
        "projectile": "PT_ProjectileTriggerDelivery",
        "flame-thrower": "PT_FlameThrowerExplosionTriggerDelivery",
        "beam": "PT_BeamTriggerDelivery",
        "stream": "PT_StreamTriggerDelivery",
        "artillery": "PT_ArtilleryTriggerDelivery"
      },
      "name": "PT_TriggerDelivery",
      "link": "/Types/TriggerDelivery"
    },
    {
      "value": {
        "basic": "PT_LightDefinitionBasic",
        "oriented": "PT_LightDefinitionOriented"
      },
      "name": "PT_LightDefinition",
      "link": "/Types/LightDefinition",
      "description": "Specifies the light source."
    },
    {
      "value": {
        "item": "PT_ItemIngredientPrototype",
        "fluid": "PT_FluidIngredientPrototype",
        "": "PT_ItemIngredientPrototype"
      },
      "name": "PT_IngredientPrototype",
      "link": "/Types/IngredientPrototype",
      "description": "Class used for <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a> ingredients, it loads as <a href=\"/Types/ItemIngredientPrototype\" title=\"Types/ItemIngredientPrototype\">Types/ItemIngredientPrototype</a> or <a href=\"/Types/FluidIngredientPrototype\" title=\"Types/FluidIngredientPrototype\">Types/FluidIngredientPrototype</a>, depending on the <a href=\"#type\">#type</a>."
    },
    {
      "value": {
        "item": "PT_ProductPrototypeItem",
        "fluid": "PT_ProductPrototypeFluid",
        "": "PT_ProductPrototypeItem"
      },
      "name": "PT_ProductPrototype",
      "link": "/Types/ProductPrototype",
      "description": "Class used for <a href=\"/Prototype/Recipe\" title=\"Prototype/Recipe\">Prototype/Recipe</a> prodcuts, it loads as <a href=\"/Types/ItemProductPrototype\" title=\"Types/ItemProductPrototype\">Types/ItemProductPrototype</a> or <a href=\"/Types/FluidProductPrototype\" title=\"Types/FluidProductPrototype\">Types/FluidProductPrototype</a>, depending on the <a href=\"#type\">#type</a>."
    },
    {
      "value": {
        "throw": "PT_ThrowCapsuleAction",
        "equipment-remote": "PT_ActivateEquipmentCapsuleAction",
        "use-on-self": "PT_UseOnSelfCapsuleAction",
        "artillery-remote": "PT_ArtilleryRemoteCapsuleAction",
        "destroy-cliffs": "PT_DestroyCliffsCapsuleAction"
      },
      "name": "PT_CapsuleAction",
      "link": "/Types/CapsuleAction",
      "description": "The table is loaded as a specific capsule action, depending on the value of the <code>type</code> key."
    },
    {
      "value": {
        "projectile": "PT_ProjectileAttackParameters",
        "beam": "PT_BeamAttackParameters",
        "stream": "PT_StreamAttackParameters"
      },
      "name": "PT_AttackParameters",
      "link": "/Types/AttackParameters",
      "description": "A types/table. The table is loaded as one of the extensions of Types/BaseAttackParameters, depending on the value of the <code>type</code> key."
    },
    {
      "value": {
        "full": "PT_EquipmentShapeBase",
        "manual": "PT_EquipmentShapeManual"
      },
      "name": "PT_EquipmentShape",
      "link": "/Types/EquipmentShape",
      "description": "The shape and dimensions of an equipment module."
    },
    {
      "value": {
        "electric": "PT_EnergySourceElectric",
        "burner": "PT_EnergySourceBurner",
        "heat": "PT_EnergySourceHeat",
        "fluid": "PT_EnergySourceFluid",
        "void": "PT_EnergySourceBase"
      },
      "name": "PT_EnergySource",
      "link": "/Types/EnergySource"
    },
    {
      "value": {
        "direct": "PT_Trigger",
        "area": "PT_AreaTriggerItem",
        "line": "PT_LineTriggerItem",
        "cluster": "PT_ClusterTriggerItem"
      },
      "name": "PT_Trigger",
      "link": "/Types/Trigger"
    },
    {
      "value": {
        "or": "PT_OrTipTrigger",
        "and": "PT_AndTipTrigger",
        "sequence": "PT_SequenceTipTrigger",
        "dependencies-met": "PT_DependenciesMetTipTrigger",
        "time-elapsed": "PT_TimeElapsedTipTrigger",
        "research": "PT_ResearchTechnologyTipTrigger",
        "unlocked-recipe": "PT_UnlockedRecipeTipTrigger",
        "craft-item": "PT_CraftItemTipTrigger",
        "build-entity": "PT_BuildEntityTipTrigger",
        "manual-transfer": "PT_ManualTransferTipTrigger",
        "stack-transfer": "PT_StackTransferTipTrigger",
        "entity-transfer": "PT_EntityTransferTipTrigger",
        "set-recipe": "PT_SetRecipeTipTrigger",
        "limit-chest": "PT_LimitChestTipTrigger",
        "use-pipette": "PT_UsePipetteTipTrigger",
        "set-logistic-request": "PT_SetLogisticRequestTipTrigger",
        "use-confirm": "PT_UseConfirmTipTrigger",
        "low-power": "PT_LowPowerTipTrigger",
        "paste-entity-settings": "PT_PasteEntitySettingsTipTrigger",
        "fast-replace": "PT_FastReplaceTipTrigger",
        "group-attack": "PT_GroupAttackTipTrigger"
      },
      "name": "PT_TipTrigger",
      "link": "/Types/TipTrigger",
      "description": "A Types/table that is loaded as one of the below listed types, depending on the value of the type key in the table."
    },
    {
      "value": {
        "inserter-stack-size-bonus": "PT_SimpleModifierPrototype",
        "stack-inserter-capacity-bonus": "PT_SimpleModifierPrototype",
        "laboratory-speed": "PT_SimpleModifierPrototype",
        "character-logistic-trash-slots": "PT_SimpleModifierPrototype",
        "maximum-following-robots-count": "PT_SimpleModifierPrototype",
        "worker-robot-speed": "PT_SimpleModifierPrototype",
        "worker-robot-storage": "PT_SimpleModifierPrototype",
        "ghost-time-to-live": "PT_SimpleModifierPrototype",
        "turret-attack": "PT_TurretAttackModifierPrototype",
        "ammo-damage": "PT_AmmoDamageModifierPrototype",
        "give-item": "PT_GiveItemModifierPrototype",
        "gun-speed": "PT_GunSpeedModifierPrototype",
        "unlock-recipe": "PT_UnlockRecipeModifierPrototype",
        "character-crafting-speed": "PT_SimpleModifierPrototype",
        "character-mining-speed": "PT_SimpleModifierPrototype",
        "character-running-speed": "PT_SimpleModifierPrototype",
        "character-build-distance": "PT_SimpleModifierPrototype",
        "character-item-drop-distance": "PT_SimpleModifierPrototype",
        "character-reach-distance": "PT_SimpleModifierPrototype",
        "character-resource-reach-distance": "PT_SimpleModifierPrototype",
        "character-item-pickup-distance": "PT_SimpleModifierPrototype",
        "character-loot-pickup-distance": "PT_SimpleModifierPrototype",
        "character-inventory-slots-bonus": "PT_SimpleModifierPrototype",
        "deconstruction-time-to-live": "PT_SimpleModifierPrototype",
        "max-failed-attempts-per-tick-per-construction-queue": "PT_SimpleModifierPrototype",
        "max-successful-attempts-per-tick-per-construction-queue": "PT_SimpleModifierPrototype",
        "character-health-bonus": "PT_SimpleModifierPrototype",
        "mining-drill-productivity-bonus": "PT_SimpleModifierPrototype",
        "zoom-to-world-enabled": "PT_BoolModifierPrototype",
        "zoom-to-world-ghost-building-enabled": "PT_BoolModifierPrototype",
        "zoom-to-world-blueprint-enabled": "PT_BoolModifierPrototype",
        "zoom-to-world-deconstruction-planner-enabled": "PT_BoolModifierPrototype",
        "zoom-to-world-upgrade-planner-enabled": "PT_BoolModifierPrototype",
        "zoom-to-world-selection-tool-enabled": "PT_BoolModifierPrototype",
        "worker-robot-battery": "PT_SimpleModifierPrototype",
        "laboratory-productivity": "PT_SimpleModifierPrototype",
        "follower-robot-lifetime": "PT_SimpleModifierPrototype",
        "artillery-range": "PT_SimpleModifierPrototype",
        "nothing": "PT_NothingModifierPrototype",
        "character-logistic-requests": "PT_BoolModifierPrototype"
      },
      "name": "PT_ModifierPrototype",
      "link": "/Types/ModifierPrototype",
      "description": "The effect that is applied when a <a href=\"/Prototype/Technology\" title=\"Prototype/Technology\">Prototype/Technology</a> is researched. It is a <a href=\"/Types/table\" title=\"Types/table\">Types/table</a> that contains at least the field <code>type</code>. A modifier prototype may also have other fields depending on the type, because it is loaded as an extension of this type."
    }
  ]
}
